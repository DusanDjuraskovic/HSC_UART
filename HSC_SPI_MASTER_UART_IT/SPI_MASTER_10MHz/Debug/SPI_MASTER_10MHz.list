
SPI_MASTER_10MHz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ee4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003fa4  08003fa4  00013fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004000  08004000  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08004000  08004000  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004000  08004000  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004000  08004000  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004004  08004004  00014004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  2000001c  08004024  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08004024  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2af  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001de1  00000000  00000000  0002f2f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  000310d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d08  00000000  00000000  00031e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010bf4  00000000  00000000  00032ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001091b  00000000  00000000  00043794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00067690  00000000  00000000  000540af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bb73f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003218  00000000  00000000  000bb790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003f8c 	.word	0x08003f8c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	08003f8c 	.word	0x08003f8c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b087      	sub	sp, #28
 8000224:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fd2f 	bl	8000c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f859 	bl	80002e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f9a5 	bl	800057c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000232:	f000 f8b7 	bl	80003a4 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000236:	f000 f8f3 	bl	8000420 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800023a:	f000 f95b 	bl	80004f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* CONFIIGURE THE CONTROL DATA BUFFER */

  /* Initialize the entire TX data buffer to 0. */
  for(int i = 0; i < spiSize; i++)
 800023e:	2300      	movs	r3, #0
 8000240:	60fb      	str	r3, [r7, #12]
 8000242:	e007      	b.n	8000254 <main+0x34>
      txData[i] = 0;
 8000244:	4a1d      	ldr	r2, [pc, #116]	; (80002bc <main+0x9c>)
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	18d3      	adds	r3, r2, r3
 800024a:	2200      	movs	r2, #0
 800024c:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < spiSize; i++)
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	3301      	adds	r3, #1
 8000252:	60fb      	str	r3, [r7, #12]
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	2b11      	cmp	r3, #17
 8000258:	ddf4      	ble.n	8000244 <main+0x24>

  /* Configure data to send via SPI*/
  setTxData(txData, &testMode, &out0, &out1, &out2);
 800025a:	4c19      	ldr	r4, [pc, #100]	; (80002c0 <main+0xa0>)
 800025c:	4a19      	ldr	r2, [pc, #100]	; (80002c4 <main+0xa4>)
 800025e:	491a      	ldr	r1, [pc, #104]	; (80002c8 <main+0xa8>)
 8000260:	4816      	ldr	r0, [pc, #88]	; (80002bc <main+0x9c>)
 8000262:	4b1a      	ldr	r3, [pc, #104]	; (80002cc <main+0xac>)
 8000264:	9300      	str	r3, [sp, #0]
 8000266:	0023      	movs	r3, r4
 8000268:	f000 f9d0 	bl	800060c <setTxData>

  /* Initialize the UART data buffer to all blank characters */
  for(int i = 0; i < spiWords; i++)
 800026c:	2300      	movs	r3, #0
 800026e:	60bb      	str	r3, [r7, #8]
 8000270:	e016      	b.n	80002a0 <main+0x80>
  	for(int j = 0; j < uartChars; j++)
 8000272:	2300      	movs	r3, #0
 8000274:	607b      	str	r3, [r7, #4]
 8000276:	e00d      	b.n	8000294 <main+0x74>
  	{
  	   uartBuf[i][j] = ' ';
 8000278:	4915      	ldr	r1, [pc, #84]	; (80002d0 <main+0xb0>)
 800027a:	68ba      	ldr	r2, [r7, #8]
 800027c:	0013      	movs	r3, r2
 800027e:	005b      	lsls	r3, r3, #1
 8000280:	189b      	adds	r3, r3, r2
 8000282:	005b      	lsls	r3, r3, #1
 8000284:	18ca      	adds	r2, r1, r3
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	18d3      	adds	r3, r2, r3
 800028a:	2220      	movs	r2, #32
 800028c:	701a      	strb	r2, [r3, #0]
  	for(int j = 0; j < uartChars; j++)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	3301      	adds	r3, #1
 8000292:	607b      	str	r3, [r7, #4]
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2b05      	cmp	r3, #5
 8000298:	ddee      	ble.n	8000278 <main+0x58>
  for(int i = 0; i < spiWords; i++)
 800029a:	68bb      	ldr	r3, [r7, #8]
 800029c:	3301      	adds	r3, #1
 800029e:	60bb      	str	r3, [r7, #8]
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	2b08      	cmp	r3, #8
 80002a4:	dde5      	ble.n	8000272 <main+0x52>
  	}

  /* Initialize the UART interrupt */
  HAL_UART_Transmit_IT(&huart1, (uint8_t *)"\r\n", 2); /* Print a blank line */
 80002a6:	490b      	ldr	r1, [pc, #44]	; (80002d4 <main+0xb4>)
 80002a8:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <main+0xb8>)
 80002aa:	2202      	movs	r2, #2
 80002ac:	0018      	movs	r0, r3
 80002ae:	f002 fe87 	bl	8002fc0 <HAL_UART_Transmit_IT>

  /* Enable TIM1 interrupt */
  HAL_TIM_Base_Start_IT(&htim1);
 80002b2:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <main+0xbc>)
 80002b4:	0018      	movs	r0, r3
 80002b6:	f002 f9c1 	bl	800263c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ba:	e7fe      	b.n	80002ba <main+0x9a>
 80002bc:	2000016c 	.word	0x2000016c
 80002c0:	20000192 	.word	0x20000192
 80002c4:	20000001 	.word	0x20000001
 80002c8:	20000000 	.word	0x20000000
 80002cc:	20000002 	.word	0x20000002
 80002d0:	200001b4 	.word	0x200001b4
 80002d4:	08003fa4 	.word	0x08003fa4
 80002d8:	200000e4 	.word	0x200000e4
 80002dc:	2000009c 	.word	0x2000009c

080002e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e0:	b590      	push	{r4, r7, lr}
 80002e2:	b095      	sub	sp, #84	; 0x54
 80002e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e6:	2420      	movs	r4, #32
 80002e8:	193b      	adds	r3, r7, r4
 80002ea:	0018      	movs	r0, r3
 80002ec:	2330      	movs	r3, #48	; 0x30
 80002ee:	001a      	movs	r2, r3
 80002f0:	2100      	movs	r1, #0
 80002f2:	f003 fe42 	bl	8003f7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f6:	2310      	movs	r3, #16
 80002f8:	18fb      	adds	r3, r7, r3
 80002fa:	0018      	movs	r0, r3
 80002fc:	2310      	movs	r3, #16
 80002fe:	001a      	movs	r2, r3
 8000300:	2100      	movs	r1, #0
 8000302:	f003 fe3a 	bl	8003f7a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000306:	003b      	movs	r3, r7
 8000308:	0018      	movs	r0, r3
 800030a:	2310      	movs	r3, #16
 800030c:	001a      	movs	r2, r3
 800030e:	2100      	movs	r1, #0
 8000310:	f003 fe33 	bl	8003f7a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000314:	0021      	movs	r1, r4
 8000316:	187b      	adds	r3, r7, r1
 8000318:	2202      	movs	r2, #2
 800031a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031c:	187b      	adds	r3, r7, r1
 800031e:	2201      	movs	r2, #1
 8000320:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000322:	187b      	adds	r3, r7, r1
 8000324:	2210      	movs	r2, #16
 8000326:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000328:	187b      	adds	r3, r7, r1
 800032a:	2202      	movs	r2, #2
 800032c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800032e:	187b      	adds	r3, r7, r1
 8000330:	2200      	movs	r2, #0
 8000332:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8000334:	187b      	adds	r3, r7, r1
 8000336:	2280      	movs	r2, #128	; 0x80
 8000338:	0392      	lsls	r2, r2, #14
 800033a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800033c:	187b      	adds	r3, r7, r1
 800033e:	2200      	movs	r2, #0
 8000340:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000342:	187b      	adds	r3, r7, r1
 8000344:	0018      	movs	r0, r3
 8000346:	f000 ffed 	bl	8001324 <HAL_RCC_OscConfig>
 800034a:	1e03      	subs	r3, r0, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800034e:	f000 fb47 	bl	80009e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000352:	2110      	movs	r1, #16
 8000354:	187b      	adds	r3, r7, r1
 8000356:	2207      	movs	r2, #7
 8000358:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800035a:	187b      	adds	r3, r7, r1
 800035c:	2202      	movs	r2, #2
 800035e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2200      	movs	r2, #0
 8000364:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000366:	187b      	adds	r3, r7, r1
 8000368:	2200      	movs	r2, #0
 800036a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800036c:	187b      	adds	r3, r7, r1
 800036e:	2101      	movs	r1, #1
 8000370:	0018      	movs	r0, r3
 8000372:	f001 faf1 	bl	8001958 <HAL_RCC_ClockConfig>
 8000376:	1e03      	subs	r3, r0, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800037a:	f000 fb31 	bl	80009e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800037e:	003b      	movs	r3, r7
 8000380:	2201      	movs	r2, #1
 8000382:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000384:	003b      	movs	r3, r7
 8000386:	2200      	movs	r2, #0
 8000388:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800038a:	003b      	movs	r3, r7
 800038c:	0018      	movs	r0, r3
 800038e:	f001 fc27 	bl	8001be0 <HAL_RCCEx_PeriphCLKConfig>
 8000392:	1e03      	subs	r3, r0, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000396:	f000 fb23 	bl	80009e0 <Error_Handler>
  }
}
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	46bd      	mov	sp, r7
 800039e:	b015      	add	sp, #84	; 0x54
 80003a0:	bd90      	pop	{r4, r7, pc}
	...

080003a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003a8:	4b1b      	ldr	r3, [pc, #108]	; (8000418 <MX_SPI1_Init+0x74>)
 80003aa:	4a1c      	ldr	r2, [pc, #112]	; (800041c <MX_SPI1_Init+0x78>)
 80003ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003ae:	4b1a      	ldr	r3, [pc, #104]	; (8000418 <MX_SPI1_Init+0x74>)
 80003b0:	2282      	movs	r2, #130	; 0x82
 80003b2:	0052      	lsls	r2, r2, #1
 80003b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003b6:	4b18      	ldr	r3, [pc, #96]	; (8000418 <MX_SPI1_Init+0x74>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003bc:	4b16      	ldr	r3, [pc, #88]	; (8000418 <MX_SPI1_Init+0x74>)
 80003be:	22e0      	movs	r2, #224	; 0xe0
 80003c0:	00d2      	lsls	r2, r2, #3
 80003c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003c4:	4b14      	ldr	r3, [pc, #80]	; (8000418 <MX_SPI1_Init+0x74>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003ca:	4b13      	ldr	r3, [pc, #76]	; (8000418 <MX_SPI1_Init+0x74>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003d0:	4b11      	ldr	r3, [pc, #68]	; (8000418 <MX_SPI1_Init+0x74>)
 80003d2:	2280      	movs	r2, #128	; 0x80
 80003d4:	0092      	lsls	r2, r2, #2
 80003d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003d8:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <MX_SPI1_Init+0x74>)
 80003da:	2208      	movs	r2, #8
 80003dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003de:	4b0e      	ldr	r3, [pc, #56]	; (8000418 <MX_SPI1_Init+0x74>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <MX_SPI1_Init+0x74>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003ea:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <MX_SPI1_Init+0x74>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003f0:	4b09      	ldr	r3, [pc, #36]	; (8000418 <MX_SPI1_Init+0x74>)
 80003f2:	2207      	movs	r2, #7
 80003f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003f6:	4b08      	ldr	r3, [pc, #32]	; (8000418 <MX_SPI1_Init+0x74>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <MX_SPI1_Init+0x74>)
 80003fe:	2200      	movs	r2, #0
 8000400:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000402:	4b05      	ldr	r3, [pc, #20]	; (8000418 <MX_SPI1_Init+0x74>)
 8000404:	0018      	movs	r0, r3
 8000406:	f001 fcb9 	bl	8001d7c <HAL_SPI_Init>
 800040a:	1e03      	subs	r3, r0, #0
 800040c:	d001      	beq.n	8000412 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800040e:	f000 fae7 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	20000038 	.word	0x20000038
 800041c:	40013000 	.word	0x40013000

08000420 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b088      	sub	sp, #32
 8000424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000426:	2310      	movs	r3, #16
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	0018      	movs	r0, r3
 800042c:	2310      	movs	r3, #16
 800042e:	001a      	movs	r2, r3
 8000430:	2100      	movs	r1, #0
 8000432:	f003 fda2 	bl	8003f7a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000436:	2308      	movs	r3, #8
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	0018      	movs	r0, r3
 800043c:	2308      	movs	r3, #8
 800043e:	001a      	movs	r2, r3
 8000440:	2100      	movs	r1, #0
 8000442:	f003 fd9a 	bl	8003f7a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000446:	4b27      	ldr	r3, [pc, #156]	; (80004e4 <MX_TIM1_Init+0xc4>)
 8000448:	4a27      	ldr	r2, [pc, #156]	; (80004e8 <MX_TIM1_Init+0xc8>)
 800044a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2;
 800044c:	4b25      	ldr	r3, [pc, #148]	; (80004e4 <MX_TIM1_Init+0xc4>)
 800044e:	2202      	movs	r2, #2
 8000450:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000452:	4b24      	ldr	r3, [pc, #144]	; (80004e4 <MX_TIM1_Init+0xc4>)
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 12500-1;
 8000458:	4b22      	ldr	r3, [pc, #136]	; (80004e4 <MX_TIM1_Init+0xc4>)
 800045a:	4a24      	ldr	r2, [pc, #144]	; (80004ec <MX_TIM1_Init+0xcc>)
 800045c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800045e:	4b21      	ldr	r3, [pc, #132]	; (80004e4 <MX_TIM1_Init+0xc4>)
 8000460:	2200      	movs	r2, #0
 8000462:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000464:	4b1f      	ldr	r3, [pc, #124]	; (80004e4 <MX_TIM1_Init+0xc4>)
 8000466:	2200      	movs	r2, #0
 8000468:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800046a:	4b1e      	ldr	r3, [pc, #120]	; (80004e4 <MX_TIM1_Init+0xc4>)
 800046c:	2280      	movs	r2, #128	; 0x80
 800046e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000470:	4b1c      	ldr	r3, [pc, #112]	; (80004e4 <MX_TIM1_Init+0xc4>)
 8000472:	0018      	movs	r0, r3
 8000474:	f002 f892 	bl	800259c <HAL_TIM_Base_Init>
 8000478:	1e03      	subs	r3, r0, #0
 800047a:	d001      	beq.n	8000480 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
 800047c:	f000 fab0 	bl	80009e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000480:	2110      	movs	r1, #16
 8000482:	187b      	adds	r3, r7, r1
 8000484:	2280      	movs	r2, #128	; 0x80
 8000486:	0152      	lsls	r2, r2, #5
 8000488:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800048a:	187a      	adds	r2, r7, r1
 800048c:	4b15      	ldr	r3, [pc, #84]	; (80004e4 <MX_TIM1_Init+0xc4>)
 800048e:	0011      	movs	r1, r2
 8000490:	0018      	movs	r0, r3
 8000492:	f002 fa35 	bl	8002900 <HAL_TIM_ConfigClockSource>
 8000496:	1e03      	subs	r3, r0, #0
 8000498:	d001      	beq.n	800049e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800049a:	f000 faa1 	bl	80009e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800049e:	2108      	movs	r1, #8
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	2200      	movs	r2, #0
 80004aa:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004ac:	187a      	adds	r2, r7, r1
 80004ae:	4b0d      	ldr	r3, [pc, #52]	; (80004e4 <MX_TIM1_Init+0xc4>)
 80004b0:	0011      	movs	r1, r2
 80004b2:	0018      	movs	r0, r3
 80004b4:	f002 fc28 	bl	8002d08 <HAL_TIMEx_MasterConfigSynchronization>
 80004b8:	1e03      	subs	r3, r0, #0
 80004ba:	d001      	beq.n	80004c0 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 80004bc:	f000 fa90 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80004c0:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <MX_TIM1_Init+0xd0>)
 80004c2:	699a      	ldr	r2, [r3, #24]
 80004c4:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <MX_TIM1_Init+0xd0>)
 80004c6:	2180      	movs	r1, #128	; 0x80
 80004c8:	0109      	lsls	r1, r1, #4
 80004ca:	430a      	orrs	r2, r1
 80004cc:	619a      	str	r2, [r3, #24]
 80004ce:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <MX_TIM1_Init+0xd0>)
 80004d0:	699a      	ldr	r2, [r3, #24]
 80004d2:	2380      	movs	r3, #128	; 0x80
 80004d4:	011b      	lsls	r3, r3, #4
 80004d6:	4013      	ands	r3, r2
 80004d8:	607b      	str	r3, [r7, #4]
 80004da:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END TIM1_Init 2 */

}
 80004dc:	46c0      	nop			; (mov r8, r8)
 80004de:	46bd      	mov	sp, r7
 80004e0:	b008      	add	sp, #32
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	2000009c 	.word	0x2000009c
 80004e8:	40012c00 	.word	0x40012c00
 80004ec:	000030d3 	.word	0x000030d3
 80004f0:	40021000 	.word	0x40021000

080004f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
  __HAL_RCC_USART1_CLK_ENABLE();
 80004fa:	4b1c      	ldr	r3, [pc, #112]	; (800056c <MX_USART1_UART_Init+0x78>)
 80004fc:	699a      	ldr	r2, [r3, #24]
 80004fe:	4b1b      	ldr	r3, [pc, #108]	; (800056c <MX_USART1_UART_Init+0x78>)
 8000500:	2180      	movs	r1, #128	; 0x80
 8000502:	01c9      	lsls	r1, r1, #7
 8000504:	430a      	orrs	r2, r1
 8000506:	619a      	str	r2, [r3, #24]
 8000508:	4b18      	ldr	r3, [pc, #96]	; (800056c <MX_USART1_UART_Init+0x78>)
 800050a:	699a      	ldr	r2, [r3, #24]
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	01db      	lsls	r3, r3, #7
 8000510:	4013      	ands	r3, r2
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000516:	4b16      	ldr	r3, [pc, #88]	; (8000570 <MX_USART1_UART_Init+0x7c>)
 8000518:	4a16      	ldr	r2, [pc, #88]	; (8000574 <MX_USART1_UART_Init+0x80>)
 800051a:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 111731;
 800051c:	4b14      	ldr	r3, [pc, #80]	; (8000570 <MX_USART1_UART_Init+0x7c>)
 800051e:	4a16      	ldr	r2, [pc, #88]	; (8000578 <MX_USART1_UART_Init+0x84>)
 8000520:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000522:	4b13      	ldr	r3, [pc, #76]	; (8000570 <MX_USART1_UART_Init+0x7c>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000528:	4b11      	ldr	r3, [pc, #68]	; (8000570 <MX_USART1_UART_Init+0x7c>)
 800052a:	2200      	movs	r2, #0
 800052c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800052e:	4b10      	ldr	r3, [pc, #64]	; (8000570 <MX_USART1_UART_Init+0x7c>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8000534:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <MX_USART1_UART_Init+0x7c>)
 8000536:	2208      	movs	r2, #8
 8000538:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <MX_USART1_UART_Init+0x7c>)
 800053c:	2200      	movs	r2, #0
 800053e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8000540:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <MX_USART1_UART_Init+0x7c>)
 8000542:	2280      	movs	r2, #128	; 0x80
 8000544:	0212      	lsls	r2, r2, #8
 8000546:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000548:	4b09      	ldr	r3, [pc, #36]	; (8000570 <MX_USART1_UART_Init+0x7c>)
 800054a:	2200      	movs	r2, #0
 800054c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <MX_USART1_UART_Init+0x7c>)
 8000550:	2200      	movs	r2, #0
 8000552:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <MX_USART1_UART_Init+0x7c>)
 8000556:	0018      	movs	r0, r3
 8000558:	f002 fc3e 	bl	8002dd8 <HAL_UART_Init>
 800055c:	1e03      	subs	r3, r0, #0
 800055e:	d001      	beq.n	8000564 <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 8000560:	f000 fa3e 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000564:	46c0      	nop			; (mov r8, r8)
 8000566:	46bd      	mov	sp, r7
 8000568:	b002      	add	sp, #8
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40021000 	.word	0x40021000
 8000570:	200000e4 	.word	0x200000e4
 8000574:	40013800 	.word	0x40013800
 8000578:	0001b473 	.word	0x0001b473

0800057c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b089      	sub	sp, #36	; 0x24
 8000580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000582:	240c      	movs	r4, #12
 8000584:	193b      	adds	r3, r7, r4
 8000586:	0018      	movs	r0, r3
 8000588:	2314      	movs	r3, #20
 800058a:	001a      	movs	r2, r3
 800058c:	2100      	movs	r1, #0
 800058e:	f003 fcf4 	bl	8003f7a <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000592:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <MX_GPIO_Init+0x88>)
 8000594:	695a      	ldr	r2, [r3, #20]
 8000596:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <MX_GPIO_Init+0x88>)
 8000598:	2180      	movs	r1, #128	; 0x80
 800059a:	0289      	lsls	r1, r1, #10
 800059c:	430a      	orrs	r2, r1
 800059e:	615a      	str	r2, [r3, #20]
 80005a0:	4b18      	ldr	r3, [pc, #96]	; (8000604 <MX_GPIO_Init+0x88>)
 80005a2:	695a      	ldr	r2, [r3, #20]
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	029b      	lsls	r3, r3, #10
 80005a8:	4013      	ands	r3, r2
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ae:	4b15      	ldr	r3, [pc, #84]	; (8000604 <MX_GPIO_Init+0x88>)
 80005b0:	695a      	ldr	r2, [r3, #20]
 80005b2:	4b14      	ldr	r3, [pc, #80]	; (8000604 <MX_GPIO_Init+0x88>)
 80005b4:	2180      	movs	r1, #128	; 0x80
 80005b6:	0309      	lsls	r1, r1, #12
 80005b8:	430a      	orrs	r2, r1
 80005ba:	615a      	str	r2, [r3, #20]
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <MX_GPIO_Init+0x88>)
 80005be:	695a      	ldr	r2, [r3, #20]
 80005c0:	2380      	movs	r3, #128	; 0x80
 80005c2:	031b      	lsls	r3, r3, #12
 80005c4:	4013      	ands	r3, r2
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_SS_GPIO_Port, SPI1_SS_Pin, GPIO_PIN_SET);
 80005ca:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <MX_GPIO_Init+0x8c>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	2110      	movs	r1, #16
 80005d0:	0018      	movs	r0, r3
 80005d2:	f000 fe89 	bl	80012e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_SS_Pin */
  GPIO_InitStruct.Pin = SPI1_SS_Pin;
 80005d6:	0021      	movs	r1, r4
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2210      	movs	r2, #16
 80005dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2201      	movs	r2, #1
 80005e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	2201      	movs	r2, #1
 80005e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	2203      	movs	r2, #3
 80005ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_SS_GPIO_Port, &GPIO_InitStruct);
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	4a05      	ldr	r2, [pc, #20]	; (8000608 <MX_GPIO_Init+0x8c>)
 80005f4:	0019      	movs	r1, r3
 80005f6:	0010      	movs	r0, r2
 80005f8:	f000 fd06 	bl	8001008 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005fc:	46c0      	nop			; (mov r8, r8)
 80005fe:	46bd      	mov	sp, r7
 8000600:	b009      	add	sp, #36	; 0x24
 8000602:	bd90      	pop	{r4, r7, pc}
 8000604:	40021000 	.word	0x40021000
 8000608:	48000800 	.word	0x48000800

0800060c <setTxData>:

/* USER CODE BEGIN 4 */

/* Configuring the MOSI line bits */
uint8_t* setTxData(uint8_t* txData, bool* testMode, bool* out0, bool* out1, bool* out2)
  {
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
 8000618:	603b      	str	r3, [r7, #0]

    /* Test mode is the MSbit of the CW (second byte, last bit). If it is 0, mode is automatic. If 1, mode is manual. */
    if(*testMode)
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d008      	beq.n	8000634 <setTxData+0x28>
      txData[0] |= (1u << 7);
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2280      	movs	r2, #128	; 0x80
 8000628:	4252      	negs	r2, r2
 800062a:	4313      	orrs	r3, r2
 800062c:	b2da      	uxtb	r2, r3
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	701a      	strb	r2, [r3, #0]
 8000632:	e006      	b.n	8000642 <setTxData+0x36>
    else
      txData[0] &= ~(1u << 7);
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	227f      	movs	r2, #127	; 0x7f
 800063a:	4013      	ands	r3, r2
 800063c:	b2da      	uxtb	r2, r3
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	701a      	strb	r2, [r3, #0]

    /* Configuring commands for GPO pins */
    if(*out0)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d009      	beq.n	800065e <setTxData+0x52>
      txData[1] |= (1u << 0);
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	3301      	adds	r3, #1
 800064e:	781a      	ldrb	r2, [r3, #0]
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	3301      	adds	r3, #1
 8000654:	2101      	movs	r1, #1
 8000656:	430a      	orrs	r2, r1
 8000658:	b2d2      	uxtb	r2, r2
 800065a:	701a      	strb	r2, [r3, #0]
 800065c:	e008      	b.n	8000670 <setTxData+0x64>
    else
      txData[1] &= ~(1u << 0);
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	3301      	adds	r3, #1
 8000662:	781a      	ldrb	r2, [r3, #0]
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	3301      	adds	r3, #1
 8000668:	2101      	movs	r1, #1
 800066a:	438a      	bics	r2, r1
 800066c:	b2d2      	uxtb	r2, r2
 800066e:	701a      	strb	r2, [r3, #0]

    if(*out1)
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d009      	beq.n	800068c <setTxData+0x80>
      txData[1] |= (1u << 1);
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	781a      	ldrb	r2, [r3, #0]
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	3301      	adds	r3, #1
 8000682:	2102      	movs	r1, #2
 8000684:	430a      	orrs	r2, r1
 8000686:	b2d2      	uxtb	r2, r2
 8000688:	701a      	strb	r2, [r3, #0]
 800068a:	e008      	b.n	800069e <setTxData+0x92>
    else
      txData[1] &= ~(1u << 1);
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	3301      	adds	r3, #1
 8000690:	781a      	ldrb	r2, [r3, #0]
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	3301      	adds	r3, #1
 8000696:	2102      	movs	r1, #2
 8000698:	438a      	bics	r2, r1
 800069a:	b2d2      	uxtb	r2, r2
 800069c:	701a      	strb	r2, [r3, #0]

    if(*out2)
 800069e:	69bb      	ldr	r3, [r7, #24]
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d009      	beq.n	80006ba <setTxData+0xae>
      txData[1] |= (1u << 2);
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	3301      	adds	r3, #1
 80006aa:	781a      	ldrb	r2, [r3, #0]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	3301      	adds	r3, #1
 80006b0:	2104      	movs	r1, #4
 80006b2:	430a      	orrs	r2, r1
 80006b4:	b2d2      	uxtb	r2, r2
 80006b6:	701a      	strb	r2, [r3, #0]
 80006b8:	e008      	b.n	80006cc <setTxData+0xc0>
    else
      txData[1] &= ~(1u << 2);
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	3301      	adds	r3, #1
 80006be:	781a      	ldrb	r2, [r3, #0]
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	3301      	adds	r3, #1
 80006c4:	2104      	movs	r1, #4
 80006c6:	438a      	bics	r2, r1
 80006c8:	b2d2      	uxtb	r2, r2
 80006ca:	701a      	strb	r2, [r3, #0]

    return txData;
 80006cc:	68fb      	ldr	r3, [r7, #12]
   }
 80006ce:	0018      	movs	r0, r3
 80006d0:	46bd      	mov	sp, r7
 80006d2:	b004      	add	sp, #16
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <readADC>:


/* Reading the ADC data from the MISO line, by byte pairs */
uint16_t* readADC(uint16_t* adcData)
  {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
     for(int i = 1; i <= adcWords; i++)
 80006e0:	2301      	movs	r3, #1
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	e01d      	b.n	8000722 <readADC+0x4a>
         adcData[i-1] = (uint16_t)( (uint16_t)(rxData[2*i] & 0x0F) << 8 | rxData[2*i+1] );
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	4a12      	ldr	r2, [pc, #72]	; (8000734 <readADC+0x5c>)
 80006ec:	5cd3      	ldrb	r3, [r2, r3]
 80006ee:	021b      	lsls	r3, r3, #8
 80006f0:	b21a      	sxth	r2, r3
 80006f2:	23f0      	movs	r3, #240	; 0xf0
 80006f4:	011b      	lsls	r3, r3, #4
 80006f6:	4013      	ands	r3, r2
 80006f8:	b21a      	sxth	r2, r3
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	3301      	adds	r3, #1
 8000700:	490c      	ldr	r1, [pc, #48]	; (8000734 <readADC+0x5c>)
 8000702:	5ccb      	ldrb	r3, [r1, r3]
 8000704:	b21b      	sxth	r3, r3
 8000706:	4313      	orrs	r3, r2
 8000708:	b219      	sxth	r1, r3
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <readADC+0x60>)
 800070e:	4694      	mov	ip, r2
 8000710:	4463      	add	r3, ip
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	18d3      	adds	r3, r2, r3
 8000718:	b28a      	uxth	r2, r1
 800071a:	801a      	strh	r2, [r3, #0]
     for(int i = 1; i <= adcWords; i++)
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	3301      	adds	r3, #1
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	2b06      	cmp	r3, #6
 8000726:	ddde      	ble.n	80006e6 <readADC+0xe>

     return adcData;
 8000728:	687b      	ldr	r3, [r7, #4]
  }
 800072a:	0018      	movs	r0, r3
 800072c:	46bd      	mov	sp, r7
 800072e:	b004      	add	sp, #16
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	20000180 	.word	0x20000180
 8000738:	7fffffff 	.word	0x7fffffff

0800073c <handleReceivedData>:

/* Handling received data */
void handleReceivedData (uint8_t* rxData, uint16_t* adcData)
  {
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
      /* OBTAINING THE ENTIRE STATUS WORD */
      memcpy(misoData, rxData, spiSize);
 8000746:	4a08      	ldr	r2, [pc, #32]	; (8000768 <handleReceivedData+0x2c>)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	0010      	movs	r0, r2
 800074c:	0019      	movs	r1, r3
 800074e:	2312      	movs	r3, #18
 8000750:	001a      	movs	r2, r3
 8000752:	f003 fc09 	bl	8003f68 <memcpy>

      /* Obtaining the latest ADC data */
      readADC(adcData);
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	0018      	movs	r0, r3
 800075a:	f7ff ffbd 	bl	80006d8 <readADC>
  }
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	b002      	add	sp, #8
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	20000194 	.word	0x20000194

0800076c <uint16_to_char_array>:

/* Converting data to char arrays, to print via UART */
char* uint16_to_char_array(uint16_t adcData, char* uartBuf, size_t bufSize)
  {
 800076c:	b590      	push	{r4, r7, lr}
 800076e:	b087      	sub	sp, #28
 8000770:	af00      	add	r7, sp, #0
 8000772:	60b9      	str	r1, [r7, #8]
 8000774:	607a      	str	r2, [r7, #4]
 8000776:	210e      	movs	r1, #14
 8000778:	187b      	adds	r3, r7, r1
 800077a:	1c02      	adds	r2, r0, #0
 800077c:	801a      	strh	r2, [r3, #0]
     int i = bufSize - 1;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	3b01      	subs	r3, #1
 8000782:	617b      	str	r3, [r7, #20]
	 uartBuf[i] = '\0';  /* Null-terminate the buffer */
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	68ba      	ldr	r2, [r7, #8]
 8000788:	18d3      	adds	r3, r2, r3
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]

	 if (adcData == 0)
 800078e:	187b      	adds	r3, r7, r1
 8000790:	881b      	ldrh	r3, [r3, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d125      	bne.n	80007e2 <uint16_to_char_array+0x76>
		 uartBuf[--i] = '0';
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	3b01      	subs	r3, #1
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	68ba      	ldr	r2, [r7, #8]
 80007a0:	18d3      	adds	r3, r2, r3
 80007a2:	2230      	movs	r2, #48	; 0x30
 80007a4:	701a      	strb	r2, [r3, #0]
 80007a6:	e024      	b.n	80007f2 <uint16_to_char_array+0x86>
	 else
		 while (adcData != 0 && i >= 0)
		     {
			    uartBuf[--i] = '0' + (adcData % 10);
 80007a8:	240e      	movs	r4, #14
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	210a      	movs	r1, #10
 80007b0:	0018      	movs	r0, r3
 80007b2:	f7ff fd2f 	bl	8000214 <__aeabi_uidivmod>
 80007b6:	000b      	movs	r3, r1
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	3b01      	subs	r3, #1
 80007c0:	617b      	str	r3, [r7, #20]
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	68b9      	ldr	r1, [r7, #8]
 80007c6:	18cb      	adds	r3, r1, r3
 80007c8:	3230      	adds	r2, #48	; 0x30
 80007ca:	b2d2      	uxtb	r2, r2
 80007cc:	701a      	strb	r2, [r3, #0]
				adcData /= 10;
 80007ce:	0023      	movs	r3, r4
 80007d0:	18fc      	adds	r4, r7, r3
 80007d2:	18fb      	adds	r3, r7, r3
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	210a      	movs	r1, #10
 80007d8:	0018      	movs	r0, r3
 80007da:	f7ff fc95 	bl	8000108 <__udivsi3>
 80007de:	0003      	movs	r3, r0
 80007e0:	8023      	strh	r3, [r4, #0]
		 while (adcData != 0 && i >= 0)
 80007e2:	230e      	movs	r3, #14
 80007e4:	18fb      	adds	r3, r7, r3
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d002      	beq.n	80007f2 <uint16_to_char_array+0x86>
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	dada      	bge.n	80007a8 <uint16_to_char_array+0x3c>
		      }

	 return uartBuf;
 80007f2:	68bb      	ldr	r3, [r7, #8]
   }
 80007f4:	0018      	movs	r0, r3
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b007      	add	sp, #28
 80007fa:	bd90      	pop	{r4, r7, pc}

080007fc <uartPrint>:

/* Printing data to UART */
void uartPrint(uint16_t* adcData, char(*uartBuf)[uartChars])
  {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
	    /* Convert the status word (1st 2 bytes of MISO data to characters, '1' or '0') */
	    int k = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
	    for(int i = 0; i < 2; i++)
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	e01e      	b.n	800084e <uartPrint+0x52>
	    for(int j = 7; j >= 0; j--)
 8000810:	2307      	movs	r3, #7
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	e015      	b.n	8000842 <uartPrint+0x46>
	       statusWord[k++] = (misoData[i] & (1u << j))?'1':'0';
 8000816:	4a3b      	ldr	r2, [pc, #236]	; (8000904 <uartPrint+0x108>)
 8000818:	693b      	ldr	r3, [r7, #16]
 800081a:	18d3      	adds	r3, r2, r3
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	001a      	movs	r2, r3
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	40da      	lsrs	r2, r3
 8000824:	0013      	movs	r3, r2
 8000826:	2201      	movs	r2, #1
 8000828:	4013      	ands	r3, r2
 800082a:	d001      	beq.n	8000830 <uartPrint+0x34>
 800082c:	2131      	movs	r1, #49	; 0x31
 800082e:	e000      	b.n	8000832 <uartPrint+0x36>
 8000830:	2130      	movs	r1, #48	; 0x30
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	1c5a      	adds	r2, r3, #1
 8000836:	617a      	str	r2, [r7, #20]
 8000838:	4a33      	ldr	r2, [pc, #204]	; (8000908 <uartPrint+0x10c>)
 800083a:	54d1      	strb	r1, [r2, r3]
	    for(int j = 7; j >= 0; j--)
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	3b01      	subs	r3, #1
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	2b00      	cmp	r3, #0
 8000846:	dae6      	bge.n	8000816 <uartPrint+0x1a>
	    for(int i = 0; i < 2; i++)
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	3301      	adds	r3, #1
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	2b01      	cmp	r3, #1
 8000852:	dddd      	ble.n	8000810 <uartPrint+0x14>

	    HAL_UART_Transmit(&huart1, (uint8_t *)"\r\n", 2, 50); /* Print a blank line */
 8000854:	492d      	ldr	r1, [pc, #180]	; (800090c <uartPrint+0x110>)
 8000856:	482e      	ldr	r0, [pc, #184]	; (8000910 <uartPrint+0x114>)
 8000858:	2332      	movs	r3, #50	; 0x32
 800085a:	2202      	movs	r2, #2
 800085c:	f002 fb10 	bl	8002e80 <HAL_UART_Transmit>

        /* Print the status word */
	    HAL_UART_Transmit(&huart1, (uint8_t *)"Status word: \r\n", 15, 50);
 8000860:	492c      	ldr	r1, [pc, #176]	; (8000914 <uartPrint+0x118>)
 8000862:	482b      	ldr	r0, [pc, #172]	; (8000910 <uartPrint+0x114>)
 8000864:	2332      	movs	r3, #50	; 0x32
 8000866:	220f      	movs	r2, #15
 8000868:	f002 fb0a 	bl	8002e80 <HAL_UART_Transmit>
	    HAL_UART_Transmit(&huart1, (uint8_t *)statusWord, 16, 50);
 800086c:	4926      	ldr	r1, [pc, #152]	; (8000908 <uartPrint+0x10c>)
 800086e:	4828      	ldr	r0, [pc, #160]	; (8000910 <uartPrint+0x114>)
 8000870:	2332      	movs	r3, #50	; 0x32
 8000872:	2210      	movs	r2, #16
 8000874:	f002 fb04 	bl	8002e80 <HAL_UART_Transmit>
	    HAL_UART_Transmit(&huart1, (uint8_t *)"\r\n", 2, 50);
 8000878:	4924      	ldr	r1, [pc, #144]	; (800090c <uartPrint+0x110>)
 800087a:	4825      	ldr	r0, [pc, #148]	; (8000910 <uartPrint+0x114>)
 800087c:	2332      	movs	r3, #50	; 0x32
 800087e:	2202      	movs	r2, #2
 8000880:	f002 fafe 	bl	8002e80 <HAL_UART_Transmit>

		/* Print ADC data: */
		for(int j = 0; j < adcWords; j++)
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	e02e      	b.n	80008e8 <uartPrint+0xec>
		   {
			  if(j == 0)
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d105      	bne.n	800089c <uartPrint+0xa0>
			    HAL_UART_Transmit(&huart1, (uint8_t *)"ADC data: \r\n", 12, 50);
 8000890:	4921      	ldr	r1, [pc, #132]	; (8000918 <uartPrint+0x11c>)
 8000892:	481f      	ldr	r0, [pc, #124]	; (8000910 <uartPrint+0x114>)
 8000894:	2332      	movs	r3, #50	; 0x32
 8000896:	220c      	movs	r2, #12
 8000898:	f002 faf2 	bl	8002e80 <HAL_UART_Transmit>

			  uint16_to_char_array(adcDataCpy[j], uartBuf[j], sizeof(uartBuf[j])); /* Currently the dummy buffer, adcDataCpy is used */
 800089c:	4b1f      	ldr	r3, [pc, #124]	; (800091c <uartPrint+0x120>)
 800089e:	68ba      	ldr	r2, [r7, #8]
 80008a0:	0052      	lsls	r2, r2, #1
 80008a2:	5ad0      	ldrh	r0, [r2, r3]
 80008a4:	68ba      	ldr	r2, [r7, #8]
 80008a6:	0013      	movs	r3, r2
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	189b      	adds	r3, r3, r2
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	001a      	movs	r2, r3
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	189b      	adds	r3, r3, r2
 80008b4:	2206      	movs	r2, #6
 80008b6:	0019      	movs	r1, r3
 80008b8:	f7ff ff58 	bl	800076c <uint16_to_char_array>
			  HAL_UART_Transmit(&huart1, (uint8_t *)uartBuf[j], sizeof(uartBuf[j]), 50);
 80008bc:	68ba      	ldr	r2, [r7, #8]
 80008be:	0013      	movs	r3, r2
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	189b      	adds	r3, r3, r2
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	001a      	movs	r2, r3
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	1899      	adds	r1, r3, r2
 80008cc:	4810      	ldr	r0, [pc, #64]	; (8000910 <uartPrint+0x114>)
 80008ce:	2332      	movs	r3, #50	; 0x32
 80008d0:	2206      	movs	r2, #6
 80008d2:	f002 fad5 	bl	8002e80 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, (uint8_t *)"\r\n", 2, 50);
 80008d6:	490d      	ldr	r1, [pc, #52]	; (800090c <uartPrint+0x110>)
 80008d8:	480d      	ldr	r0, [pc, #52]	; (8000910 <uartPrint+0x114>)
 80008da:	2332      	movs	r3, #50	; 0x32
 80008dc:	2202      	movs	r2, #2
 80008de:	f002 facf 	bl	8002e80 <HAL_UART_Transmit>
		for(int j = 0; j < adcWords; j++)
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	3301      	adds	r3, #1
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	2b05      	cmp	r3, #5
 80008ec:	ddcd      	ble.n	800088a <uartPrint+0x8e>
			}

		/* New blank line */
		HAL_UART_Transmit_IT(&huart1, (uint8_t *)"\r\n", 2);
 80008ee:	4907      	ldr	r1, [pc, #28]	; (800090c <uartPrint+0x110>)
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <uartPrint+0x114>)
 80008f2:	2202      	movs	r2, #2
 80008f4:	0018      	movs	r0, r3
 80008f6:	f002 fb63 	bl	8002fc0 <HAL_UART_Transmit_IT>
  }
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b006      	add	sp, #24
 8000900:	bd80      	pop	{r7, pc}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	20000194 	.word	0x20000194
 8000908:	200001ec 	.word	0x200001ec
 800090c:	08003fa4 	.word	0x08003fa4
 8000910:	200000e4 	.word	0x200000e4
 8000914:	08003fa8 	.word	0x08003fa8
 8000918:	08003fb8 	.word	0x08003fb8
 800091c:	20000004 	.word	0x20000004

08000920 <HAL_UART_TxCpltCallback>:

/* UART transmit interrupt callback function */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
   if (huart == &huart1)
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_UART_TxCpltCallback+0x24>)
 800092c:	429a      	cmp	r2, r3
 800092e:	d105      	bne.n	800093c <HAL_UART_TxCpltCallback+0x1c>
    {
      uartPrint(adcDataCpy, uartBuf);
 8000930:	4a05      	ldr	r2, [pc, #20]	; (8000948 <HAL_UART_TxCpltCallback+0x28>)
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <HAL_UART_TxCpltCallback+0x2c>)
 8000934:	0011      	movs	r1, r2
 8000936:	0018      	movs	r0, r3
 8000938:	f7ff ff60 	bl	80007fc <uartPrint>
    }
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	b002      	add	sp, #8
 8000942:	bd80      	pop	{r7, pc}
 8000944:	200000e4 	.word	0x200000e4
 8000948:	200001b4 	.word	0x200001b4
 800094c:	20000004 	.word	0x20000004

08000950 <HAL_TIM_PeriodElapsedCallback>:

/* 31.25us timer callback function, for SPI communication */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af02      	add	r7, sp, #8
 8000956:	6078      	str	r0, [r7, #4]
	/* Timer 1 elapsed */
    if (htim->Instance == TIM1)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a18      	ldr	r2, [pc, #96]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d11d      	bne.n	800099e <HAL_TIM_PeriodElapsedCallback+0x4e>
        {
    	   currentTime = TIM1->CNT; /* Benchmarking, value represents the current number of timer ticks */
 8000962:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000964:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000968:	601a      	str	r2, [r3, #0]

			 HAL_GPIO_WritePin(SPI1_SS_GPIO_Port, SPI1_SS_Pin, GPIO_PIN_RESET);        /* Pull SS pin LOW */
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800096c:	2200      	movs	r2, #0
 800096e:	2110      	movs	r1, #16
 8000970:	0018      	movs	r0, r3
 8000972:	f000 fcb9 	bl	80012e8 <HAL_GPIO_WritePin>

			 HAL_SPI_TransmitReceive(&hspi1, txData, rxData, spiSize, 100);            /* Transmit and receive (FULL-DUPLEX) */
 8000976:	4a15      	ldr	r2, [pc, #84]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000978:	4915      	ldr	r1, [pc, #84]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800097a:	4816      	ldr	r0, [pc, #88]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800097c:	2364      	movs	r3, #100	; 0x64
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	2312      	movs	r3, #18
 8000982:	f001 fab3 	bl	8001eec <HAL_SPI_TransmitReceive>

			 HAL_GPIO_WritePin(SPI1_SS_GPIO_Port, SPI1_SS_Pin, GPIO_PIN_SET);          /* Pull SS pin HIGH */
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000988:	2201      	movs	r2, #1
 800098a:	2110      	movs	r1, #16
 800098c:	0018      	movs	r0, r3
 800098e:	f000 fcab 	bl	80012e8 <HAL_GPIO_WritePin>

			 /* Handle received data */
			 handleReceivedData(rxData, adcData);
 8000992:	4a11      	ldr	r2, [pc, #68]	; (80009d8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000994:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000996:	0011      	movs	r1, r2
 8000998:	0018      	movs	r0, r3
 800099a:	f7ff fecf 	bl	800073c <handleReceivedData>

         }
             elapsedTime = abs((int)(TIM1->CNT)-(int)currentTime); /* Elapsed time for TIM1 callback, in ticks */
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80009a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a2:	001a      	movs	r2, r3
 80009a4:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	17da      	asrs	r2, r3, #31
 80009ac:	189b      	adds	r3, r3, r2
 80009ae:	4053      	eors	r3, r2
 80009b0:	001a      	movs	r2, r3
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80009b4:	601a      	str	r2, [r3, #0]
}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b002      	add	sp, #8
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	40012c00 	.word	0x40012c00
 80009c4:	200001fc 	.word	0x200001fc
 80009c8:	48000800 	.word	0x48000800
 80009cc:	20000180 	.word	0x20000180
 80009d0:	2000016c 	.word	0x2000016c
 80009d4:	20000038 	.word	0x20000038
 80009d8:	200001a8 	.word	0x200001a8
 80009dc:	20000200 	.word	0x20000200

080009e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
}
 80009e6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <Error_Handler+0x8>
	...

080009ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f2:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <HAL_MspInit+0x44>)
 80009f4:	699a      	ldr	r2, [r3, #24]
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <HAL_MspInit+0x44>)
 80009f8:	2101      	movs	r1, #1
 80009fa:	430a      	orrs	r2, r1
 80009fc:	619a      	str	r2, [r3, #24]
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <HAL_MspInit+0x44>)
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	2201      	movs	r2, #1
 8000a04:	4013      	ands	r3, r2
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <HAL_MspInit+0x44>)
 8000a0c:	69da      	ldr	r2, [r3, #28]
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <HAL_MspInit+0x44>)
 8000a10:	2180      	movs	r1, #128	; 0x80
 8000a12:	0549      	lsls	r1, r1, #21
 8000a14:	430a      	orrs	r2, r1
 8000a16:	61da      	str	r2, [r3, #28]
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <HAL_MspInit+0x44>)
 8000a1a:	69da      	ldr	r2, [r3, #28]
 8000a1c:	2380      	movs	r3, #128	; 0x80
 8000a1e:	055b      	lsls	r3, r3, #21
 8000a20:	4013      	ands	r3, r2
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	b002      	add	sp, #8
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	40021000 	.word	0x40021000

08000a34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a34:	b590      	push	{r4, r7, lr}
 8000a36:	b08b      	sub	sp, #44	; 0x2c
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	2414      	movs	r4, #20
 8000a3e:	193b      	adds	r3, r7, r4
 8000a40:	0018      	movs	r0, r3
 8000a42:	2314      	movs	r3, #20
 8000a44:	001a      	movs	r2, r3
 8000a46:	2100      	movs	r1, #0
 8000a48:	f003 fa97 	bl	8003f7a <memset>
  if(hspi->Instance==SPI1)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a1c      	ldr	r2, [pc, #112]	; (8000ac4 <HAL_SPI_MspInit+0x90>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d132      	bne.n	8000abc <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a56:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <HAL_SPI_MspInit+0x94>)
 8000a58:	699a      	ldr	r2, [r3, #24]
 8000a5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <HAL_SPI_MspInit+0x94>)
 8000a5c:	2180      	movs	r1, #128	; 0x80
 8000a5e:	0149      	lsls	r1, r1, #5
 8000a60:	430a      	orrs	r2, r1
 8000a62:	619a      	str	r2, [r3, #24]
 8000a64:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <HAL_SPI_MspInit+0x94>)
 8000a66:	699a      	ldr	r2, [r3, #24]
 8000a68:	2380      	movs	r3, #128	; 0x80
 8000a6a:	015b      	lsls	r3, r3, #5
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <HAL_SPI_MspInit+0x94>)
 8000a74:	695a      	ldr	r2, [r3, #20]
 8000a76:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <HAL_SPI_MspInit+0x94>)
 8000a78:	2180      	movs	r1, #128	; 0x80
 8000a7a:	0289      	lsls	r1, r1, #10
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	615a      	str	r2, [r3, #20]
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <HAL_SPI_MspInit+0x94>)
 8000a82:	695a      	ldr	r2, [r3, #20]
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	029b      	lsls	r3, r3, #10
 8000a88:	4013      	ands	r3, r2
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a8e:	0021      	movs	r1, r4
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	22e0      	movs	r2, #224	; 0xe0
 8000a94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2202      	movs	r2, #2
 8000a9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	2203      	movs	r2, #3
 8000aa6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	187a      	adds	r2, r7, r1
 8000ab0:	2390      	movs	r3, #144	; 0x90
 8000ab2:	05db      	lsls	r3, r3, #23
 8000ab4:	0011      	movs	r1, r2
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f000 faa6 	bl	8001008 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000abc:	46c0      	nop			; (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b00b      	add	sp, #44	; 0x2c
 8000ac2:	bd90      	pop	{r4, r7, pc}
 8000ac4:	40013000 	.word	0x40013000
 8000ac8:	40021000 	.word	0x40021000

08000acc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0e      	ldr	r2, [pc, #56]	; (8000b14 <HAL_TIM_Base_MspInit+0x48>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d115      	bne.n	8000b0a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <HAL_TIM_Base_MspInit+0x4c>)
 8000ae0:	699a      	ldr	r2, [r3, #24]
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <HAL_TIM_Base_MspInit+0x4c>)
 8000ae4:	2180      	movs	r1, #128	; 0x80
 8000ae6:	0109      	lsls	r1, r1, #4
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	619a      	str	r2, [r3, #24]
 8000aec:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <HAL_TIM_Base_MspInit+0x4c>)
 8000aee:	699a      	ldr	r2, [r3, #24]
 8000af0:	2380      	movs	r3, #128	; 0x80
 8000af2:	011b      	lsls	r3, r3, #4
 8000af4:	4013      	ands	r3, r2
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	200d      	movs	r0, #13
 8000b00:	f000 f9d2 	bl	8000ea8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000b04:	200d      	movs	r0, #13
 8000b06:	f000 f9e4 	bl	8000ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b004      	add	sp, #16
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	40012c00 	.word	0x40012c00
 8000b18:	40021000 	.word	0x40021000

08000b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b1c:	b590      	push	{r4, r7, lr}
 8000b1e:	b08b      	sub	sp, #44	; 0x2c
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	2414      	movs	r4, #20
 8000b26:	193b      	adds	r3, r7, r4
 8000b28:	0018      	movs	r0, r3
 8000b2a:	2314      	movs	r3, #20
 8000b2c:	001a      	movs	r2, r3
 8000b2e:	2100      	movs	r1, #0
 8000b30:	f003 fa23 	bl	8003f7a <memset>
  if(huart->Instance==USART1)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a21      	ldr	r2, [pc, #132]	; (8000bc0 <HAL_UART_MspInit+0xa4>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d13b      	bne.n	8000bb6 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b3e:	4b21      	ldr	r3, [pc, #132]	; (8000bc4 <HAL_UART_MspInit+0xa8>)
 8000b40:	699a      	ldr	r2, [r3, #24]
 8000b42:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <HAL_UART_MspInit+0xa8>)
 8000b44:	2180      	movs	r1, #128	; 0x80
 8000b46:	01c9      	lsls	r1, r1, #7
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	619a      	str	r2, [r3, #24]
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <HAL_UART_MspInit+0xa8>)
 8000b4e:	699a      	ldr	r2, [r3, #24]
 8000b50:	2380      	movs	r3, #128	; 0x80
 8000b52:	01db      	lsls	r3, r3, #7
 8000b54:	4013      	ands	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <HAL_UART_MspInit+0xa8>)
 8000b5c:	695a      	ldr	r2, [r3, #20]
 8000b5e:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <HAL_UART_MspInit+0xa8>)
 8000b60:	2180      	movs	r1, #128	; 0x80
 8000b62:	0289      	lsls	r1, r1, #10
 8000b64:	430a      	orrs	r2, r1
 8000b66:	615a      	str	r2, [r3, #20]
 8000b68:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <HAL_UART_MspInit+0xa8>)
 8000b6a:	695a      	ldr	r2, [r3, #20]
 8000b6c:	2380      	movs	r3, #128	; 0x80
 8000b6e:	029b      	lsls	r3, r3, #10
 8000b70:	4013      	ands	r3, r2
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b76:	193b      	adds	r3, r7, r4
 8000b78:	22c0      	movs	r2, #192	; 0xc0
 8000b7a:	00d2      	lsls	r2, r2, #3
 8000b7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	0021      	movs	r1, r4
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	2202      	movs	r2, #2
 8000b84:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	2203      	movs	r2, #3
 8000b90:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	2201      	movs	r2, #1
 8000b96:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b98:	187a      	adds	r2, r7, r1
 8000b9a:	2390      	movs	r3, #144	; 0x90
 8000b9c:	05db      	lsls	r3, r3, #23
 8000b9e:	0011      	movs	r1, r2
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f000 fa31 	bl	8001008 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2100      	movs	r1, #0
 8000baa:	201b      	movs	r0, #27
 8000bac:	f000 f97c 	bl	8000ea8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bb0:	201b      	movs	r0, #27
 8000bb2:	f000 f98e 	bl	8000ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b00b      	add	sp, #44	; 0x2c
 8000bbc:	bd90      	pop	{r4, r7, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	40013800 	.word	0x40013800
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <NMI_Handler+0x4>

08000bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <HardFault_Handler+0x4>

08000bd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bd8:	46c0      	nop			; (mov r8, r8)
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bec:	f000 f894 	bl	8000d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bfc:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f001 fd68 	bl	80026d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	2000009c 	.word	0x2000009c

08000c10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <USART1_IRQHandler+0x14>)
 8000c16:	0018      	movs	r0, r3
 8000c18:	f002 fa42 	bl	80030a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	200000e4 	.word	0x200000e4

08000c28 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c34:	480d      	ldr	r0, [pc, #52]	; (8000c6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c36:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c38:	f7ff fff6 	bl	8000c28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c3c:	480c      	ldr	r0, [pc, #48]	; (8000c70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c3e:	490d      	ldr	r1, [pc, #52]	; (8000c74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c40:	4a0d      	ldr	r2, [pc, #52]	; (8000c78 <LoopForever+0xe>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c44:	e002      	b.n	8000c4c <LoopCopyDataInit>

08000c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4a:	3304      	adds	r3, #4

08000c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c50:	d3f9      	bcc.n	8000c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c52:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c54:	4c0a      	ldr	r4, [pc, #40]	; (8000c80 <LoopForever+0x16>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c58:	e001      	b.n	8000c5e <LoopFillZerobss>

08000c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c5c:	3204      	adds	r2, #4

08000c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c60:	d3fb      	bcc.n	8000c5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c62:	f003 f95d 	bl	8003f20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c66:	f7ff fadb 	bl	8000220 <main>

08000c6a <LoopForever>:

LoopForever:
    b LoopForever
 8000c6a:	e7fe      	b.n	8000c6a <LoopForever>
  ldr   r0, =_estack
 8000c6c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c74:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000c78:	08004008 	.word	0x08004008
  ldr r2, =_sbss
 8000c7c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000c80:	20000208 	.word	0x20000208

08000c84 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c84:	e7fe      	b.n	8000c84 <ADC1_IRQHandler>
	...

08000c88 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c8c:	4b07      	ldr	r3, [pc, #28]	; (8000cac <HAL_Init+0x24>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_Init+0x24>)
 8000c92:	2110      	movs	r1, #16
 8000c94:	430a      	orrs	r2, r1
 8000c96:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000c98:	2003      	movs	r0, #3
 8000c9a:	f000 f809 	bl	8000cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c9e:	f7ff fea5 	bl	80009ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca2:	2300      	movs	r3, #0
}
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	40022000 	.word	0x40022000

08000cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb0:	b590      	push	{r4, r7, lr}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb8:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <HAL_InitTick+0x5c>)
 8000cba:	681c      	ldr	r4, [r3, #0]
 8000cbc:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <HAL_InitTick+0x60>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	0019      	movs	r1, r3
 8000cc2:	23fa      	movs	r3, #250	; 0xfa
 8000cc4:	0098      	lsls	r0, r3, #2
 8000cc6:	f7ff fa1f 	bl	8000108 <__udivsi3>
 8000cca:	0003      	movs	r3, r0
 8000ccc:	0019      	movs	r1, r3
 8000cce:	0020      	movs	r0, r4
 8000cd0:	f7ff fa1a 	bl	8000108 <__udivsi3>
 8000cd4:	0003      	movs	r3, r0
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f000 f90b 	bl	8000ef2 <HAL_SYSTICK_Config>
 8000cdc:	1e03      	subs	r3, r0, #0
 8000cde:	d001      	beq.n	8000ce4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e00f      	b.n	8000d04 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b03      	cmp	r3, #3
 8000ce8:	d80b      	bhi.n	8000d02 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	2301      	movs	r3, #1
 8000cee:	425b      	negs	r3, r3
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f000 f8d8 	bl	8000ea8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_InitTick+0x64>)
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e000      	b.n	8000d04 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	0018      	movs	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	b003      	add	sp, #12
 8000d0a:	bd90      	pop	{r4, r7, pc}
 8000d0c:	20000010 	.word	0x20000010
 8000d10:	20000018 	.word	0x20000018
 8000d14:	20000014 	.word	0x20000014

08000d18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <HAL_IncTick+0x1c>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	001a      	movs	r2, r3
 8000d22:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <HAL_IncTick+0x20>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	18d2      	adds	r2, r2, r3
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <HAL_IncTick+0x20>)
 8000d2a:	601a      	str	r2, [r3, #0]
}
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	20000018 	.word	0x20000018
 8000d38:	20000204 	.word	0x20000204

08000d3c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d40:	4b02      	ldr	r3, [pc, #8]	; (8000d4c <HAL_GetTick+0x10>)
 8000d42:	681b      	ldr	r3, [r3, #0]
}
 8000d44:	0018      	movs	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	20000204 	.word	0x20000204

08000d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	0002      	movs	r2, r0
 8000d58:	1dfb      	adds	r3, r7, #7
 8000d5a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d5c:	1dfb      	adds	r3, r7, #7
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b7f      	cmp	r3, #127	; 0x7f
 8000d62:	d809      	bhi.n	8000d78 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d64:	1dfb      	adds	r3, r7, #7
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	001a      	movs	r2, r3
 8000d6a:	231f      	movs	r3, #31
 8000d6c:	401a      	ands	r2, r3
 8000d6e:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <__NVIC_EnableIRQ+0x30>)
 8000d70:	2101      	movs	r1, #1
 8000d72:	4091      	lsls	r1, r2
 8000d74:	000a      	movs	r2, r1
 8000d76:	601a      	str	r2, [r3, #0]
  }
}
 8000d78:	46c0      	nop			; (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	b002      	add	sp, #8
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	e000e100 	.word	0xe000e100

08000d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	0002      	movs	r2, r0
 8000d8c:	6039      	str	r1, [r7, #0]
 8000d8e:	1dfb      	adds	r3, r7, #7
 8000d90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d92:	1dfb      	adds	r3, r7, #7
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b7f      	cmp	r3, #127	; 0x7f
 8000d98:	d828      	bhi.n	8000dec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d9a:	4a2f      	ldr	r2, [pc, #188]	; (8000e58 <__NVIC_SetPriority+0xd4>)
 8000d9c:	1dfb      	adds	r3, r7, #7
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b25b      	sxtb	r3, r3
 8000da2:	089b      	lsrs	r3, r3, #2
 8000da4:	33c0      	adds	r3, #192	; 0xc0
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	589b      	ldr	r3, [r3, r2]
 8000daa:	1dfa      	adds	r2, r7, #7
 8000dac:	7812      	ldrb	r2, [r2, #0]
 8000dae:	0011      	movs	r1, r2
 8000db0:	2203      	movs	r2, #3
 8000db2:	400a      	ands	r2, r1
 8000db4:	00d2      	lsls	r2, r2, #3
 8000db6:	21ff      	movs	r1, #255	; 0xff
 8000db8:	4091      	lsls	r1, r2
 8000dba:	000a      	movs	r2, r1
 8000dbc:	43d2      	mvns	r2, r2
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	019b      	lsls	r3, r3, #6
 8000dc6:	22ff      	movs	r2, #255	; 0xff
 8000dc8:	401a      	ands	r2, r3
 8000dca:	1dfb      	adds	r3, r7, #7
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	0018      	movs	r0, r3
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	4003      	ands	r3, r0
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dd8:	481f      	ldr	r0, [pc, #124]	; (8000e58 <__NVIC_SetPriority+0xd4>)
 8000dda:	1dfb      	adds	r3, r7, #7
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b25b      	sxtb	r3, r3
 8000de0:	089b      	lsrs	r3, r3, #2
 8000de2:	430a      	orrs	r2, r1
 8000de4:	33c0      	adds	r3, #192	; 0xc0
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dea:	e031      	b.n	8000e50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dec:	4a1b      	ldr	r2, [pc, #108]	; (8000e5c <__NVIC_SetPriority+0xd8>)
 8000dee:	1dfb      	adds	r3, r7, #7
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	0019      	movs	r1, r3
 8000df4:	230f      	movs	r3, #15
 8000df6:	400b      	ands	r3, r1
 8000df8:	3b08      	subs	r3, #8
 8000dfa:	089b      	lsrs	r3, r3, #2
 8000dfc:	3306      	adds	r3, #6
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	18d3      	adds	r3, r2, r3
 8000e02:	3304      	adds	r3, #4
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	1dfa      	adds	r2, r7, #7
 8000e08:	7812      	ldrb	r2, [r2, #0]
 8000e0a:	0011      	movs	r1, r2
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	400a      	ands	r2, r1
 8000e10:	00d2      	lsls	r2, r2, #3
 8000e12:	21ff      	movs	r1, #255	; 0xff
 8000e14:	4091      	lsls	r1, r2
 8000e16:	000a      	movs	r2, r1
 8000e18:	43d2      	mvns	r2, r2
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	019b      	lsls	r3, r3, #6
 8000e22:	22ff      	movs	r2, #255	; 0xff
 8000e24:	401a      	ands	r2, r3
 8000e26:	1dfb      	adds	r3, r7, #7
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	4003      	ands	r3, r0
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e34:	4809      	ldr	r0, [pc, #36]	; (8000e5c <__NVIC_SetPriority+0xd8>)
 8000e36:	1dfb      	adds	r3, r7, #7
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	001c      	movs	r4, r3
 8000e3c:	230f      	movs	r3, #15
 8000e3e:	4023      	ands	r3, r4
 8000e40:	3b08      	subs	r3, #8
 8000e42:	089b      	lsrs	r3, r3, #2
 8000e44:	430a      	orrs	r2, r1
 8000e46:	3306      	adds	r3, #6
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	18c3      	adds	r3, r0, r3
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	601a      	str	r2, [r3, #0]
}
 8000e50:	46c0      	nop			; (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b003      	add	sp, #12
 8000e56:	bd90      	pop	{r4, r7, pc}
 8000e58:	e000e100 	.word	0xe000e100
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	1e5a      	subs	r2, r3, #1
 8000e6c:	2380      	movs	r3, #128	; 0x80
 8000e6e:	045b      	lsls	r3, r3, #17
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d301      	bcc.n	8000e78 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e74:	2301      	movs	r3, #1
 8000e76:	e010      	b.n	8000e9a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e78:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <SysTick_Config+0x44>)
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	3a01      	subs	r2, #1
 8000e7e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e80:	2301      	movs	r3, #1
 8000e82:	425b      	negs	r3, r3
 8000e84:	2103      	movs	r1, #3
 8000e86:	0018      	movs	r0, r3
 8000e88:	f7ff ff7c 	bl	8000d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <SysTick_Config+0x44>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e92:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <SysTick_Config+0x44>)
 8000e94:	2207      	movs	r2, #7
 8000e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b002      	add	sp, #8
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	e000e010 	.word	0xe000e010

08000ea8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	210f      	movs	r1, #15
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	1c02      	adds	r2, r0, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	b25b      	sxtb	r3, r3
 8000ec2:	0011      	movs	r1, r2
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f7ff ff5d 	bl	8000d84 <__NVIC_SetPriority>
}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	b004      	add	sp, #16
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	0002      	movs	r2, r0
 8000eda:	1dfb      	adds	r3, r7, #7
 8000edc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ede:	1dfb      	adds	r3, r7, #7
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	b25b      	sxtb	r3, r3
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f7ff ff33 	bl	8000d50 <__NVIC_EnableIRQ>
}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b002      	add	sp, #8
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	0018      	movs	r0, r3
 8000efe:	f7ff ffaf 	bl	8000e60 <SysTick_Config>
 8000f02:	0003      	movs	r3, r0
}
 8000f04:	0018      	movs	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	b002      	add	sp, #8
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2221      	movs	r2, #33	; 0x21
 8000f18:	5c9b      	ldrb	r3, [r3, r2]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d008      	beq.n	8000f32 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2204      	movs	r2, #4
 8000f24:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2220      	movs	r2, #32
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e020      	b.n	8000f74 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	210e      	movs	r1, #14
 8000f3e:	438a      	bics	r2, r1
 8000f40:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	438a      	bics	r2, r1
 8000f50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	000a      	movs	r2, r1
 8000f60:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2221      	movs	r2, #33	; 0x21
 8000f66:	2101      	movs	r1, #1
 8000f68:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2220      	movs	r2, #32
 8000f6e:	2100      	movs	r1, #0
 8000f70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	0018      	movs	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	b002      	add	sp, #8
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f84:	210f      	movs	r1, #15
 8000f86:	187b      	adds	r3, r7, r1
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2221      	movs	r2, #33	; 0x21
 8000f90:	5c9b      	ldrb	r3, [r3, r2]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d006      	beq.n	8000fa6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2204      	movs	r2, #4
 8000f9c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000f9e:	187b      	adds	r3, r7, r1
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]
 8000fa4:	e028      	b.n	8000ff8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	210e      	movs	r1, #14
 8000fb2:	438a      	bics	r2, r1
 8000fb4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	438a      	bics	r2, r1
 8000fc4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fce:	2101      	movs	r1, #1
 8000fd0:	4091      	lsls	r1, r2
 8000fd2:	000a      	movs	r2, r1
 8000fd4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2221      	movs	r2, #33	; 0x21
 8000fda:	2101      	movs	r1, #1
 8000fdc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2220      	movs	r2, #32
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d004      	beq.n	8000ff8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	0010      	movs	r0, r2
 8000ff6:	4798      	blx	r3
    }
  }
  return status;
 8000ff8:	230f      	movs	r3, #15
 8000ffa:	18fb      	adds	r3, r7, r3
 8000ffc:	781b      	ldrb	r3, [r3, #0]
}
 8000ffe:	0018      	movs	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	b004      	add	sp, #16
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001016:	e14f      	b.n	80012b8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2101      	movs	r1, #1
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	4091      	lsls	r1, r2
 8001022:	000a      	movs	r2, r1
 8001024:	4013      	ands	r3, r2
 8001026:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d100      	bne.n	8001030 <HAL_GPIO_Init+0x28>
 800102e:	e140      	b.n	80012b2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	2203      	movs	r2, #3
 8001036:	4013      	ands	r3, r2
 8001038:	2b01      	cmp	r3, #1
 800103a:	d005      	beq.n	8001048 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2203      	movs	r2, #3
 8001042:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001044:	2b02      	cmp	r3, #2
 8001046:	d130      	bne.n	80010aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	409a      	lsls	r2, r3
 8001056:	0013      	movs	r3, r2
 8001058:	43da      	mvns	r2, r3
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	68da      	ldr	r2, [r3, #12]
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	409a      	lsls	r2, r3
 800106a:	0013      	movs	r3, r2
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	4313      	orrs	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800107e:	2201      	movs	r2, #1
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	409a      	lsls	r2, r3
 8001084:	0013      	movs	r3, r2
 8001086:	43da      	mvns	r2, r3
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	091b      	lsrs	r3, r3, #4
 8001094:	2201      	movs	r2, #1
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
 800109c:	0013      	movs	r3, r2
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2203      	movs	r2, #3
 80010b0:	4013      	ands	r3, r2
 80010b2:	2b03      	cmp	r3, #3
 80010b4:	d017      	beq.n	80010e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	2203      	movs	r2, #3
 80010c2:	409a      	lsls	r2, r3
 80010c4:	0013      	movs	r3, r2
 80010c6:	43da      	mvns	r2, r3
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	689a      	ldr	r2, [r3, #8]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	409a      	lsls	r2, r3
 80010d8:	0013      	movs	r3, r2
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2203      	movs	r2, #3
 80010ec:	4013      	ands	r3, r2
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d123      	bne.n	800113a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	08da      	lsrs	r2, r3, #3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3208      	adds	r2, #8
 80010fa:	0092      	lsls	r2, r2, #2
 80010fc:	58d3      	ldr	r3, [r2, r3]
 80010fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	2207      	movs	r2, #7
 8001104:	4013      	ands	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	220f      	movs	r2, #15
 800110a:	409a      	lsls	r2, r3
 800110c:	0013      	movs	r3, r2
 800110e:	43da      	mvns	r2, r3
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	691a      	ldr	r2, [r3, #16]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	2107      	movs	r1, #7
 800111e:	400b      	ands	r3, r1
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	409a      	lsls	r2, r3
 8001124:	0013      	movs	r3, r2
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	08da      	lsrs	r2, r3, #3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3208      	adds	r2, #8
 8001134:	0092      	lsls	r2, r2, #2
 8001136:	6939      	ldr	r1, [r7, #16]
 8001138:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	2203      	movs	r2, #3
 8001146:	409a      	lsls	r2, r3
 8001148:	0013      	movs	r3, r2
 800114a:	43da      	mvns	r2, r3
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2203      	movs	r2, #3
 8001158:	401a      	ands	r2, r3
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	409a      	lsls	r2, r3
 8001160:	0013      	movs	r3, r2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	23c0      	movs	r3, #192	; 0xc0
 8001174:	029b      	lsls	r3, r3, #10
 8001176:	4013      	ands	r3, r2
 8001178:	d100      	bne.n	800117c <HAL_GPIO_Init+0x174>
 800117a:	e09a      	b.n	80012b2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117c:	4b54      	ldr	r3, [pc, #336]	; (80012d0 <HAL_GPIO_Init+0x2c8>)
 800117e:	699a      	ldr	r2, [r3, #24]
 8001180:	4b53      	ldr	r3, [pc, #332]	; (80012d0 <HAL_GPIO_Init+0x2c8>)
 8001182:	2101      	movs	r1, #1
 8001184:	430a      	orrs	r2, r1
 8001186:	619a      	str	r2, [r3, #24]
 8001188:	4b51      	ldr	r3, [pc, #324]	; (80012d0 <HAL_GPIO_Init+0x2c8>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	2201      	movs	r2, #1
 800118e:	4013      	ands	r3, r2
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001194:	4a4f      	ldr	r2, [pc, #316]	; (80012d4 <HAL_GPIO_Init+0x2cc>)
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	089b      	lsrs	r3, r3, #2
 800119a:	3302      	adds	r3, #2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	589b      	ldr	r3, [r3, r2]
 80011a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	2203      	movs	r2, #3
 80011a6:	4013      	ands	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	220f      	movs	r2, #15
 80011ac:	409a      	lsls	r2, r3
 80011ae:	0013      	movs	r3, r2
 80011b0:	43da      	mvns	r2, r3
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	4013      	ands	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	2390      	movs	r3, #144	; 0x90
 80011bc:	05db      	lsls	r3, r3, #23
 80011be:	429a      	cmp	r2, r3
 80011c0:	d013      	beq.n	80011ea <HAL_GPIO_Init+0x1e2>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a44      	ldr	r2, [pc, #272]	; (80012d8 <HAL_GPIO_Init+0x2d0>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d00d      	beq.n	80011e6 <HAL_GPIO_Init+0x1de>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a43      	ldr	r2, [pc, #268]	; (80012dc <HAL_GPIO_Init+0x2d4>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d007      	beq.n	80011e2 <HAL_GPIO_Init+0x1da>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a42      	ldr	r2, [pc, #264]	; (80012e0 <HAL_GPIO_Init+0x2d8>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d101      	bne.n	80011de <HAL_GPIO_Init+0x1d6>
 80011da:	2303      	movs	r3, #3
 80011dc:	e006      	b.n	80011ec <HAL_GPIO_Init+0x1e4>
 80011de:	2305      	movs	r3, #5
 80011e0:	e004      	b.n	80011ec <HAL_GPIO_Init+0x1e4>
 80011e2:	2302      	movs	r3, #2
 80011e4:	e002      	b.n	80011ec <HAL_GPIO_Init+0x1e4>
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <HAL_GPIO_Init+0x1e4>
 80011ea:	2300      	movs	r3, #0
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	2103      	movs	r1, #3
 80011f0:	400a      	ands	r2, r1
 80011f2:	0092      	lsls	r2, r2, #2
 80011f4:	4093      	lsls	r3, r2
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011fc:	4935      	ldr	r1, [pc, #212]	; (80012d4 <HAL_GPIO_Init+0x2cc>)
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	089b      	lsrs	r3, r3, #2
 8001202:	3302      	adds	r3, #2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800120a:	4b36      	ldr	r3, [pc, #216]	; (80012e4 <HAL_GPIO_Init+0x2dc>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	43da      	mvns	r2, r3
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	2380      	movs	r3, #128	; 0x80
 8001220:	035b      	lsls	r3, r3, #13
 8001222:	4013      	ands	r3, r2
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4313      	orrs	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800122e:	4b2d      	ldr	r3, [pc, #180]	; (80012e4 <HAL_GPIO_Init+0x2dc>)
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001234:	4b2b      	ldr	r3, [pc, #172]	; (80012e4 <HAL_GPIO_Init+0x2dc>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	43da      	mvns	r2, r3
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	2380      	movs	r3, #128	; 0x80
 800124a:	039b      	lsls	r3, r3, #14
 800124c:	4013      	ands	r3, r2
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001258:	4b22      	ldr	r3, [pc, #136]	; (80012e4 <HAL_GPIO_Init+0x2dc>)
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800125e:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <HAL_GPIO_Init+0x2dc>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	43da      	mvns	r2, r3
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	2380      	movs	r3, #128	; 0x80
 8001274:	029b      	lsls	r3, r3, #10
 8001276:	4013      	ands	r3, r2
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4313      	orrs	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001282:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <HAL_GPIO_Init+0x2dc>)
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001288:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <HAL_GPIO_Init+0x2dc>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	43da      	mvns	r2, r3
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4013      	ands	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	025b      	lsls	r3, r3, #9
 80012a0:	4013      	ands	r3, r2
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012ac:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <HAL_GPIO_Init+0x2dc>)
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	3301      	adds	r3, #1
 80012b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	40da      	lsrs	r2, r3
 80012c0:	1e13      	subs	r3, r2, #0
 80012c2:	d000      	beq.n	80012c6 <HAL_GPIO_Init+0x2be>
 80012c4:	e6a8      	b.n	8001018 <HAL_GPIO_Init+0x10>
  } 
}
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	46c0      	nop			; (mov r8, r8)
 80012ca:	46bd      	mov	sp, r7
 80012cc:	b006      	add	sp, #24
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40010000 	.word	0x40010000
 80012d8:	48000400 	.word	0x48000400
 80012dc:	48000800 	.word	0x48000800
 80012e0:	48000c00 	.word	0x48000c00
 80012e4:	40010400 	.word	0x40010400

080012e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	0008      	movs	r0, r1
 80012f2:	0011      	movs	r1, r2
 80012f4:	1cbb      	adds	r3, r7, #2
 80012f6:	1c02      	adds	r2, r0, #0
 80012f8:	801a      	strh	r2, [r3, #0]
 80012fa:	1c7b      	adds	r3, r7, #1
 80012fc:	1c0a      	adds	r2, r1, #0
 80012fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001300:	1c7b      	adds	r3, r7, #1
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d004      	beq.n	8001312 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001308:	1cbb      	adds	r3, r7, #2
 800130a:	881a      	ldrh	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001310:	e003      	b.n	800131a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001312:	1cbb      	adds	r3, r7, #2
 8001314:	881a      	ldrh	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	629a      	str	r2, [r3, #40]	; 0x28
}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	46bd      	mov	sp, r7
 800131e:	b002      	add	sp, #8
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e301      	b.n	800193a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2201      	movs	r2, #1
 800133c:	4013      	ands	r3, r2
 800133e:	d100      	bne.n	8001342 <HAL_RCC_OscConfig+0x1e>
 8001340:	e08d      	b.n	800145e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001342:	4bc3      	ldr	r3, [pc, #780]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	220c      	movs	r2, #12
 8001348:	4013      	ands	r3, r2
 800134a:	2b04      	cmp	r3, #4
 800134c:	d00e      	beq.n	800136c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800134e:	4bc0      	ldr	r3, [pc, #768]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	220c      	movs	r2, #12
 8001354:	4013      	ands	r3, r2
 8001356:	2b08      	cmp	r3, #8
 8001358:	d116      	bne.n	8001388 <HAL_RCC_OscConfig+0x64>
 800135a:	4bbd      	ldr	r3, [pc, #756]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	2380      	movs	r3, #128	; 0x80
 8001360:	025b      	lsls	r3, r3, #9
 8001362:	401a      	ands	r2, r3
 8001364:	2380      	movs	r3, #128	; 0x80
 8001366:	025b      	lsls	r3, r3, #9
 8001368:	429a      	cmp	r2, r3
 800136a:	d10d      	bne.n	8001388 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136c:	4bb8      	ldr	r3, [pc, #736]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	029b      	lsls	r3, r3, #10
 8001374:	4013      	ands	r3, r2
 8001376:	d100      	bne.n	800137a <HAL_RCC_OscConfig+0x56>
 8001378:	e070      	b.n	800145c <HAL_RCC_OscConfig+0x138>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d000      	beq.n	8001384 <HAL_RCC_OscConfig+0x60>
 8001382:	e06b      	b.n	800145c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e2d8      	b.n	800193a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d107      	bne.n	80013a0 <HAL_RCC_OscConfig+0x7c>
 8001390:	4baf      	ldr	r3, [pc, #700]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4bae      	ldr	r3, [pc, #696]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 8001396:	2180      	movs	r1, #128	; 0x80
 8001398:	0249      	lsls	r1, r1, #9
 800139a:	430a      	orrs	r2, r1
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	e02f      	b.n	8001400 <HAL_RCC_OscConfig+0xdc>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d10c      	bne.n	80013c2 <HAL_RCC_OscConfig+0x9e>
 80013a8:	4ba9      	ldr	r3, [pc, #676]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4ba8      	ldr	r3, [pc, #672]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 80013ae:	49a9      	ldr	r1, [pc, #676]	; (8001654 <HAL_RCC_OscConfig+0x330>)
 80013b0:	400a      	ands	r2, r1
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	4ba6      	ldr	r3, [pc, #664]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4ba5      	ldr	r3, [pc, #660]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 80013ba:	49a7      	ldr	r1, [pc, #668]	; (8001658 <HAL_RCC_OscConfig+0x334>)
 80013bc:	400a      	ands	r2, r1
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	e01e      	b.n	8001400 <HAL_RCC_OscConfig+0xdc>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b05      	cmp	r3, #5
 80013c8:	d10e      	bne.n	80013e8 <HAL_RCC_OscConfig+0xc4>
 80013ca:	4ba1      	ldr	r3, [pc, #644]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	4ba0      	ldr	r3, [pc, #640]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 80013d0:	2180      	movs	r1, #128	; 0x80
 80013d2:	02c9      	lsls	r1, r1, #11
 80013d4:	430a      	orrs	r2, r1
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	4b9d      	ldr	r3, [pc, #628]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b9c      	ldr	r3, [pc, #624]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 80013de:	2180      	movs	r1, #128	; 0x80
 80013e0:	0249      	lsls	r1, r1, #9
 80013e2:	430a      	orrs	r2, r1
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	e00b      	b.n	8001400 <HAL_RCC_OscConfig+0xdc>
 80013e8:	4b99      	ldr	r3, [pc, #612]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b98      	ldr	r3, [pc, #608]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 80013ee:	4999      	ldr	r1, [pc, #612]	; (8001654 <HAL_RCC_OscConfig+0x330>)
 80013f0:	400a      	ands	r2, r1
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	4b96      	ldr	r3, [pc, #600]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4b95      	ldr	r3, [pc, #596]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 80013fa:	4997      	ldr	r1, [pc, #604]	; (8001658 <HAL_RCC_OscConfig+0x334>)
 80013fc:	400a      	ands	r2, r1
 80013fe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d014      	beq.n	8001432 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001408:	f7ff fc98 	bl	8000d3c <HAL_GetTick>
 800140c:	0003      	movs	r3, r0
 800140e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001412:	f7ff fc93 	bl	8000d3c <HAL_GetTick>
 8001416:	0002      	movs	r2, r0
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b64      	cmp	r3, #100	; 0x64
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e28a      	b.n	800193a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001424:	4b8a      	ldr	r3, [pc, #552]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	2380      	movs	r3, #128	; 0x80
 800142a:	029b      	lsls	r3, r3, #10
 800142c:	4013      	ands	r3, r2
 800142e:	d0f0      	beq.n	8001412 <HAL_RCC_OscConfig+0xee>
 8001430:	e015      	b.n	800145e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001432:	f7ff fc83 	bl	8000d3c <HAL_GetTick>
 8001436:	0003      	movs	r3, r0
 8001438:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800143c:	f7ff fc7e 	bl	8000d3c <HAL_GetTick>
 8001440:	0002      	movs	r2, r0
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b64      	cmp	r3, #100	; 0x64
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e275      	b.n	800193a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800144e:	4b80      	ldr	r3, [pc, #512]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	2380      	movs	r3, #128	; 0x80
 8001454:	029b      	lsls	r3, r3, #10
 8001456:	4013      	ands	r3, r2
 8001458:	d1f0      	bne.n	800143c <HAL_RCC_OscConfig+0x118>
 800145a:	e000      	b.n	800145e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800145c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2202      	movs	r2, #2
 8001464:	4013      	ands	r3, r2
 8001466:	d100      	bne.n	800146a <HAL_RCC_OscConfig+0x146>
 8001468:	e069      	b.n	800153e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800146a:	4b79      	ldr	r3, [pc, #484]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	220c      	movs	r2, #12
 8001470:	4013      	ands	r3, r2
 8001472:	d00b      	beq.n	800148c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001474:	4b76      	ldr	r3, [pc, #472]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	220c      	movs	r2, #12
 800147a:	4013      	ands	r3, r2
 800147c:	2b08      	cmp	r3, #8
 800147e:	d11c      	bne.n	80014ba <HAL_RCC_OscConfig+0x196>
 8001480:	4b73      	ldr	r3, [pc, #460]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	025b      	lsls	r3, r3, #9
 8001488:	4013      	ands	r3, r2
 800148a:	d116      	bne.n	80014ba <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800148c:	4b70      	ldr	r3, [pc, #448]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2202      	movs	r2, #2
 8001492:	4013      	ands	r3, r2
 8001494:	d005      	beq.n	80014a2 <HAL_RCC_OscConfig+0x17e>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d001      	beq.n	80014a2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e24b      	b.n	800193a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a2:	4b6b      	ldr	r3, [pc, #428]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	22f8      	movs	r2, #248	; 0xf8
 80014a8:	4393      	bics	r3, r2
 80014aa:	0019      	movs	r1, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	00da      	lsls	r2, r3, #3
 80014b2:	4b67      	ldr	r3, [pc, #412]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 80014b4:	430a      	orrs	r2, r1
 80014b6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b8:	e041      	b.n	800153e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d024      	beq.n	800150c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014c2:	4b63      	ldr	r3, [pc, #396]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	4b62      	ldr	r3, [pc, #392]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 80014c8:	2101      	movs	r1, #1
 80014ca:	430a      	orrs	r2, r1
 80014cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ce:	f7ff fc35 	bl	8000d3c <HAL_GetTick>
 80014d2:	0003      	movs	r3, r0
 80014d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014d8:	f7ff fc30 	bl	8000d3c <HAL_GetTick>
 80014dc:	0002      	movs	r2, r0
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e227      	b.n	800193a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ea:	4b59      	ldr	r3, [pc, #356]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2202      	movs	r2, #2
 80014f0:	4013      	ands	r3, r2
 80014f2:	d0f1      	beq.n	80014d8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f4:	4b56      	ldr	r3, [pc, #344]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	22f8      	movs	r2, #248	; 0xf8
 80014fa:	4393      	bics	r3, r2
 80014fc:	0019      	movs	r1, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	00da      	lsls	r2, r3, #3
 8001504:	4b52      	ldr	r3, [pc, #328]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 8001506:	430a      	orrs	r2, r1
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	e018      	b.n	800153e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800150c:	4b50      	ldr	r3, [pc, #320]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b4f      	ldr	r3, [pc, #316]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 8001512:	2101      	movs	r1, #1
 8001514:	438a      	bics	r2, r1
 8001516:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7ff fc10 	bl	8000d3c <HAL_GetTick>
 800151c:	0003      	movs	r3, r0
 800151e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001522:	f7ff fc0b 	bl	8000d3c <HAL_GetTick>
 8001526:	0002      	movs	r2, r0
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e202      	b.n	800193a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001534:	4b46      	ldr	r3, [pc, #280]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2202      	movs	r2, #2
 800153a:	4013      	ands	r3, r2
 800153c:	d1f1      	bne.n	8001522 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2208      	movs	r2, #8
 8001544:	4013      	ands	r3, r2
 8001546:	d036      	beq.n	80015b6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	69db      	ldr	r3, [r3, #28]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d019      	beq.n	8001584 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001550:	4b3f      	ldr	r3, [pc, #252]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 8001552:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001554:	4b3e      	ldr	r3, [pc, #248]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 8001556:	2101      	movs	r1, #1
 8001558:	430a      	orrs	r2, r1
 800155a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155c:	f7ff fbee 	bl	8000d3c <HAL_GetTick>
 8001560:	0003      	movs	r3, r0
 8001562:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001566:	f7ff fbe9 	bl	8000d3c <HAL_GetTick>
 800156a:	0002      	movs	r2, r0
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e1e0      	b.n	800193a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001578:	4b35      	ldr	r3, [pc, #212]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 800157a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157c:	2202      	movs	r2, #2
 800157e:	4013      	ands	r3, r2
 8001580:	d0f1      	beq.n	8001566 <HAL_RCC_OscConfig+0x242>
 8001582:	e018      	b.n	80015b6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001584:	4b32      	ldr	r3, [pc, #200]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 8001586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001588:	4b31      	ldr	r3, [pc, #196]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 800158a:	2101      	movs	r1, #1
 800158c:	438a      	bics	r2, r1
 800158e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001590:	f7ff fbd4 	bl	8000d3c <HAL_GetTick>
 8001594:	0003      	movs	r3, r0
 8001596:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800159a:	f7ff fbcf 	bl	8000d3c <HAL_GetTick>
 800159e:	0002      	movs	r2, r0
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e1c6      	b.n	800193a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ac:	4b28      	ldr	r3, [pc, #160]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 80015ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b0:	2202      	movs	r2, #2
 80015b2:	4013      	ands	r3, r2
 80015b4:	d1f1      	bne.n	800159a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2204      	movs	r2, #4
 80015bc:	4013      	ands	r3, r2
 80015be:	d100      	bne.n	80015c2 <HAL_RCC_OscConfig+0x29e>
 80015c0:	e0b4      	b.n	800172c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c2:	201f      	movs	r0, #31
 80015c4:	183b      	adds	r3, r7, r0
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ca:	4b21      	ldr	r3, [pc, #132]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 80015cc:	69da      	ldr	r2, [r3, #28]
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	055b      	lsls	r3, r3, #21
 80015d2:	4013      	ands	r3, r2
 80015d4:	d110      	bne.n	80015f8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	4b1e      	ldr	r3, [pc, #120]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 80015d8:	69da      	ldr	r2, [r3, #28]
 80015da:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 80015dc:	2180      	movs	r1, #128	; 0x80
 80015de:	0549      	lsls	r1, r1, #21
 80015e0:	430a      	orrs	r2, r1
 80015e2:	61da      	str	r2, [r3, #28]
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 80015e6:	69da      	ldr	r2, [r3, #28]
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	055b      	lsls	r3, r3, #21
 80015ec:	4013      	ands	r3, r2
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015f2:	183b      	adds	r3, r7, r0
 80015f4:	2201      	movs	r2, #1
 80015f6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f8:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_RCC_OscConfig+0x338>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4013      	ands	r3, r2
 8001602:	d11a      	bne.n	800163a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001604:	4b15      	ldr	r3, [pc, #84]	; (800165c <HAL_RCC_OscConfig+0x338>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b14      	ldr	r3, [pc, #80]	; (800165c <HAL_RCC_OscConfig+0x338>)
 800160a:	2180      	movs	r1, #128	; 0x80
 800160c:	0049      	lsls	r1, r1, #1
 800160e:	430a      	orrs	r2, r1
 8001610:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001612:	f7ff fb93 	bl	8000d3c <HAL_GetTick>
 8001616:	0003      	movs	r3, r0
 8001618:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800161c:	f7ff fb8e 	bl	8000d3c <HAL_GetTick>
 8001620:	0002      	movs	r2, r0
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b64      	cmp	r3, #100	; 0x64
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e185      	b.n	800193a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_RCC_OscConfig+0x338>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4013      	ands	r3, r2
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d10e      	bne.n	8001660 <HAL_RCC_OscConfig+0x33c>
 8001642:	4b03      	ldr	r3, [pc, #12]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 8001644:	6a1a      	ldr	r2, [r3, #32]
 8001646:	4b02      	ldr	r3, [pc, #8]	; (8001650 <HAL_RCC_OscConfig+0x32c>)
 8001648:	2101      	movs	r1, #1
 800164a:	430a      	orrs	r2, r1
 800164c:	621a      	str	r2, [r3, #32]
 800164e:	e035      	b.n	80016bc <HAL_RCC_OscConfig+0x398>
 8001650:	40021000 	.word	0x40021000
 8001654:	fffeffff 	.word	0xfffeffff
 8001658:	fffbffff 	.word	0xfffbffff
 800165c:	40007000 	.word	0x40007000
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d10c      	bne.n	8001682 <HAL_RCC_OscConfig+0x35e>
 8001668:	4bb6      	ldr	r3, [pc, #728]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 800166a:	6a1a      	ldr	r2, [r3, #32]
 800166c:	4bb5      	ldr	r3, [pc, #724]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 800166e:	2101      	movs	r1, #1
 8001670:	438a      	bics	r2, r1
 8001672:	621a      	str	r2, [r3, #32]
 8001674:	4bb3      	ldr	r3, [pc, #716]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 8001676:	6a1a      	ldr	r2, [r3, #32]
 8001678:	4bb2      	ldr	r3, [pc, #712]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 800167a:	2104      	movs	r1, #4
 800167c:	438a      	bics	r2, r1
 800167e:	621a      	str	r2, [r3, #32]
 8001680:	e01c      	b.n	80016bc <HAL_RCC_OscConfig+0x398>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	2b05      	cmp	r3, #5
 8001688:	d10c      	bne.n	80016a4 <HAL_RCC_OscConfig+0x380>
 800168a:	4bae      	ldr	r3, [pc, #696]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 800168c:	6a1a      	ldr	r2, [r3, #32]
 800168e:	4bad      	ldr	r3, [pc, #692]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 8001690:	2104      	movs	r1, #4
 8001692:	430a      	orrs	r2, r1
 8001694:	621a      	str	r2, [r3, #32]
 8001696:	4bab      	ldr	r3, [pc, #684]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 8001698:	6a1a      	ldr	r2, [r3, #32]
 800169a:	4baa      	ldr	r3, [pc, #680]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 800169c:	2101      	movs	r1, #1
 800169e:	430a      	orrs	r2, r1
 80016a0:	621a      	str	r2, [r3, #32]
 80016a2:	e00b      	b.n	80016bc <HAL_RCC_OscConfig+0x398>
 80016a4:	4ba7      	ldr	r3, [pc, #668]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 80016a6:	6a1a      	ldr	r2, [r3, #32]
 80016a8:	4ba6      	ldr	r3, [pc, #664]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 80016aa:	2101      	movs	r1, #1
 80016ac:	438a      	bics	r2, r1
 80016ae:	621a      	str	r2, [r3, #32]
 80016b0:	4ba4      	ldr	r3, [pc, #656]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 80016b2:	6a1a      	ldr	r2, [r3, #32]
 80016b4:	4ba3      	ldr	r3, [pc, #652]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 80016b6:	2104      	movs	r1, #4
 80016b8:	438a      	bics	r2, r1
 80016ba:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d014      	beq.n	80016ee <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c4:	f7ff fb3a 	bl	8000d3c <HAL_GetTick>
 80016c8:	0003      	movs	r3, r0
 80016ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016cc:	e009      	b.n	80016e2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ce:	f7ff fb35 	bl	8000d3c <HAL_GetTick>
 80016d2:	0002      	movs	r2, r0
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	4a9b      	ldr	r2, [pc, #620]	; (8001948 <HAL_RCC_OscConfig+0x624>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e12b      	b.n	800193a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e2:	4b98      	ldr	r3, [pc, #608]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	2202      	movs	r2, #2
 80016e8:	4013      	ands	r3, r2
 80016ea:	d0f0      	beq.n	80016ce <HAL_RCC_OscConfig+0x3aa>
 80016ec:	e013      	b.n	8001716 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ee:	f7ff fb25 	bl	8000d3c <HAL_GetTick>
 80016f2:	0003      	movs	r3, r0
 80016f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f6:	e009      	b.n	800170c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016f8:	f7ff fb20 	bl	8000d3c <HAL_GetTick>
 80016fc:	0002      	movs	r2, r0
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	4a91      	ldr	r2, [pc, #580]	; (8001948 <HAL_RCC_OscConfig+0x624>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e116      	b.n	800193a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800170c:	4b8d      	ldr	r3, [pc, #564]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	2202      	movs	r2, #2
 8001712:	4013      	ands	r3, r2
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001716:	231f      	movs	r3, #31
 8001718:	18fb      	adds	r3, r7, r3
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d105      	bne.n	800172c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001720:	4b88      	ldr	r3, [pc, #544]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 8001722:	69da      	ldr	r2, [r3, #28]
 8001724:	4b87      	ldr	r3, [pc, #540]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 8001726:	4989      	ldr	r1, [pc, #548]	; (800194c <HAL_RCC_OscConfig+0x628>)
 8001728:	400a      	ands	r2, r1
 800172a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2210      	movs	r2, #16
 8001732:	4013      	ands	r3, r2
 8001734:	d063      	beq.n	80017fe <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d12a      	bne.n	8001794 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800173e:	4b81      	ldr	r3, [pc, #516]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 8001740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001742:	4b80      	ldr	r3, [pc, #512]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 8001744:	2104      	movs	r1, #4
 8001746:	430a      	orrs	r2, r1
 8001748:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800174a:	4b7e      	ldr	r3, [pc, #504]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 800174c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800174e:	4b7d      	ldr	r3, [pc, #500]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 8001750:	2101      	movs	r1, #1
 8001752:	430a      	orrs	r2, r1
 8001754:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001756:	f7ff faf1 	bl	8000d3c <HAL_GetTick>
 800175a:	0003      	movs	r3, r0
 800175c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001760:	f7ff faec 	bl	8000d3c <HAL_GetTick>
 8001764:	0002      	movs	r2, r0
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e0e3      	b.n	800193a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001772:	4b74      	ldr	r3, [pc, #464]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 8001774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001776:	2202      	movs	r2, #2
 8001778:	4013      	ands	r3, r2
 800177a:	d0f1      	beq.n	8001760 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800177c:	4b71      	ldr	r3, [pc, #452]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 800177e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001780:	22f8      	movs	r2, #248	; 0xf8
 8001782:	4393      	bics	r3, r2
 8001784:	0019      	movs	r1, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	00da      	lsls	r2, r3, #3
 800178c:	4b6d      	ldr	r3, [pc, #436]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 800178e:	430a      	orrs	r2, r1
 8001790:	635a      	str	r2, [r3, #52]	; 0x34
 8001792:	e034      	b.n	80017fe <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	3305      	adds	r3, #5
 800179a:	d111      	bne.n	80017c0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800179c:	4b69      	ldr	r3, [pc, #420]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 800179e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017a0:	4b68      	ldr	r3, [pc, #416]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 80017a2:	2104      	movs	r1, #4
 80017a4:	438a      	bics	r2, r1
 80017a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017a8:	4b66      	ldr	r3, [pc, #408]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 80017aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ac:	22f8      	movs	r2, #248	; 0xf8
 80017ae:	4393      	bics	r3, r2
 80017b0:	0019      	movs	r1, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	00da      	lsls	r2, r3, #3
 80017b8:	4b62      	ldr	r3, [pc, #392]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 80017ba:	430a      	orrs	r2, r1
 80017bc:	635a      	str	r2, [r3, #52]	; 0x34
 80017be:	e01e      	b.n	80017fe <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80017c0:	4b60      	ldr	r3, [pc, #384]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 80017c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017c4:	4b5f      	ldr	r3, [pc, #380]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 80017c6:	2104      	movs	r1, #4
 80017c8:	430a      	orrs	r2, r1
 80017ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80017cc:	4b5d      	ldr	r3, [pc, #372]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 80017ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017d0:	4b5c      	ldr	r3, [pc, #368]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 80017d2:	2101      	movs	r1, #1
 80017d4:	438a      	bics	r2, r1
 80017d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d8:	f7ff fab0 	bl	8000d3c <HAL_GetTick>
 80017dc:	0003      	movs	r3, r0
 80017de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017e2:	f7ff faab 	bl	8000d3c <HAL_GetTick>
 80017e6:	0002      	movs	r2, r0
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e0a2      	b.n	800193a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017f4:	4b53      	ldr	r3, [pc, #332]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 80017f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f8:	2202      	movs	r2, #2
 80017fa:	4013      	ands	r3, r2
 80017fc:	d1f1      	bne.n	80017e2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d100      	bne.n	8001808 <HAL_RCC_OscConfig+0x4e4>
 8001806:	e097      	b.n	8001938 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001808:	4b4e      	ldr	r3, [pc, #312]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	220c      	movs	r2, #12
 800180e:	4013      	ands	r3, r2
 8001810:	2b08      	cmp	r3, #8
 8001812:	d100      	bne.n	8001816 <HAL_RCC_OscConfig+0x4f2>
 8001814:	e06b      	b.n	80018ee <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d14c      	bne.n	80018b8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800181e:	4b49      	ldr	r3, [pc, #292]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	4b48      	ldr	r3, [pc, #288]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 8001824:	494a      	ldr	r1, [pc, #296]	; (8001950 <HAL_RCC_OscConfig+0x62c>)
 8001826:	400a      	ands	r2, r1
 8001828:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182a:	f7ff fa87 	bl	8000d3c <HAL_GetTick>
 800182e:	0003      	movs	r3, r0
 8001830:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001834:	f7ff fa82 	bl	8000d3c <HAL_GetTick>
 8001838:	0002      	movs	r2, r0
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e079      	b.n	800193a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001846:	4b3f      	ldr	r3, [pc, #252]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	049b      	lsls	r3, r3, #18
 800184e:	4013      	ands	r3, r2
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001852:	4b3c      	ldr	r3, [pc, #240]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 8001854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001856:	220f      	movs	r2, #15
 8001858:	4393      	bics	r3, r2
 800185a:	0019      	movs	r1, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001860:	4b38      	ldr	r3, [pc, #224]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 8001862:	430a      	orrs	r2, r1
 8001864:	62da      	str	r2, [r3, #44]	; 0x2c
 8001866:	4b37      	ldr	r3, [pc, #220]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	4a3a      	ldr	r2, [pc, #232]	; (8001954 <HAL_RCC_OscConfig+0x630>)
 800186c:	4013      	ands	r3, r2
 800186e:	0019      	movs	r1, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	431a      	orrs	r2, r3
 800187a:	4b32      	ldr	r3, [pc, #200]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 800187c:	430a      	orrs	r2, r1
 800187e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001880:	4b30      	ldr	r3, [pc, #192]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b2f      	ldr	r3, [pc, #188]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 8001886:	2180      	movs	r1, #128	; 0x80
 8001888:	0449      	lsls	r1, r1, #17
 800188a:	430a      	orrs	r2, r1
 800188c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188e:	f7ff fa55 	bl	8000d3c <HAL_GetTick>
 8001892:	0003      	movs	r3, r0
 8001894:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001898:	f7ff fa50 	bl	8000d3c <HAL_GetTick>
 800189c:	0002      	movs	r2, r0
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e047      	b.n	800193a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018aa:	4b26      	ldr	r3, [pc, #152]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	049b      	lsls	r3, r3, #18
 80018b2:	4013      	ands	r3, r2
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0x574>
 80018b6:	e03f      	b.n	8001938 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b8:	4b22      	ldr	r3, [pc, #136]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b21      	ldr	r3, [pc, #132]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 80018be:	4924      	ldr	r1, [pc, #144]	; (8001950 <HAL_RCC_OscConfig+0x62c>)
 80018c0:	400a      	ands	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c4:	f7ff fa3a 	bl	8000d3c <HAL_GetTick>
 80018c8:	0003      	movs	r3, r0
 80018ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ce:	f7ff fa35 	bl	8000d3c <HAL_GetTick>
 80018d2:	0002      	movs	r2, r0
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e02c      	b.n	800193a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e0:	4b18      	ldr	r3, [pc, #96]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	049b      	lsls	r3, r3, #18
 80018e8:	4013      	ands	r3, r2
 80018ea:	d1f0      	bne.n	80018ce <HAL_RCC_OscConfig+0x5aa>
 80018ec:	e024      	b.n	8001938 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d101      	bne.n	80018fa <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e01f      	b.n	800193a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80018fa:	4b12      	ldr	r3, [pc, #72]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001900:	4b10      	ldr	r3, [pc, #64]	; (8001944 <HAL_RCC_OscConfig+0x620>)
 8001902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001904:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	025b      	lsls	r3, r3, #9
 800190c:	401a      	ands	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001912:	429a      	cmp	r2, r3
 8001914:	d10e      	bne.n	8001934 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	220f      	movs	r2, #15
 800191a:	401a      	ands	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001920:	429a      	cmp	r2, r3
 8001922:	d107      	bne.n	8001934 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	23f0      	movs	r3, #240	; 0xf0
 8001928:	039b      	lsls	r3, r3, #14
 800192a:	401a      	ands	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001930:	429a      	cmp	r2, r3
 8001932:	d001      	beq.n	8001938 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e000      	b.n	800193a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	0018      	movs	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	b008      	add	sp, #32
 8001940:	bd80      	pop	{r7, pc}
 8001942:	46c0      	nop			; (mov r8, r8)
 8001944:	40021000 	.word	0x40021000
 8001948:	00001388 	.word	0x00001388
 800194c:	efffffff 	.word	0xefffffff
 8001950:	feffffff 	.word	0xfeffffff
 8001954:	ffc2ffff 	.word	0xffc2ffff

08001958 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e0b3      	b.n	8001ad4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800196c:	4b5b      	ldr	r3, [pc, #364]	; (8001adc <HAL_RCC_ClockConfig+0x184>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2201      	movs	r2, #1
 8001972:	4013      	ands	r3, r2
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d911      	bls.n	800199e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197a:	4b58      	ldr	r3, [pc, #352]	; (8001adc <HAL_RCC_ClockConfig+0x184>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2201      	movs	r2, #1
 8001980:	4393      	bics	r3, r2
 8001982:	0019      	movs	r1, r3
 8001984:	4b55      	ldr	r3, [pc, #340]	; (8001adc <HAL_RCC_ClockConfig+0x184>)
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800198c:	4b53      	ldr	r3, [pc, #332]	; (8001adc <HAL_RCC_ClockConfig+0x184>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2201      	movs	r2, #1
 8001992:	4013      	ands	r3, r2
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	d001      	beq.n	800199e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e09a      	b.n	8001ad4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2202      	movs	r2, #2
 80019a4:	4013      	ands	r3, r2
 80019a6:	d015      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2204      	movs	r2, #4
 80019ae:	4013      	ands	r3, r2
 80019b0:	d006      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019b2:	4b4b      	ldr	r3, [pc, #300]	; (8001ae0 <HAL_RCC_ClockConfig+0x188>)
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	4b4a      	ldr	r3, [pc, #296]	; (8001ae0 <HAL_RCC_ClockConfig+0x188>)
 80019b8:	21e0      	movs	r1, #224	; 0xe0
 80019ba:	00c9      	lsls	r1, r1, #3
 80019bc:	430a      	orrs	r2, r1
 80019be:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c0:	4b47      	ldr	r3, [pc, #284]	; (8001ae0 <HAL_RCC_ClockConfig+0x188>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	22f0      	movs	r2, #240	; 0xf0
 80019c6:	4393      	bics	r3, r2
 80019c8:	0019      	movs	r1, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	4b44      	ldr	r3, [pc, #272]	; (8001ae0 <HAL_RCC_ClockConfig+0x188>)
 80019d0:	430a      	orrs	r2, r1
 80019d2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2201      	movs	r2, #1
 80019da:	4013      	ands	r3, r2
 80019dc:	d040      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d107      	bne.n	80019f6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e6:	4b3e      	ldr	r3, [pc, #248]	; (8001ae0 <HAL_RCC_ClockConfig+0x188>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	029b      	lsls	r3, r3, #10
 80019ee:	4013      	ands	r3, r2
 80019f0:	d114      	bne.n	8001a1c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e06e      	b.n	8001ad4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d107      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019fe:	4b38      	ldr	r3, [pc, #224]	; (8001ae0 <HAL_RCC_ClockConfig+0x188>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	2380      	movs	r3, #128	; 0x80
 8001a04:	049b      	lsls	r3, r3, #18
 8001a06:	4013      	ands	r3, r2
 8001a08:	d108      	bne.n	8001a1c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e062      	b.n	8001ad4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0e:	4b34      	ldr	r3, [pc, #208]	; (8001ae0 <HAL_RCC_ClockConfig+0x188>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2202      	movs	r2, #2
 8001a14:	4013      	ands	r3, r2
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e05b      	b.n	8001ad4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a1c:	4b30      	ldr	r3, [pc, #192]	; (8001ae0 <HAL_RCC_ClockConfig+0x188>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2203      	movs	r2, #3
 8001a22:	4393      	bics	r3, r2
 8001a24:	0019      	movs	r1, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	4b2d      	ldr	r3, [pc, #180]	; (8001ae0 <HAL_RCC_ClockConfig+0x188>)
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a30:	f7ff f984 	bl	8000d3c <HAL_GetTick>
 8001a34:	0003      	movs	r3, r0
 8001a36:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a38:	e009      	b.n	8001a4e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3a:	f7ff f97f 	bl	8000d3c <HAL_GetTick>
 8001a3e:	0002      	movs	r2, r0
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	4a27      	ldr	r2, [pc, #156]	; (8001ae4 <HAL_RCC_ClockConfig+0x18c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e042      	b.n	8001ad4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4e:	4b24      	ldr	r3, [pc, #144]	; (8001ae0 <HAL_RCC_ClockConfig+0x188>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	220c      	movs	r2, #12
 8001a54:	401a      	ands	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d1ec      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a60:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <HAL_RCC_ClockConfig+0x184>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2201      	movs	r2, #1
 8001a66:	4013      	ands	r3, r2
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d211      	bcs.n	8001a92 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6e:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <HAL_RCC_ClockConfig+0x184>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2201      	movs	r2, #1
 8001a74:	4393      	bics	r3, r2
 8001a76:	0019      	movs	r1, r3
 8001a78:	4b18      	ldr	r3, [pc, #96]	; (8001adc <HAL_RCC_ClockConfig+0x184>)
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a80:	4b16      	ldr	r3, [pc, #88]	; (8001adc <HAL_RCC_ClockConfig+0x184>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2201      	movs	r2, #1
 8001a86:	4013      	ands	r3, r2
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d001      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e020      	b.n	8001ad4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2204      	movs	r2, #4
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d009      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a9c:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <HAL_RCC_ClockConfig+0x188>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	4a11      	ldr	r2, [pc, #68]	; (8001ae8 <HAL_RCC_ClockConfig+0x190>)
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	0019      	movs	r1, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <HAL_RCC_ClockConfig+0x188>)
 8001aac:	430a      	orrs	r2, r1
 8001aae:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ab0:	f000 f820 	bl	8001af4 <HAL_RCC_GetSysClockFreq>
 8001ab4:	0001      	movs	r1, r0
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <HAL_RCC_ClockConfig+0x188>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	091b      	lsrs	r3, r3, #4
 8001abc:	220f      	movs	r2, #15
 8001abe:	4013      	ands	r3, r2
 8001ac0:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <HAL_RCC_ClockConfig+0x194>)
 8001ac2:	5cd3      	ldrb	r3, [r2, r3]
 8001ac4:	000a      	movs	r2, r1
 8001ac6:	40da      	lsrs	r2, r3
 8001ac8:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_RCC_ClockConfig+0x198>)
 8001aca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001acc:	2003      	movs	r0, #3
 8001ace:	f7ff f8ef 	bl	8000cb0 <HAL_InitTick>
  
  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	b004      	add	sp, #16
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40022000 	.word	0x40022000
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	00001388 	.word	0x00001388
 8001ae8:	fffff8ff 	.word	0xfffff8ff
 8001aec:	08003fc8 	.word	0x08003fc8
 8001af0:	20000010 	.word	0x20000010

08001af4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	2300      	movs	r3, #0
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	2300      	movs	r3, #0
 8001b08:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001b0e:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	220c      	movs	r2, #12
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	d002      	beq.n	8001b24 <HAL_RCC_GetSysClockFreq+0x30>
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d003      	beq.n	8001b2a <HAL_RCC_GetSysClockFreq+0x36>
 8001b22:	e02c      	b.n	8001b7e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b24:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b26:	613b      	str	r3, [r7, #16]
      break;
 8001b28:	e02c      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	0c9b      	lsrs	r3, r3, #18
 8001b2e:	220f      	movs	r2, #15
 8001b30:	4013      	ands	r3, r2
 8001b32:	4a19      	ldr	r2, [pc, #100]	; (8001b98 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b34:	5cd3      	ldrb	r3, [r2, r3]
 8001b36:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b38:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3c:	220f      	movs	r2, #15
 8001b3e:	4013      	ands	r3, r2
 8001b40:	4a16      	ldr	r2, [pc, #88]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xa8>)
 8001b42:	5cd3      	ldrb	r3, [r2, r3]
 8001b44:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	2380      	movs	r3, #128	; 0x80
 8001b4a:	025b      	lsls	r3, r3, #9
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d009      	beq.n	8001b64 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b50:	68b9      	ldr	r1, [r7, #8]
 8001b52:	4810      	ldr	r0, [pc, #64]	; (8001b94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b54:	f7fe fad8 	bl	8000108 <__udivsi3>
 8001b58:	0003      	movs	r3, r0
 8001b5a:	001a      	movs	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4353      	muls	r3, r2
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	e009      	b.n	8001b78 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	000a      	movs	r2, r1
 8001b68:	0152      	lsls	r2, r2, #5
 8001b6a:	1a52      	subs	r2, r2, r1
 8001b6c:	0193      	lsls	r3, r2, #6
 8001b6e:	1a9b      	subs	r3, r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	185b      	adds	r3, r3, r1
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	613b      	str	r3, [r7, #16]
      break;
 8001b7c:	e002      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b80:	613b      	str	r3, [r7, #16]
      break;
 8001b82:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b84:	693b      	ldr	r3, [r7, #16]
}
 8001b86:	0018      	movs	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	b006      	add	sp, #24
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	40021000 	.word	0x40021000
 8001b94:	007a1200 	.word	0x007a1200
 8001b98:	08003fe0 	.word	0x08003fe0
 8001b9c:	08003ff0 	.word	0x08003ff0

08001ba0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ba4:	4b02      	ldr	r3, [pc, #8]	; (8001bb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
}
 8001ba8:	0018      	movs	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	20000010 	.word	0x20000010

08001bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001bb8:	f7ff fff2 	bl	8001ba0 <HAL_RCC_GetHCLKFreq>
 8001bbc:	0001      	movs	r1, r0
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	0a1b      	lsrs	r3, r3, #8
 8001bc4:	2207      	movs	r2, #7
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bca:	5cd3      	ldrb	r3, [r2, r3]
 8001bcc:	40d9      	lsrs	r1, r3
 8001bce:	000b      	movs	r3, r1
}    
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	08003fd8 	.word	0x08003fd8

08001be0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	2380      	movs	r3, #128	; 0x80
 8001bf6:	025b      	lsls	r3, r3, #9
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d100      	bne.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001bfc:	e08e      	b.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001bfe:	2017      	movs	r0, #23
 8001c00:	183b      	adds	r3, r7, r0
 8001c02:	2200      	movs	r2, #0
 8001c04:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c06:	4b57      	ldr	r3, [pc, #348]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c08:	69da      	ldr	r2, [r3, #28]
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	055b      	lsls	r3, r3, #21
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d110      	bne.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c12:	4b54      	ldr	r3, [pc, #336]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c14:	69da      	ldr	r2, [r3, #28]
 8001c16:	4b53      	ldr	r3, [pc, #332]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c18:	2180      	movs	r1, #128	; 0x80
 8001c1a:	0549      	lsls	r1, r1, #21
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	61da      	str	r2, [r3, #28]
 8001c20:	4b50      	ldr	r3, [pc, #320]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c22:	69da      	ldr	r2, [r3, #28]
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	055b      	lsls	r3, r3, #21
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c2e:	183b      	adds	r3, r7, r0
 8001c30:	2201      	movs	r2, #1
 8001c32:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c34:	4b4c      	ldr	r3, [pc, #304]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d11a      	bne.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c40:	4b49      	ldr	r3, [pc, #292]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4b48      	ldr	r3, [pc, #288]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001c46:	2180      	movs	r1, #128	; 0x80
 8001c48:	0049      	lsls	r1, r1, #1
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c4e:	f7ff f875 	bl	8000d3c <HAL_GetTick>
 8001c52:	0003      	movs	r3, r0
 8001c54:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c56:	e008      	b.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c58:	f7ff f870 	bl	8000d3c <HAL_GetTick>
 8001c5c:	0002      	movs	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b64      	cmp	r3, #100	; 0x64
 8001c64:	d901      	bls.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e077      	b.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6a:	4b3f      	ldr	r3, [pc, #252]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	2380      	movs	r3, #128	; 0x80
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	4013      	ands	r3, r2
 8001c74:	d0f0      	beq.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c76:	4b3b      	ldr	r3, [pc, #236]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c78:	6a1a      	ldr	r2, [r3, #32]
 8001c7a:	23c0      	movs	r3, #192	; 0xc0
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4013      	ands	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d034      	beq.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	23c0      	movs	r3, #192	; 0xc0
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4013      	ands	r3, r2
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d02c      	beq.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c98:	4b32      	ldr	r3, [pc, #200]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	4a33      	ldr	r2, [pc, #204]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ca2:	4b30      	ldr	r3, [pc, #192]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ca4:	6a1a      	ldr	r2, [r3, #32]
 8001ca6:	4b2f      	ldr	r3, [pc, #188]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ca8:	2180      	movs	r1, #128	; 0x80
 8001caa:	0249      	lsls	r1, r1, #9
 8001cac:	430a      	orrs	r2, r1
 8001cae:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cb0:	4b2c      	ldr	r3, [pc, #176]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001cb2:	6a1a      	ldr	r2, [r3, #32]
 8001cb4:	4b2b      	ldr	r3, [pc, #172]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001cb6:	492e      	ldr	r1, [pc, #184]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001cb8:	400a      	ands	r2, r1
 8001cba:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001cbc:	4b29      	ldr	r3, [pc, #164]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d013      	beq.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cca:	f7ff f837 	bl	8000d3c <HAL_GetTick>
 8001cce:	0003      	movs	r3, r0
 8001cd0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd2:	e009      	b.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f832 	bl	8000d3c <HAL_GetTick>
 8001cd8:	0002      	movs	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	4a25      	ldr	r2, [pc, #148]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e038      	b.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce8:	4b1e      	ldr	r3, [pc, #120]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	2202      	movs	r2, #2
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d0f0      	beq.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cf2:	4b1c      	ldr	r3, [pc, #112]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	4a1d      	ldr	r2, [pc, #116]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d02:	430a      	orrs	r2, r1
 8001d04:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d06:	2317      	movs	r3, #23
 8001d08:	18fb      	adds	r3, r7, r3
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d105      	bne.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d10:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d12:	69da      	ldr	r2, [r3, #28]
 8001d14:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d16:	4918      	ldr	r1, [pc, #96]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001d18:	400a      	ands	r2, r1
 8001d1a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2201      	movs	r2, #1
 8001d22:	4013      	ands	r3, r2
 8001d24:	d009      	beq.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d26:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	4393      	bics	r3, r2
 8001d2e:	0019      	movs	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d36:	430a      	orrs	r2, r1
 8001d38:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2220      	movs	r2, #32
 8001d40:	4013      	ands	r3, r2
 8001d42:	d009      	beq.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d44:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	2210      	movs	r2, #16
 8001d4a:	4393      	bics	r3, r2
 8001d4c:	0019      	movs	r1, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d54:	430a      	orrs	r2, r1
 8001d56:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	b006      	add	sp, #24
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40007000 	.word	0x40007000
 8001d6c:	fffffcff 	.word	0xfffffcff
 8001d70:	fffeffff 	.word	0xfffeffff
 8001d74:	00001388 	.word	0x00001388
 8001d78:	efffffff 	.word	0xefffffff

08001d7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e0a8      	b.n	8001ee0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d109      	bne.n	8001daa <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	2382      	movs	r3, #130	; 0x82
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d009      	beq.n	8001db6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	61da      	str	r2, [r3, #28]
 8001da8:	e005      	b.n	8001db6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	225d      	movs	r2, #93	; 0x5d
 8001dc0:	5c9b      	ldrb	r3, [r3, r2]
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d107      	bne.n	8001dd8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	225c      	movs	r2, #92	; 0x5c
 8001dcc:	2100      	movs	r1, #0
 8001dce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f7fe fe2e 	bl	8000a34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	225d      	movs	r2, #93	; 0x5d
 8001ddc:	2102      	movs	r1, #2
 8001dde:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2140      	movs	r1, #64	; 0x40
 8001dec:	438a      	bics	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	23e0      	movs	r3, #224	; 0xe0
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d902      	bls.n	8001e02 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	e002      	b.n	8001e08 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	015b      	lsls	r3, r3, #5
 8001e06:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68da      	ldr	r2, [r3, #12]
 8001e0c:	23f0      	movs	r3, #240	; 0xf0
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d008      	beq.n	8001e26 <HAL_SPI_Init+0xaa>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68da      	ldr	r2, [r3, #12]
 8001e18:	23e0      	movs	r3, #224	; 0xe0
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d002      	beq.n	8001e26 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	2382      	movs	r3, #130	; 0x82
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	401a      	ands	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6899      	ldr	r1, [r3, #8]
 8001e34:	2384      	movs	r3, #132	; 0x84
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	400b      	ands	r3, r1
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	2102      	movs	r1, #2
 8001e42:	400b      	ands	r3, r1
 8001e44:	431a      	orrs	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	400b      	ands	r3, r1
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6999      	ldr	r1, [r3, #24]
 8001e54:	2380      	movs	r3, #128	; 0x80
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	400b      	ands	r3, r1
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	2138      	movs	r1, #56	; 0x38
 8001e62:	400b      	ands	r3, r1
 8001e64:	431a      	orrs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	2180      	movs	r1, #128	; 0x80
 8001e6c:	400b      	ands	r3, r1
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	0011      	movs	r1, r2
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e76:	2380      	movs	r3, #128	; 0x80
 8001e78:	019b      	lsls	r3, r3, #6
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	0c1b      	lsrs	r3, r3, #16
 8001e8a:	2204      	movs	r2, #4
 8001e8c:	401a      	ands	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	2110      	movs	r1, #16
 8001e94:	400b      	ands	r3, r1
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e9c:	2108      	movs	r1, #8
 8001e9e:	400b      	ands	r3, r1
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68d9      	ldr	r1, [r3, #12]
 8001ea6:	23f0      	movs	r3, #240	; 0xf0
 8001ea8:	011b      	lsls	r3, r3, #4
 8001eaa:	400b      	ands	r3, r1
 8001eac:	431a      	orrs	r2, r3
 8001eae:	0011      	movs	r1, r2
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	2380      	movs	r3, #128	; 0x80
 8001eb4:	015b      	lsls	r3, r3, #5
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	69da      	ldr	r2, [r3, #28]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4907      	ldr	r1, [pc, #28]	; (8001ee8 <HAL_SPI_Init+0x16c>)
 8001ecc:	400a      	ands	r2, r1
 8001ece:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	225d      	movs	r2, #93	; 0x5d
 8001eda:	2101      	movs	r1, #1
 8001edc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	b004      	add	sp, #16
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	fffff7ff 	.word	0xfffff7ff

08001eec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08a      	sub	sp, #40	; 0x28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
 8001ef8:	001a      	movs	r2, r3
 8001efa:	1cbb      	adds	r3, r7, #2
 8001efc:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001efe:	2301      	movs	r3, #1
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001f02:	2323      	movs	r3, #35	; 0x23
 8001f04:	18fb      	adds	r3, r7, r3
 8001f06:	2200      	movs	r2, #0
 8001f08:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	225c      	movs	r2, #92	; 0x5c
 8001f0e:	5c9b      	ldrb	r3, [r3, r2]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_SPI_TransmitReceive+0x2c>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e1c4      	b.n	80022a2 <HAL_SPI_TransmitReceive+0x3b6>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	225c      	movs	r2, #92	; 0x5c
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f20:	f7fe ff0c 	bl	8000d3c <HAL_GetTick>
 8001f24:	0003      	movs	r3, r0
 8001f26:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001f28:	201b      	movs	r0, #27
 8001f2a:	183b      	adds	r3, r7, r0
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	215d      	movs	r1, #93	; 0x5d
 8001f30:	5c52      	ldrb	r2, [r2, r1]
 8001f32:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001f3a:	2312      	movs	r3, #18
 8001f3c:	18fb      	adds	r3, r7, r3
 8001f3e:	1cba      	adds	r2, r7, #2
 8001f40:	8812      	ldrh	r2, [r2, #0]
 8001f42:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f44:	183b      	adds	r3, r7, r0
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d011      	beq.n	8001f70 <HAL_SPI_TransmitReceive+0x84>
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	2382      	movs	r3, #130	; 0x82
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d107      	bne.n	8001f66 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d103      	bne.n	8001f66 <HAL_SPI_TransmitReceive+0x7a>
 8001f5e:	183b      	adds	r3, r7, r0
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d004      	beq.n	8001f70 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8001f66:	2323      	movs	r3, #35	; 0x23
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	701a      	strb	r2, [r3, #0]
    goto error;
 8001f6e:	e191      	b.n	8002294 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d006      	beq.n	8001f84 <HAL_SPI_TransmitReceive+0x98>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <HAL_SPI_TransmitReceive+0x98>
 8001f7c:	1cbb      	adds	r3, r7, #2
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d104      	bne.n	8001f8e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8001f84:	2323      	movs	r3, #35	; 0x23
 8001f86:	18fb      	adds	r3, r7, r3
 8001f88:	2201      	movs	r2, #1
 8001f8a:	701a      	strb	r2, [r3, #0]
    goto error;
 8001f8c:	e182      	b.n	8002294 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	225d      	movs	r2, #93	; 0x5d
 8001f92:	5c9b      	ldrb	r3, [r3, r2]
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d003      	beq.n	8001fa2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	225d      	movs	r2, #93	; 0x5d
 8001f9e:	2105      	movs	r1, #5
 8001fa0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	1cba      	adds	r2, r7, #2
 8001fb2:	2146      	movs	r1, #70	; 0x46
 8001fb4:	8812      	ldrh	r2, [r2, #0]
 8001fb6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	1cba      	adds	r2, r7, #2
 8001fbc:	2144      	movs	r1, #68	; 0x44
 8001fbe:	8812      	ldrh	r2, [r2, #0]
 8001fc0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	1cba      	adds	r2, r7, #2
 8001fcc:	8812      	ldrh	r2, [r2, #0]
 8001fce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	1cba      	adds	r2, r7, #2
 8001fd4:	8812      	ldrh	r2, [r2, #0]
 8001fd6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	23e0      	movs	r3, #224	; 0xe0
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d908      	bls.n	8002002 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	49ac      	ldr	r1, [pc, #688]	; (80022ac <HAL_SPI_TransmitReceive+0x3c0>)
 8001ffc:	400a      	ands	r2, r1
 8001ffe:	605a      	str	r2, [r3, #4]
 8002000:	e008      	b.n	8002014 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2180      	movs	r1, #128	; 0x80
 800200e:	0149      	lsls	r1, r1, #5
 8002010:	430a      	orrs	r2, r1
 8002012:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2240      	movs	r2, #64	; 0x40
 800201c:	4013      	ands	r3, r2
 800201e:	2b40      	cmp	r3, #64	; 0x40
 8002020:	d007      	beq.n	8002032 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2140      	movs	r1, #64	; 0x40
 800202e:	430a      	orrs	r2, r1
 8002030:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	23e0      	movs	r3, #224	; 0xe0
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	429a      	cmp	r2, r3
 800203c:	d800      	bhi.n	8002040 <HAL_SPI_TransmitReceive+0x154>
 800203e:	e083      	b.n	8002148 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <HAL_SPI_TransmitReceive+0x168>
 8002048:	2312      	movs	r3, #18
 800204a:	18fb      	adds	r3, r7, r3
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d000      	beq.n	8002054 <HAL_SPI_TransmitReceive+0x168>
 8002052:	e06d      	b.n	8002130 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002058:	881a      	ldrh	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002064:	1c9a      	adds	r2, r3, #2
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800206e:	b29b      	uxth	r3, r3
 8002070:	3b01      	subs	r3, #1
 8002072:	b29a      	uxth	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002078:	e05a      	b.n	8002130 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2202      	movs	r2, #2
 8002082:	4013      	ands	r3, r2
 8002084:	2b02      	cmp	r3, #2
 8002086:	d11b      	bne.n	80020c0 <HAL_SPI_TransmitReceive+0x1d4>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800208c:	b29b      	uxth	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d016      	beq.n	80020c0 <HAL_SPI_TransmitReceive+0x1d4>
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	2b01      	cmp	r3, #1
 8002096:	d113      	bne.n	80020c0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209c:	881a      	ldrh	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a8:	1c9a      	adds	r2, r3, #2
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	2201      	movs	r2, #1
 80020c8:	4013      	ands	r3, r2
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d11c      	bne.n	8002108 <HAL_SPI_TransmitReceive+0x21c>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2246      	movs	r2, #70	; 0x46
 80020d2:	5a9b      	ldrh	r3, [r3, r2]
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d016      	beq.n	8002108 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68da      	ldr	r2, [r3, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	b292      	uxth	r2, r2
 80020e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	1c9a      	adds	r2, r3, #2
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2246      	movs	r2, #70	; 0x46
 80020f6:	5a9b      	ldrh	r3, [r3, r2]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	3b01      	subs	r3, #1
 80020fc:	b299      	uxth	r1, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2246      	movs	r2, #70	; 0x46
 8002102:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002104:	2301      	movs	r3, #1
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002108:	f7fe fe18 	bl	8000d3c <HAL_GetTick>
 800210c:	0002      	movs	r2, r0
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002114:	429a      	cmp	r2, r3
 8002116:	d80b      	bhi.n	8002130 <HAL_SPI_TransmitReceive+0x244>
 8002118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800211a:	3301      	adds	r3, #1
 800211c:	d008      	beq.n	8002130 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800211e:	2323      	movs	r3, #35	; 0x23
 8002120:	18fb      	adds	r3, r7, r3
 8002122:	2203      	movs	r2, #3
 8002124:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	225d      	movs	r2, #93	; 0x5d
 800212a:	2101      	movs	r1, #1
 800212c:	5499      	strb	r1, [r3, r2]
        goto error;
 800212e:	e0b1      	b.n	8002294 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002134:	b29b      	uxth	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d19f      	bne.n	800207a <HAL_SPI_TransmitReceive+0x18e>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2246      	movs	r2, #70	; 0x46
 800213e:	5a9b      	ldrh	r3, [r3, r2]
 8002140:	b29b      	uxth	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d199      	bne.n	800207a <HAL_SPI_TransmitReceive+0x18e>
 8002146:	e089      	b.n	800225c <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_SPI_TransmitReceive+0x270>
 8002150:	2312      	movs	r3, #18
 8002152:	18fb      	adds	r3, r7, r3
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d000      	beq.n	800215c <HAL_SPI_TransmitReceive+0x270>
 800215a:	e074      	b.n	8002246 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	330c      	adds	r3, #12
 8002166:	7812      	ldrb	r2, [r2, #0]
 8002168:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002178:	b29b      	uxth	r3, r3
 800217a:	3b01      	subs	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002182:	e060      	b.n	8002246 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2202      	movs	r2, #2
 800218c:	4013      	ands	r3, r2
 800218e:	2b02      	cmp	r3, #2
 8002190:	d11c      	bne.n	80021cc <HAL_SPI_TransmitReceive+0x2e0>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002196:	b29b      	uxth	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	d017      	beq.n	80021cc <HAL_SPI_TransmitReceive+0x2e0>
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d114      	bne.n	80021cc <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	330c      	adds	r3, #12
 80021ac:	7812      	ldrb	r2, [r2, #0]
 80021ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b4:	1c5a      	adds	r2, r3, #1
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021be:	b29b      	uxth	r3, r3
 80021c0:	3b01      	subs	r3, #1
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2201      	movs	r2, #1
 80021d4:	4013      	ands	r3, r2
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d11e      	bne.n	8002218 <HAL_SPI_TransmitReceive+0x32c>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2246      	movs	r2, #70	; 0x46
 80021de:	5a9b      	ldrh	r3, [r3, r2]
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d018      	beq.n	8002218 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	330c      	adds	r3, #12
 80021ec:	001a      	movs	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	7812      	ldrb	r2, [r2, #0]
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2246      	movs	r2, #70	; 0x46
 8002206:	5a9b      	ldrh	r3, [r3, r2]
 8002208:	b29b      	uxth	r3, r3
 800220a:	3b01      	subs	r3, #1
 800220c:	b299      	uxth	r1, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2246      	movs	r2, #70	; 0x46
 8002212:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002214:	2301      	movs	r3, #1
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002218:	f7fe fd90 	bl	8000d3c <HAL_GetTick>
 800221c:	0002      	movs	r2, r0
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002224:	429a      	cmp	r2, r3
 8002226:	d802      	bhi.n	800222e <HAL_SPI_TransmitReceive+0x342>
 8002228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222a:	3301      	adds	r3, #1
 800222c:	d102      	bne.n	8002234 <HAL_SPI_TransmitReceive+0x348>
 800222e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002230:	2b00      	cmp	r3, #0
 8002232:	d108      	bne.n	8002246 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8002234:	2323      	movs	r3, #35	; 0x23
 8002236:	18fb      	adds	r3, r7, r3
 8002238:	2203      	movs	r2, #3
 800223a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	225d      	movs	r2, #93	; 0x5d
 8002240:	2101      	movs	r1, #1
 8002242:	5499      	strb	r1, [r3, r2]
        goto error;
 8002244:	e026      	b.n	8002294 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800224a:	b29b      	uxth	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	d199      	bne.n	8002184 <HAL_SPI_TransmitReceive+0x298>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2246      	movs	r2, #70	; 0x46
 8002254:	5a9b      	ldrh	r3, [r3, r2]
 8002256:	b29b      	uxth	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	d193      	bne.n	8002184 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800225c:	69fa      	ldr	r2, [r7, #28]
 800225e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	0018      	movs	r0, r3
 8002264:	f000 f954 	bl	8002510 <SPI_EndRxTxTransaction>
 8002268:	1e03      	subs	r3, r0, #0
 800226a:	d006      	beq.n	800227a <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 800226c:	2323      	movs	r3, #35	; 0x23
 800226e:	18fb      	adds	r3, r7, r3
 8002270:	2201      	movs	r2, #1
 8002272:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2220      	movs	r2, #32
 8002278:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227e:	2b00      	cmp	r3, #0
 8002280:	d004      	beq.n	800228c <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8002282:	2323      	movs	r3, #35	; 0x23
 8002284:	18fb      	adds	r3, r7, r3
 8002286:	2201      	movs	r2, #1
 8002288:	701a      	strb	r2, [r3, #0]
 800228a:	e003      	b.n	8002294 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	225d      	movs	r2, #93	; 0x5d
 8002290:	2101      	movs	r1, #1
 8002292:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	225c      	movs	r2, #92	; 0x5c
 8002298:	2100      	movs	r1, #0
 800229a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800229c:	2323      	movs	r3, #35	; 0x23
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	781b      	ldrb	r3, [r3, #0]
}
 80022a2:	0018      	movs	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	b00a      	add	sp, #40	; 0x28
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	ffffefff 	.word	0xffffefff

080022b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	603b      	str	r3, [r7, #0]
 80022bc:	1dfb      	adds	r3, r7, #7
 80022be:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80022c0:	f7fe fd3c 	bl	8000d3c <HAL_GetTick>
 80022c4:	0002      	movs	r2, r0
 80022c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c8:	1a9b      	subs	r3, r3, r2
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	18d3      	adds	r3, r2, r3
 80022ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80022d0:	f7fe fd34 	bl	8000d3c <HAL_GetTick>
 80022d4:	0003      	movs	r3, r0
 80022d6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80022d8:	4b3a      	ldr	r3, [pc, #232]	; (80023c4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	015b      	lsls	r3, r3, #5
 80022de:	0d1b      	lsrs	r3, r3, #20
 80022e0:	69fa      	ldr	r2, [r7, #28]
 80022e2:	4353      	muls	r3, r2
 80022e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022e6:	e058      	b.n	800239a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	3301      	adds	r3, #1
 80022ec:	d055      	beq.n	800239a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80022ee:	f7fe fd25 	bl	8000d3c <HAL_GetTick>
 80022f2:	0002      	movs	r2, r0
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	69fa      	ldr	r2, [r7, #28]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d902      	bls.n	8002304 <SPI_WaitFlagStateUntilTimeout+0x54>
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d142      	bne.n	800238a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	21e0      	movs	r1, #224	; 0xe0
 8002310:	438a      	bics	r2, r1
 8002312:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	2382      	movs	r3, #130	; 0x82
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	429a      	cmp	r2, r3
 800231e:	d113      	bne.n	8002348 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	021b      	lsls	r3, r3, #8
 8002328:	429a      	cmp	r2, r3
 800232a:	d005      	beq.n	8002338 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	2380      	movs	r3, #128	; 0x80
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	429a      	cmp	r2, r3
 8002336:	d107      	bne.n	8002348 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2140      	movs	r1, #64	; 0x40
 8002344:	438a      	bics	r2, r1
 8002346:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800234c:	2380      	movs	r3, #128	; 0x80
 800234e:	019b      	lsls	r3, r3, #6
 8002350:	429a      	cmp	r2, r3
 8002352:	d110      	bne.n	8002376 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	491a      	ldr	r1, [pc, #104]	; (80023c8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002360:	400a      	ands	r2, r1
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2180      	movs	r1, #128	; 0x80
 8002370:	0189      	lsls	r1, r1, #6
 8002372:	430a      	orrs	r2, r1
 8002374:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	225d      	movs	r2, #93	; 0x5d
 800237a:	2101      	movs	r1, #1
 800237c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	225c      	movs	r2, #92	; 0x5c
 8002382:	2100      	movs	r1, #0
 8002384:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e017      	b.n	80023ba <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002390:	2300      	movs	r3, #0
 8002392:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	3b01      	subs	r3, #1
 8002398:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	4013      	ands	r3, r2
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	425a      	negs	r2, r3
 80023aa:	4153      	adcs	r3, r2
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	001a      	movs	r2, r3
 80023b0:	1dfb      	adds	r3, r7, #7
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d197      	bne.n	80022e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	0018      	movs	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	b008      	add	sp, #32
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	20000010 	.word	0x20000010
 80023c8:	ffffdfff 	.word	0xffffdfff

080023cc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08a      	sub	sp, #40	; 0x28
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
 80023d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80023da:	2317      	movs	r3, #23
 80023dc:	18fb      	adds	r3, r7, r3
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80023e2:	f7fe fcab 	bl	8000d3c <HAL_GetTick>
 80023e6:	0002      	movs	r2, r0
 80023e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ea:	1a9b      	subs	r3, r3, r2
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	18d3      	adds	r3, r2, r3
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80023f2:	f7fe fca3 	bl	8000d3c <HAL_GetTick>
 80023f6:	0003      	movs	r3, r0
 80023f8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	330c      	adds	r3, #12
 8002400:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002402:	4b41      	ldr	r3, [pc, #260]	; (8002508 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	0013      	movs	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	189b      	adds	r3, r3, r2
 800240c:	00da      	lsls	r2, r3, #3
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	0d1b      	lsrs	r3, r3, #20
 8002412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002414:	4353      	muls	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002418:	e068      	b.n	80024ec <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	23c0      	movs	r3, #192	; 0xc0
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	429a      	cmp	r2, r3
 8002422:	d10a      	bne.n	800243a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d107      	bne.n	800243a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	b2da      	uxtb	r2, r3
 8002430:	2117      	movs	r1, #23
 8002432:	187b      	adds	r3, r7, r1
 8002434:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002436:	187b      	adds	r3, r7, r1
 8002438:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	3301      	adds	r3, #1
 800243e:	d055      	beq.n	80024ec <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002440:	f7fe fc7c 	bl	8000d3c <HAL_GetTick>
 8002444:	0002      	movs	r2, r0
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800244c:	429a      	cmp	r2, r3
 800244e:	d902      	bls.n	8002456 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	2b00      	cmp	r3, #0
 8002454:	d142      	bne.n	80024dc <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	21e0      	movs	r1, #224	; 0xe0
 8002462:	438a      	bics	r2, r1
 8002464:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	2382      	movs	r3, #130	; 0x82
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	429a      	cmp	r2, r3
 8002470:	d113      	bne.n	800249a <SPI_WaitFifoStateUntilTimeout+0xce>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	2380      	movs	r3, #128	; 0x80
 8002478:	021b      	lsls	r3, r3, #8
 800247a:	429a      	cmp	r2, r3
 800247c:	d005      	beq.n	800248a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	429a      	cmp	r2, r3
 8002488:	d107      	bne.n	800249a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2140      	movs	r1, #64	; 0x40
 8002496:	438a      	bics	r2, r1
 8002498:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800249e:	2380      	movs	r3, #128	; 0x80
 80024a0:	019b      	lsls	r3, r3, #6
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d110      	bne.n	80024c8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4916      	ldr	r1, [pc, #88]	; (800250c <SPI_WaitFifoStateUntilTimeout+0x140>)
 80024b2:	400a      	ands	r2, r1
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2180      	movs	r1, #128	; 0x80
 80024c2:	0189      	lsls	r1, r1, #6
 80024c4:	430a      	orrs	r2, r1
 80024c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	225d      	movs	r2, #93	; 0x5d
 80024cc:	2101      	movs	r1, #1
 80024ce:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	225c      	movs	r2, #92	; 0x5c
 80024d4:	2100      	movs	r1, #0
 80024d6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e010      	b.n	80024fe <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	3b01      	subs	r3, #1
 80024ea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	4013      	ands	r3, r2
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d18e      	bne.n	800241a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	0018      	movs	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	b00a      	add	sp, #40	; 0x28
 8002504:	bd80      	pop	{r7, pc}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	20000010 	.word	0x20000010
 800250c:	ffffdfff 	.word	0xffffdfff

08002510 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af02      	add	r7, sp, #8
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	23c0      	movs	r3, #192	; 0xc0
 8002520:	0159      	lsls	r1, r3, #5
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	0013      	movs	r3, r2
 800252a:	2200      	movs	r2, #0
 800252c:	f7ff ff4e 	bl	80023cc <SPI_WaitFifoStateUntilTimeout>
 8002530:	1e03      	subs	r3, r0, #0
 8002532:	d007      	beq.n	8002544 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002538:	2220      	movs	r2, #32
 800253a:	431a      	orrs	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e027      	b.n	8002594 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	0013      	movs	r3, r2
 800254e:	2200      	movs	r2, #0
 8002550:	2180      	movs	r1, #128	; 0x80
 8002552:	f7ff fead 	bl	80022b0 <SPI_WaitFlagStateUntilTimeout>
 8002556:	1e03      	subs	r3, r0, #0
 8002558:	d007      	beq.n	800256a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800255e:	2220      	movs	r2, #32
 8002560:	431a      	orrs	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e014      	b.n	8002594 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	23c0      	movs	r3, #192	; 0xc0
 800256e:	00d9      	lsls	r1, r3, #3
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	0013      	movs	r3, r2
 8002578:	2200      	movs	r2, #0
 800257a:	f7ff ff27 	bl	80023cc <SPI_WaitFifoStateUntilTimeout>
 800257e:	1e03      	subs	r3, r0, #0
 8002580:	d007      	beq.n	8002592 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002586:	2220      	movs	r2, #32
 8002588:	431a      	orrs	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e000      	b.n	8002594 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	0018      	movs	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	b004      	add	sp, #16
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e042      	b.n	8002634 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	223d      	movs	r2, #61	; 0x3d
 80025b2:	5c9b      	ldrb	r3, [r3, r2]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d107      	bne.n	80025ca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	223c      	movs	r2, #60	; 0x3c
 80025be:	2100      	movs	r1, #0
 80025c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	0018      	movs	r0, r3
 80025c6:	f7fe fa81 	bl	8000acc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	223d      	movs	r2, #61	; 0x3d
 80025ce:	2102      	movs	r1, #2
 80025d0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3304      	adds	r3, #4
 80025da:	0019      	movs	r1, r3
 80025dc:	0010      	movs	r0, r2
 80025de:	f000 fa83 	bl	8002ae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2246      	movs	r2, #70	; 0x46
 80025e6:	2101      	movs	r1, #1
 80025e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	223e      	movs	r2, #62	; 0x3e
 80025ee:	2101      	movs	r1, #1
 80025f0:	5499      	strb	r1, [r3, r2]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	223f      	movs	r2, #63	; 0x3f
 80025f6:	2101      	movs	r1, #1
 80025f8:	5499      	strb	r1, [r3, r2]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2240      	movs	r2, #64	; 0x40
 80025fe:	2101      	movs	r1, #1
 8002600:	5499      	strb	r1, [r3, r2]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2241      	movs	r2, #65	; 0x41
 8002606:	2101      	movs	r1, #1
 8002608:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2242      	movs	r2, #66	; 0x42
 800260e:	2101      	movs	r1, #1
 8002610:	5499      	strb	r1, [r3, r2]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2243      	movs	r2, #67	; 0x43
 8002616:	2101      	movs	r1, #1
 8002618:	5499      	strb	r1, [r3, r2]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2244      	movs	r2, #68	; 0x44
 800261e:	2101      	movs	r1, #1
 8002620:	5499      	strb	r1, [r3, r2]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2245      	movs	r2, #69	; 0x45
 8002626:	2101      	movs	r1, #1
 8002628:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	223d      	movs	r2, #61	; 0x3d
 800262e:	2101      	movs	r1, #1
 8002630:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	0018      	movs	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	b002      	add	sp, #8
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	223d      	movs	r2, #61	; 0x3d
 8002648:	5c9b      	ldrb	r3, [r3, r2]
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b01      	cmp	r3, #1
 800264e:	d001      	beq.n	8002654 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e035      	b.n	80026c0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	223d      	movs	r2, #61	; 0x3d
 8002658:	2102      	movs	r1, #2
 800265a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2101      	movs	r1, #1
 8002668:	430a      	orrs	r2, r1
 800266a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a15      	ldr	r2, [pc, #84]	; (80026c8 <HAL_TIM_Base_Start_IT+0x8c>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d009      	beq.n	800268a <HAL_TIM_Base_Start_IT+0x4e>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a14      	ldr	r2, [pc, #80]	; (80026cc <HAL_TIM_Base_Start_IT+0x90>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d004      	beq.n	800268a <HAL_TIM_Base_Start_IT+0x4e>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a12      	ldr	r2, [pc, #72]	; (80026d0 <HAL_TIM_Base_Start_IT+0x94>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d111      	bne.n	80026ae <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	2207      	movs	r2, #7
 8002692:	4013      	ands	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2b06      	cmp	r3, #6
 800269a:	d010      	beq.n	80026be <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2101      	movs	r1, #1
 80026a8:	430a      	orrs	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ac:	e007      	b.n	80026be <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2101      	movs	r1, #1
 80026ba:	430a      	orrs	r2, r1
 80026bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	0018      	movs	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	b004      	add	sp, #16
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40012c00 	.word	0x40012c00
 80026cc:	40000400 	.word	0x40000400
 80026d0:	40014000 	.word	0x40014000

080026d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	2202      	movs	r2, #2
 80026e4:	4013      	ands	r3, r2
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d124      	bne.n	8002734 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	2202      	movs	r2, #2
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d11d      	bne.n	8002734 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2203      	movs	r2, #3
 80026fe:	4252      	negs	r2, r2
 8002700:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	2203      	movs	r2, #3
 8002710:	4013      	ands	r3, r2
 8002712:	d004      	beq.n	800271e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	0018      	movs	r0, r3
 8002718:	f000 f9ce 	bl	8002ab8 <HAL_TIM_IC_CaptureCallback>
 800271c:	e007      	b.n	800272e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	0018      	movs	r0, r3
 8002722:	f000 f9c1 	bl	8002aa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	0018      	movs	r0, r3
 800272a:	f000 f9cd 	bl	8002ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	2204      	movs	r2, #4
 800273c:	4013      	ands	r3, r2
 800273e:	2b04      	cmp	r3, #4
 8002740:	d125      	bne.n	800278e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	2204      	movs	r2, #4
 800274a:	4013      	ands	r3, r2
 800274c:	2b04      	cmp	r3, #4
 800274e:	d11e      	bne.n	800278e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2205      	movs	r2, #5
 8002756:	4252      	negs	r2, r2
 8002758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2202      	movs	r2, #2
 800275e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	699a      	ldr	r2, [r3, #24]
 8002766:	23c0      	movs	r3, #192	; 0xc0
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4013      	ands	r3, r2
 800276c:	d004      	beq.n	8002778 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	0018      	movs	r0, r3
 8002772:	f000 f9a1 	bl	8002ab8 <HAL_TIM_IC_CaptureCallback>
 8002776:	e007      	b.n	8002788 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	0018      	movs	r0, r3
 800277c:	f000 f994 	bl	8002aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	0018      	movs	r0, r3
 8002784:	f000 f9a0 	bl	8002ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	2208      	movs	r2, #8
 8002796:	4013      	ands	r3, r2
 8002798:	2b08      	cmp	r3, #8
 800279a:	d124      	bne.n	80027e6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	2208      	movs	r2, #8
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d11d      	bne.n	80027e6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2209      	movs	r2, #9
 80027b0:	4252      	negs	r2, r2
 80027b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2204      	movs	r2, #4
 80027b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	2203      	movs	r2, #3
 80027c2:	4013      	ands	r3, r2
 80027c4:	d004      	beq.n	80027d0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	0018      	movs	r0, r3
 80027ca:	f000 f975 	bl	8002ab8 <HAL_TIM_IC_CaptureCallback>
 80027ce:	e007      	b.n	80027e0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	0018      	movs	r0, r3
 80027d4:	f000 f968 	bl	8002aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	0018      	movs	r0, r3
 80027dc:	f000 f974 	bl	8002ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	2210      	movs	r2, #16
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b10      	cmp	r3, #16
 80027f2:	d125      	bne.n	8002840 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	2210      	movs	r2, #16
 80027fc:	4013      	ands	r3, r2
 80027fe:	2b10      	cmp	r3, #16
 8002800:	d11e      	bne.n	8002840 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2211      	movs	r2, #17
 8002808:	4252      	negs	r2, r2
 800280a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2208      	movs	r2, #8
 8002810:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	69da      	ldr	r2, [r3, #28]
 8002818:	23c0      	movs	r3, #192	; 0xc0
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4013      	ands	r3, r2
 800281e:	d004      	beq.n	800282a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	0018      	movs	r0, r3
 8002824:	f000 f948 	bl	8002ab8 <HAL_TIM_IC_CaptureCallback>
 8002828:	e007      	b.n	800283a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	0018      	movs	r0, r3
 800282e:	f000 f93b 	bl	8002aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	0018      	movs	r0, r3
 8002836:	f000 f947 	bl	8002ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	2201      	movs	r2, #1
 8002848:	4013      	ands	r3, r2
 800284a:	2b01      	cmp	r3, #1
 800284c:	d10f      	bne.n	800286e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	2201      	movs	r2, #1
 8002856:	4013      	ands	r3, r2
 8002858:	2b01      	cmp	r3, #1
 800285a:	d108      	bne.n	800286e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2202      	movs	r2, #2
 8002862:	4252      	negs	r2, r2
 8002864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	0018      	movs	r0, r3
 800286a:	f7fe f871 	bl	8000950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	2280      	movs	r2, #128	; 0x80
 8002876:	4013      	ands	r3, r2
 8002878:	2b80      	cmp	r3, #128	; 0x80
 800287a:	d10f      	bne.n	800289c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	2280      	movs	r2, #128	; 0x80
 8002884:	4013      	ands	r3, r2
 8002886:	2b80      	cmp	r3, #128	; 0x80
 8002888:	d108      	bne.n	800289c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2281      	movs	r2, #129	; 0x81
 8002890:	4252      	negs	r2, r2
 8002892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	0018      	movs	r0, r3
 8002898:	f000 fa96 	bl	8002dc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	2240      	movs	r2, #64	; 0x40
 80028a4:	4013      	ands	r3, r2
 80028a6:	2b40      	cmp	r3, #64	; 0x40
 80028a8:	d10f      	bne.n	80028ca <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	2240      	movs	r2, #64	; 0x40
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b40      	cmp	r3, #64	; 0x40
 80028b6:	d108      	bne.n	80028ca <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2241      	movs	r2, #65	; 0x41
 80028be:	4252      	negs	r2, r2
 80028c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	0018      	movs	r0, r3
 80028c6:	f000 f907 	bl	8002ad8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	2220      	movs	r2, #32
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b20      	cmp	r3, #32
 80028d6:	d10f      	bne.n	80028f8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b20      	cmp	r3, #32
 80028e4:	d108      	bne.n	80028f8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2221      	movs	r2, #33	; 0x21
 80028ec:	4252      	negs	r2, r2
 80028ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	0018      	movs	r0, r3
 80028f4:	f000 fa60 	bl	8002db8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028f8:	46c0      	nop			; (mov r8, r8)
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b002      	add	sp, #8
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800290a:	230f      	movs	r3, #15
 800290c:	18fb      	adds	r3, r7, r3
 800290e:	2200      	movs	r2, #0
 8002910:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	223c      	movs	r2, #60	; 0x3c
 8002916:	5c9b      	ldrb	r3, [r3, r2]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_TIM_ConfigClockSource+0x20>
 800291c:	2302      	movs	r3, #2
 800291e:	e0bc      	b.n	8002a9a <HAL_TIM_ConfigClockSource+0x19a>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	223c      	movs	r2, #60	; 0x3c
 8002924:	2101      	movs	r1, #1
 8002926:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	223d      	movs	r2, #61	; 0x3d
 800292c:	2102      	movs	r1, #2
 800292e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2277      	movs	r2, #119	; 0x77
 800293c:	4393      	bics	r3, r2
 800293e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	4a58      	ldr	r2, [pc, #352]	; (8002aa4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002944:	4013      	ands	r3, r2
 8002946:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2280      	movs	r2, #128	; 0x80
 8002956:	0192      	lsls	r2, r2, #6
 8002958:	4293      	cmp	r3, r2
 800295a:	d040      	beq.n	80029de <HAL_TIM_ConfigClockSource+0xde>
 800295c:	2280      	movs	r2, #128	; 0x80
 800295e:	0192      	lsls	r2, r2, #6
 8002960:	4293      	cmp	r3, r2
 8002962:	d900      	bls.n	8002966 <HAL_TIM_ConfigClockSource+0x66>
 8002964:	e088      	b.n	8002a78 <HAL_TIM_ConfigClockSource+0x178>
 8002966:	2280      	movs	r2, #128	; 0x80
 8002968:	0152      	lsls	r2, r2, #5
 800296a:	4293      	cmp	r3, r2
 800296c:	d100      	bne.n	8002970 <HAL_TIM_ConfigClockSource+0x70>
 800296e:	e088      	b.n	8002a82 <HAL_TIM_ConfigClockSource+0x182>
 8002970:	2280      	movs	r2, #128	; 0x80
 8002972:	0152      	lsls	r2, r2, #5
 8002974:	4293      	cmp	r3, r2
 8002976:	d900      	bls.n	800297a <HAL_TIM_ConfigClockSource+0x7a>
 8002978:	e07e      	b.n	8002a78 <HAL_TIM_ConfigClockSource+0x178>
 800297a:	2b70      	cmp	r3, #112	; 0x70
 800297c:	d018      	beq.n	80029b0 <HAL_TIM_ConfigClockSource+0xb0>
 800297e:	d900      	bls.n	8002982 <HAL_TIM_ConfigClockSource+0x82>
 8002980:	e07a      	b.n	8002a78 <HAL_TIM_ConfigClockSource+0x178>
 8002982:	2b60      	cmp	r3, #96	; 0x60
 8002984:	d04f      	beq.n	8002a26 <HAL_TIM_ConfigClockSource+0x126>
 8002986:	d900      	bls.n	800298a <HAL_TIM_ConfigClockSource+0x8a>
 8002988:	e076      	b.n	8002a78 <HAL_TIM_ConfigClockSource+0x178>
 800298a:	2b50      	cmp	r3, #80	; 0x50
 800298c:	d03b      	beq.n	8002a06 <HAL_TIM_ConfigClockSource+0x106>
 800298e:	d900      	bls.n	8002992 <HAL_TIM_ConfigClockSource+0x92>
 8002990:	e072      	b.n	8002a78 <HAL_TIM_ConfigClockSource+0x178>
 8002992:	2b40      	cmp	r3, #64	; 0x40
 8002994:	d057      	beq.n	8002a46 <HAL_TIM_ConfigClockSource+0x146>
 8002996:	d900      	bls.n	800299a <HAL_TIM_ConfigClockSource+0x9a>
 8002998:	e06e      	b.n	8002a78 <HAL_TIM_ConfigClockSource+0x178>
 800299a:	2b30      	cmp	r3, #48	; 0x30
 800299c:	d063      	beq.n	8002a66 <HAL_TIM_ConfigClockSource+0x166>
 800299e:	d86b      	bhi.n	8002a78 <HAL_TIM_ConfigClockSource+0x178>
 80029a0:	2b20      	cmp	r3, #32
 80029a2:	d060      	beq.n	8002a66 <HAL_TIM_ConfigClockSource+0x166>
 80029a4:	d868      	bhi.n	8002a78 <HAL_TIM_ConfigClockSource+0x178>
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d05d      	beq.n	8002a66 <HAL_TIM_ConfigClockSource+0x166>
 80029aa:	2b10      	cmp	r3, #16
 80029ac:	d05b      	beq.n	8002a66 <HAL_TIM_ConfigClockSource+0x166>
 80029ae:	e063      	b.n	8002a78 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6818      	ldr	r0, [r3, #0]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	6899      	ldr	r1, [r3, #8]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	f000 f982 	bl	8002cc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2277      	movs	r2, #119	; 0x77
 80029d0:	4313      	orrs	r3, r2
 80029d2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	609a      	str	r2, [r3, #8]
      break;
 80029dc:	e052      	b.n	8002a84 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6818      	ldr	r0, [r3, #0]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	6899      	ldr	r1, [r3, #8]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f000 f96b 	bl	8002cc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2180      	movs	r1, #128	; 0x80
 80029fe:	01c9      	lsls	r1, r1, #7
 8002a00:	430a      	orrs	r2, r1
 8002a02:	609a      	str	r2, [r3, #8]
      break;
 8002a04:	e03e      	b.n	8002a84 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6818      	ldr	r0, [r3, #0]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	6859      	ldr	r1, [r3, #4]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	001a      	movs	r2, r3
 8002a14:	f000 f8de 	bl	8002bd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2150      	movs	r1, #80	; 0x50
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f000 f938 	bl	8002c94 <TIM_ITRx_SetConfig>
      break;
 8002a24:	e02e      	b.n	8002a84 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6818      	ldr	r0, [r3, #0]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	6859      	ldr	r1, [r3, #4]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	001a      	movs	r2, r3
 8002a34:	f000 f8fc 	bl	8002c30 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2160      	movs	r1, #96	; 0x60
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f000 f928 	bl	8002c94 <TIM_ITRx_SetConfig>
      break;
 8002a44:	e01e      	b.n	8002a84 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6818      	ldr	r0, [r3, #0]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	6859      	ldr	r1, [r3, #4]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	001a      	movs	r2, r3
 8002a54:	f000 f8be 	bl	8002bd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2140      	movs	r1, #64	; 0x40
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f000 f918 	bl	8002c94 <TIM_ITRx_SetConfig>
      break;
 8002a64:	e00e      	b.n	8002a84 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	0019      	movs	r1, r3
 8002a70:	0010      	movs	r0, r2
 8002a72:	f000 f90f 	bl	8002c94 <TIM_ITRx_SetConfig>
      break;
 8002a76:	e005      	b.n	8002a84 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002a78:	230f      	movs	r3, #15
 8002a7a:	18fb      	adds	r3, r7, r3
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	701a      	strb	r2, [r3, #0]
      break;
 8002a80:	e000      	b.n	8002a84 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002a82:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	223d      	movs	r2, #61	; 0x3d
 8002a88:	2101      	movs	r1, #1
 8002a8a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	223c      	movs	r2, #60	; 0x3c
 8002a90:	2100      	movs	r1, #0
 8002a92:	5499      	strb	r1, [r3, r2]

  return status;
 8002a94:	230f      	movs	r3, #15
 8002a96:	18fb      	adds	r3, r7, r3
 8002a98:	781b      	ldrb	r3, [r3, #0]
}
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	b004      	add	sp, #16
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	ffff00ff 	.word	0xffff00ff

08002aa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ab0:	46c0      	nop			; (mov r8, r8)
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	b002      	add	sp, #8
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ac0:	46c0      	nop			; (mov r8, r8)
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b002      	add	sp, #8
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ad0:	46c0      	nop			; (mov r8, r8)
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	b002      	add	sp, #8
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ae0:	46c0      	nop			; (mov r8, r8)
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b002      	add	sp, #8
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a2f      	ldr	r2, [pc, #188]	; (8002bb8 <TIM_Base_SetConfig+0xd0>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d003      	beq.n	8002b08 <TIM_Base_SetConfig+0x20>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a2e      	ldr	r2, [pc, #184]	; (8002bbc <TIM_Base_SetConfig+0xd4>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d108      	bne.n	8002b1a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2270      	movs	r2, #112	; 0x70
 8002b0c:	4393      	bics	r3, r2
 8002b0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a26      	ldr	r2, [pc, #152]	; (8002bb8 <TIM_Base_SetConfig+0xd0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d013      	beq.n	8002b4a <TIM_Base_SetConfig+0x62>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a25      	ldr	r2, [pc, #148]	; (8002bbc <TIM_Base_SetConfig+0xd4>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d00f      	beq.n	8002b4a <TIM_Base_SetConfig+0x62>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a24      	ldr	r2, [pc, #144]	; (8002bc0 <TIM_Base_SetConfig+0xd8>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d00b      	beq.n	8002b4a <TIM_Base_SetConfig+0x62>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a23      	ldr	r2, [pc, #140]	; (8002bc4 <TIM_Base_SetConfig+0xdc>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d007      	beq.n	8002b4a <TIM_Base_SetConfig+0x62>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a22      	ldr	r2, [pc, #136]	; (8002bc8 <TIM_Base_SetConfig+0xe0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d003      	beq.n	8002b4a <TIM_Base_SetConfig+0x62>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a21      	ldr	r2, [pc, #132]	; (8002bcc <TIM_Base_SetConfig+0xe4>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d108      	bne.n	8002b5c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	4a20      	ldr	r2, [pc, #128]	; (8002bd0 <TIM_Base_SetConfig+0xe8>)
 8002b4e:	4013      	ands	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2280      	movs	r2, #128	; 0x80
 8002b60:	4393      	bics	r3, r2
 8002b62:	001a      	movs	r2, r3
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a0c      	ldr	r2, [pc, #48]	; (8002bb8 <TIM_Base_SetConfig+0xd0>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d00b      	beq.n	8002ba2 <TIM_Base_SetConfig+0xba>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a0d      	ldr	r2, [pc, #52]	; (8002bc4 <TIM_Base_SetConfig+0xdc>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d007      	beq.n	8002ba2 <TIM_Base_SetConfig+0xba>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a0c      	ldr	r2, [pc, #48]	; (8002bc8 <TIM_Base_SetConfig+0xe0>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d003      	beq.n	8002ba2 <TIM_Base_SetConfig+0xba>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a0b      	ldr	r2, [pc, #44]	; (8002bcc <TIM_Base_SetConfig+0xe4>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d103      	bne.n	8002baa <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	691a      	ldr	r2, [r3, #16]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	615a      	str	r2, [r3, #20]
}
 8002bb0:	46c0      	nop			; (mov r8, r8)
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	b004      	add	sp, #16
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40012c00 	.word	0x40012c00
 8002bbc:	40000400 	.word	0x40000400
 8002bc0:	40002000 	.word	0x40002000
 8002bc4:	40014000 	.word	0x40014000
 8002bc8:	40014400 	.word	0x40014400
 8002bcc:	40014800 	.word	0x40014800
 8002bd0:	fffffcff 	.word	0xfffffcff

08002bd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	2201      	movs	r2, #1
 8002bec:	4393      	bics	r3, r2
 8002bee:	001a      	movs	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	22f0      	movs	r2, #240	; 0xf0
 8002bfe:	4393      	bics	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	220a      	movs	r2, #10
 8002c10:	4393      	bics	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	621a      	str	r2, [r3, #32]
}
 8002c28:	46c0      	nop			; (mov r8, r8)
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	b006      	add	sp, #24
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	2210      	movs	r2, #16
 8002c42:	4393      	bics	r3, r2
 8002c44:	001a      	movs	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	4a0d      	ldr	r2, [pc, #52]	; (8002c90 <TIM_TI2_ConfigInputStage+0x60>)
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	031b      	lsls	r3, r3, #12
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	22a0      	movs	r2, #160	; 0xa0
 8002c6c:	4393      	bics	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	621a      	str	r2, [r3, #32]
}
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b006      	add	sp, #24
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	ffff0fff 	.word	0xffff0fff

08002c94 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2270      	movs	r2, #112	; 0x70
 8002ca8:	4393      	bics	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	2207      	movs	r2, #7
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	609a      	str	r2, [r3, #8]
}
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	b004      	add	sp, #16
 8002cc4:	bd80      	pop	{r7, pc}
	...

08002cc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
 8002cd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	4a09      	ldr	r2, [pc, #36]	; (8002d04 <TIM_ETR_SetConfig+0x3c>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	021a      	lsls	r2, r3, #8
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	431a      	orrs	r2, r3
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	609a      	str	r2, [r3, #8]
}
 8002cfc:	46c0      	nop			; (mov r8, r8)
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	b006      	add	sp, #24
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	ffff00ff 	.word	0xffff00ff

08002d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	223c      	movs	r2, #60	; 0x3c
 8002d16:	5c9b      	ldrb	r3, [r3, r2]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e041      	b.n	8002da4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	223c      	movs	r2, #60	; 0x3c
 8002d24:	2101      	movs	r1, #1
 8002d26:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	223d      	movs	r2, #61	; 0x3d
 8002d2c:	2102      	movs	r1, #2
 8002d2e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2270      	movs	r2, #112	; 0x70
 8002d44:	4393      	bics	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a13      	ldr	r2, [pc, #76]	; (8002dac <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d009      	beq.n	8002d78 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a11      	ldr	r2, [pc, #68]	; (8002db0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d004      	beq.n	8002d78 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a10      	ldr	r2, [pc, #64]	; (8002db4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d10c      	bne.n	8002d92 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2280      	movs	r2, #128	; 0x80
 8002d7c:	4393      	bics	r3, r2
 8002d7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	223d      	movs	r2, #61	; 0x3d
 8002d96:	2101      	movs	r1, #1
 8002d98:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	223c      	movs	r2, #60	; 0x3c
 8002d9e:	2100      	movs	r1, #0
 8002da0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	0018      	movs	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b004      	add	sp, #16
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40012c00 	.word	0x40012c00
 8002db0:	40000400 	.word	0x40000400
 8002db4:	40014000 	.word	0x40014000

08002db8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dc0:	46c0      	nop			; (mov r8, r8)
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	b002      	add	sp, #8
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dd0:	46c0      	nop			; (mov r8, r8)
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b002      	add	sp, #8
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e044      	b.n	8002e74 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d107      	bne.n	8002e02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2278      	movs	r2, #120	; 0x78
 8002df6:	2100      	movs	r1, #0
 8002df8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f7fd fe8d 	bl	8000b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2224      	movs	r2, #36	; 0x24
 8002e06:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2101      	movs	r1, #1
 8002e14:	438a      	bics	r2, r1
 8002e16:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f000 fc1c 	bl	8003658 <UART_SetConfig>
 8002e20:	0003      	movs	r3, r0
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e024      	b.n	8002e74 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	0018      	movs	r0, r3
 8002e36:	f000 fd4f 	bl	80038d8 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	490d      	ldr	r1, [pc, #52]	; (8002e7c <HAL_UART_Init+0xa4>)
 8002e46:	400a      	ands	r2, r1
 8002e48:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2108      	movs	r1, #8
 8002e56:	438a      	bics	r2, r1
 8002e58:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2101      	movs	r1, #1
 8002e66:	430a      	orrs	r2, r1
 8002e68:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f000 fde7 	bl	8003a40 <UART_CheckIdleState>
 8002e72:	0003      	movs	r3, r0
}
 8002e74:	0018      	movs	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	b002      	add	sp, #8
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	fffff7ff 	.word	0xfffff7ff

08002e80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08a      	sub	sp, #40	; 0x28
 8002e84:	af02      	add	r7, sp, #8
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	603b      	str	r3, [r7, #0]
 8002e8c:	1dbb      	adds	r3, r7, #6
 8002e8e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e94:	2b20      	cmp	r3, #32
 8002e96:	d000      	beq.n	8002e9a <HAL_UART_Transmit+0x1a>
 8002e98:	e08d      	b.n	8002fb6 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <HAL_UART_Transmit+0x28>
 8002ea0:	1dbb      	adds	r3, r7, #6
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e085      	b.n	8002fb8 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	2380      	movs	r3, #128	; 0x80
 8002eb2:	015b      	lsls	r3, r3, #5
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d109      	bne.n	8002ecc <HAL_UART_Transmit+0x4c>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d105      	bne.n	8002ecc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d001      	beq.n	8002ecc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e075      	b.n	8002fb8 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2284      	movs	r2, #132	; 0x84
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2221      	movs	r2, #33	; 0x21
 8002ed8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eda:	f7fd ff2f 	bl	8000d3c <HAL_GetTick>
 8002ede:	0003      	movs	r3, r0
 8002ee0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	1dba      	adds	r2, r7, #6
 8002ee6:	2150      	movs	r1, #80	; 0x50
 8002ee8:	8812      	ldrh	r2, [r2, #0]
 8002eea:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	1dba      	adds	r2, r7, #6
 8002ef0:	2152      	movs	r1, #82	; 0x52
 8002ef2:	8812      	ldrh	r2, [r2, #0]
 8002ef4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	2380      	movs	r3, #128	; 0x80
 8002efc:	015b      	lsls	r3, r3, #5
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d108      	bne.n	8002f14 <HAL_UART_Transmit+0x94>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d104      	bne.n	8002f14 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	61bb      	str	r3, [r7, #24]
 8002f12:	e003      	b.n	8002f1c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f1c:	e030      	b.n	8002f80 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	0013      	movs	r3, r2
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2180      	movs	r1, #128	; 0x80
 8002f2c:	f000 fe30 	bl	8003b90 <UART_WaitOnFlagUntilTimeout>
 8002f30:	1e03      	subs	r3, r0, #0
 8002f32:	d004      	beq.n	8002f3e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2220      	movs	r2, #32
 8002f38:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e03c      	b.n	8002fb8 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10b      	bne.n	8002f5c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	881a      	ldrh	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	05d2      	lsls	r2, r2, #23
 8002f4e:	0dd2      	lsrs	r2, r2, #23
 8002f50:	b292      	uxth	r2, r2
 8002f52:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	3302      	adds	r3, #2
 8002f58:	61bb      	str	r3, [r7, #24]
 8002f5a:	e008      	b.n	8002f6e <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	781a      	ldrb	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	b292      	uxth	r2, r2
 8002f66:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2252      	movs	r2, #82	; 0x52
 8002f72:	5a9b      	ldrh	r3, [r3, r2]
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b299      	uxth	r1, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2252      	movs	r2, #82	; 0x52
 8002f7e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2252      	movs	r2, #82	; 0x52
 8002f84:	5a9b      	ldrh	r3, [r3, r2]
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1c8      	bne.n	8002f1e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	0013      	movs	r3, r2
 8002f96:	2200      	movs	r2, #0
 8002f98:	2140      	movs	r1, #64	; 0x40
 8002f9a:	f000 fdf9 	bl	8003b90 <UART_WaitOnFlagUntilTimeout>
 8002f9e:	1e03      	subs	r3, r0, #0
 8002fa0:	d004      	beq.n	8002fac <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e005      	b.n	8002fb8 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	e000      	b.n	8002fb8 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8002fb6:	2302      	movs	r3, #2
  }
}
 8002fb8:	0018      	movs	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b008      	add	sp, #32
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b088      	sub	sp, #32
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	1dbb      	adds	r3, r7, #6
 8002fcc:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fd2:	2b20      	cmp	r3, #32
 8002fd4:	d15b      	bne.n	800308e <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <HAL_UART_Transmit_IT+0x24>
 8002fdc:	1dbb      	adds	r3, r7, #6
 8002fde:	881b      	ldrh	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e053      	b.n	8003090 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	2380      	movs	r3, #128	; 0x80
 8002fee:	015b      	lsls	r3, r3, #5
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d109      	bne.n	8003008 <HAL_UART_Transmit_IT+0x48>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d105      	bne.n	8003008 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2201      	movs	r2, #1
 8003000:	4013      	ands	r3, r2
 8003002:	d001      	beq.n	8003008 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e043      	b.n	8003090 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1dba      	adds	r2, r7, #6
 8003012:	2150      	movs	r1, #80	; 0x50
 8003014:	8812      	ldrh	r2, [r2, #0]
 8003016:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	1dba      	adds	r2, r7, #6
 800301c:	2152      	movs	r1, #82	; 0x52
 800301e:	8812      	ldrh	r2, [r2, #0]
 8003020:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2284      	movs	r2, #132	; 0x84
 800302c:	2100      	movs	r1, #0
 800302e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2221      	movs	r2, #33	; 0x21
 8003034:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	2380      	movs	r3, #128	; 0x80
 800303c:	015b      	lsls	r3, r3, #5
 800303e:	429a      	cmp	r2, r3
 8003040:	d107      	bne.n	8003052 <HAL_UART_Transmit_IT+0x92>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d103      	bne.n	8003052 <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4a12      	ldr	r2, [pc, #72]	; (8003098 <HAL_UART_Transmit_IT+0xd8>)
 800304e:	66da      	str	r2, [r3, #108]	; 0x6c
 8003050:	e002      	b.n	8003058 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4a11      	ldr	r2, [pc, #68]	; (800309c <HAL_UART_Transmit_IT+0xdc>)
 8003056:	66da      	str	r2, [r3, #108]	; 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003058:	f3ef 8310 	mrs	r3, PRIMASK
 800305c:	613b      	str	r3, [r7, #16]
  return(result);
 800305e:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003060:	61fb      	str	r3, [r7, #28]
 8003062:	2301      	movs	r3, #1
 8003064:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f383 8810 	msr	PRIMASK, r3
}
 800306c:	46c0      	nop			; (mov r8, r8)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2180      	movs	r1, #128	; 0x80
 800307a:	430a      	orrs	r2, r1
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	f383 8810 	msr	PRIMASK, r3
}
 8003088:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 800308a:	2300      	movs	r3, #0
 800308c:	e000      	b.n	8003090 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 800308e:	2302      	movs	r3, #2
  }
}
 8003090:	0018      	movs	r0, r3
 8003092:	46bd      	mov	sp, r7
 8003094:	b008      	add	sp, #32
 8003096:	bd80      	pop	{r7, pc}
 8003098:	08003e0f 	.word	0x08003e0f
 800309c:	08003d5b 	.word	0x08003d5b

080030a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030a0:	b590      	push	{r4, r7, lr}
 80030a2:	b0ab      	sub	sp, #172	; 0xac
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	22a4      	movs	r2, #164	; 0xa4
 80030b0:	18b9      	adds	r1, r7, r2
 80030b2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	20a0      	movs	r0, #160	; 0xa0
 80030bc:	1839      	adds	r1, r7, r0
 80030be:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	219c      	movs	r1, #156	; 0x9c
 80030c8:	1879      	adds	r1, r7, r1
 80030ca:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80030cc:	0011      	movs	r1, r2
 80030ce:	18bb      	adds	r3, r7, r2
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a99      	ldr	r2, [pc, #612]	; (8003338 <HAL_UART_IRQHandler+0x298>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	2298      	movs	r2, #152	; 0x98
 80030d8:	18bc      	adds	r4, r7, r2
 80030da:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80030dc:	18bb      	adds	r3, r7, r2
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d114      	bne.n	800310e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80030e4:	187b      	adds	r3, r7, r1
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2220      	movs	r2, #32
 80030ea:	4013      	ands	r3, r2
 80030ec:	d00f      	beq.n	800310e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030ee:	183b      	adds	r3, r7, r0
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2220      	movs	r2, #32
 80030f4:	4013      	ands	r3, r2
 80030f6:	d00a      	beq.n	800310e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d100      	bne.n	8003102 <HAL_UART_IRQHandler+0x62>
 8003100:	e286      	b.n	8003610 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	0010      	movs	r0, r2
 800310a:	4798      	blx	r3
      }
      return;
 800310c:	e280      	b.n	8003610 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800310e:	2398      	movs	r3, #152	; 0x98
 8003110:	18fb      	adds	r3, r7, r3
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d100      	bne.n	800311a <HAL_UART_IRQHandler+0x7a>
 8003118:	e114      	b.n	8003344 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800311a:	239c      	movs	r3, #156	; 0x9c
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2201      	movs	r2, #1
 8003122:	4013      	ands	r3, r2
 8003124:	d106      	bne.n	8003134 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003126:	23a0      	movs	r3, #160	; 0xa0
 8003128:	18fb      	adds	r3, r7, r3
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a83      	ldr	r2, [pc, #524]	; (800333c <HAL_UART_IRQHandler+0x29c>)
 800312e:	4013      	ands	r3, r2
 8003130:	d100      	bne.n	8003134 <HAL_UART_IRQHandler+0x94>
 8003132:	e107      	b.n	8003344 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003134:	23a4      	movs	r3, #164	; 0xa4
 8003136:	18fb      	adds	r3, r7, r3
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2201      	movs	r2, #1
 800313c:	4013      	ands	r3, r2
 800313e:	d012      	beq.n	8003166 <HAL_UART_IRQHandler+0xc6>
 8003140:	23a0      	movs	r3, #160	; 0xa0
 8003142:	18fb      	adds	r3, r7, r3
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	2380      	movs	r3, #128	; 0x80
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	4013      	ands	r3, r2
 800314c:	d00b      	beq.n	8003166 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2201      	movs	r2, #1
 8003154:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2284      	movs	r2, #132	; 0x84
 800315a:	589b      	ldr	r3, [r3, r2]
 800315c:	2201      	movs	r2, #1
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2184      	movs	r1, #132	; 0x84
 8003164:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003166:	23a4      	movs	r3, #164	; 0xa4
 8003168:	18fb      	adds	r3, r7, r3
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2202      	movs	r2, #2
 800316e:	4013      	ands	r3, r2
 8003170:	d011      	beq.n	8003196 <HAL_UART_IRQHandler+0xf6>
 8003172:	239c      	movs	r3, #156	; 0x9c
 8003174:	18fb      	adds	r3, r7, r3
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2201      	movs	r2, #1
 800317a:	4013      	ands	r3, r2
 800317c:	d00b      	beq.n	8003196 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2202      	movs	r2, #2
 8003184:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2284      	movs	r2, #132	; 0x84
 800318a:	589b      	ldr	r3, [r3, r2]
 800318c:	2204      	movs	r2, #4
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2184      	movs	r1, #132	; 0x84
 8003194:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003196:	23a4      	movs	r3, #164	; 0xa4
 8003198:	18fb      	adds	r3, r7, r3
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2204      	movs	r2, #4
 800319e:	4013      	ands	r3, r2
 80031a0:	d011      	beq.n	80031c6 <HAL_UART_IRQHandler+0x126>
 80031a2:	239c      	movs	r3, #156	; 0x9c
 80031a4:	18fb      	adds	r3, r7, r3
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2201      	movs	r2, #1
 80031aa:	4013      	ands	r3, r2
 80031ac:	d00b      	beq.n	80031c6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2204      	movs	r2, #4
 80031b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2284      	movs	r2, #132	; 0x84
 80031ba:	589b      	ldr	r3, [r3, r2]
 80031bc:	2202      	movs	r2, #2
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2184      	movs	r1, #132	; 0x84
 80031c4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80031c6:	23a4      	movs	r3, #164	; 0xa4
 80031c8:	18fb      	adds	r3, r7, r3
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2208      	movs	r2, #8
 80031ce:	4013      	ands	r3, r2
 80031d0:	d017      	beq.n	8003202 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031d2:	23a0      	movs	r3, #160	; 0xa0
 80031d4:	18fb      	adds	r3, r7, r3
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2220      	movs	r2, #32
 80031da:	4013      	ands	r3, r2
 80031dc:	d105      	bne.n	80031ea <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80031de:	239c      	movs	r3, #156	; 0x9c
 80031e0:	18fb      	adds	r3, r7, r3
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2201      	movs	r2, #1
 80031e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031e8:	d00b      	beq.n	8003202 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2208      	movs	r2, #8
 80031f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2284      	movs	r2, #132	; 0x84
 80031f6:	589b      	ldr	r3, [r3, r2]
 80031f8:	2208      	movs	r2, #8
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2184      	movs	r1, #132	; 0x84
 8003200:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003202:	23a4      	movs	r3, #164	; 0xa4
 8003204:	18fb      	adds	r3, r7, r3
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	2380      	movs	r3, #128	; 0x80
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	4013      	ands	r3, r2
 800320e:	d013      	beq.n	8003238 <HAL_UART_IRQHandler+0x198>
 8003210:	23a0      	movs	r3, #160	; 0xa0
 8003212:	18fb      	adds	r3, r7, r3
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	2380      	movs	r3, #128	; 0x80
 8003218:	04db      	lsls	r3, r3, #19
 800321a:	4013      	ands	r3, r2
 800321c:	d00c      	beq.n	8003238 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2280      	movs	r2, #128	; 0x80
 8003224:	0112      	lsls	r2, r2, #4
 8003226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2284      	movs	r2, #132	; 0x84
 800322c:	589b      	ldr	r3, [r3, r2]
 800322e:	2220      	movs	r2, #32
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2184      	movs	r1, #132	; 0x84
 8003236:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2284      	movs	r2, #132	; 0x84
 800323c:	589b      	ldr	r3, [r3, r2]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d100      	bne.n	8003244 <HAL_UART_IRQHandler+0x1a4>
 8003242:	e1e7      	b.n	8003614 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003244:	23a4      	movs	r3, #164	; 0xa4
 8003246:	18fb      	adds	r3, r7, r3
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2220      	movs	r2, #32
 800324c:	4013      	ands	r3, r2
 800324e:	d00e      	beq.n	800326e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003250:	23a0      	movs	r3, #160	; 0xa0
 8003252:	18fb      	adds	r3, r7, r3
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2220      	movs	r2, #32
 8003258:	4013      	ands	r3, r2
 800325a:	d008      	beq.n	800326e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003260:	2b00      	cmp	r3, #0
 8003262:	d004      	beq.n	800326e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	0010      	movs	r0, r2
 800326c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2284      	movs	r2, #132	; 0x84
 8003272:	589b      	ldr	r3, [r3, r2]
 8003274:	2194      	movs	r1, #148	; 0x94
 8003276:	187a      	adds	r2, r7, r1
 8003278:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2240      	movs	r2, #64	; 0x40
 8003282:	4013      	ands	r3, r2
 8003284:	2b40      	cmp	r3, #64	; 0x40
 8003286:	d004      	beq.n	8003292 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003288:	187b      	adds	r3, r7, r1
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2228      	movs	r2, #40	; 0x28
 800328e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003290:	d047      	beq.n	8003322 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	0018      	movs	r0, r3
 8003296:	f000 fce5 	bl	8003c64 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2240      	movs	r2, #64	; 0x40
 80032a2:	4013      	ands	r3, r2
 80032a4:	2b40      	cmp	r3, #64	; 0x40
 80032a6:	d137      	bne.n	8003318 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032a8:	f3ef 8310 	mrs	r3, PRIMASK
 80032ac:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80032ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032b0:	2090      	movs	r0, #144	; 0x90
 80032b2:	183a      	adds	r2, r7, r0
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	2301      	movs	r3, #1
 80032b8:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032bc:	f383 8810 	msr	PRIMASK, r3
}
 80032c0:	46c0      	nop			; (mov r8, r8)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2140      	movs	r1, #64	; 0x40
 80032ce:	438a      	bics	r2, r1
 80032d0:	609a      	str	r2, [r3, #8]
 80032d2:	183b      	adds	r3, r7, r0
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032da:	f383 8810 	msr	PRIMASK, r3
}
 80032de:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d012      	beq.n	800330e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ec:	4a14      	ldr	r2, [pc, #80]	; (8003340 <HAL_UART_IRQHandler+0x2a0>)
 80032ee:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f4:	0018      	movs	r0, r3
 80032f6:	f7fd fe41 	bl	8000f7c <HAL_DMA_Abort_IT>
 80032fa:	1e03      	subs	r3, r0, #0
 80032fc:	d01a      	beq.n	8003334 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003302:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003308:	0018      	movs	r0, r3
 800330a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800330c:	e012      	b.n	8003334 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	0018      	movs	r0, r3
 8003312:	f000 f98d 	bl	8003630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003316:	e00d      	b.n	8003334 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	0018      	movs	r0, r3
 800331c:	f000 f988 	bl	8003630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003320:	e008      	b.n	8003334 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	0018      	movs	r0, r3
 8003326:	f000 f983 	bl	8003630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2284      	movs	r2, #132	; 0x84
 800332e:	2100      	movs	r1, #0
 8003330:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003332:	e16f      	b.n	8003614 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003334:	46c0      	nop			; (mov r8, r8)
    return;
 8003336:	e16d      	b.n	8003614 <HAL_UART_IRQHandler+0x574>
 8003338:	0000080f 	.word	0x0000080f
 800333c:	04000120 	.word	0x04000120
 8003340:	08003d2d 	.word	0x08003d2d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003348:	2b01      	cmp	r3, #1
 800334a:	d000      	beq.n	800334e <HAL_UART_IRQHandler+0x2ae>
 800334c:	e139      	b.n	80035c2 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800334e:	23a4      	movs	r3, #164	; 0xa4
 8003350:	18fb      	adds	r3, r7, r3
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2210      	movs	r2, #16
 8003356:	4013      	ands	r3, r2
 8003358:	d100      	bne.n	800335c <HAL_UART_IRQHandler+0x2bc>
 800335a:	e132      	b.n	80035c2 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800335c:	23a0      	movs	r3, #160	; 0xa0
 800335e:	18fb      	adds	r3, r7, r3
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2210      	movs	r2, #16
 8003364:	4013      	ands	r3, r2
 8003366:	d100      	bne.n	800336a <HAL_UART_IRQHandler+0x2ca>
 8003368:	e12b      	b.n	80035c2 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2210      	movs	r2, #16
 8003370:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	2240      	movs	r2, #64	; 0x40
 800337a:	4013      	ands	r3, r2
 800337c:	2b40      	cmp	r3, #64	; 0x40
 800337e:	d000      	beq.n	8003382 <HAL_UART_IRQHandler+0x2e2>
 8003380:	e09f      	b.n	80034c2 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	217e      	movs	r1, #126	; 0x7e
 800338c:	187b      	adds	r3, r7, r1
 800338e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003390:	187b      	adds	r3, r7, r1
 8003392:	881b      	ldrh	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d100      	bne.n	800339a <HAL_UART_IRQHandler+0x2fa>
 8003398:	e13e      	b.n	8003618 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2258      	movs	r2, #88	; 0x58
 800339e:	5a9b      	ldrh	r3, [r3, r2]
 80033a0:	187a      	adds	r2, r7, r1
 80033a2:	8812      	ldrh	r2, [r2, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d300      	bcc.n	80033aa <HAL_UART_IRQHandler+0x30a>
 80033a8:	e136      	b.n	8003618 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	187a      	adds	r2, r7, r1
 80033ae:	215a      	movs	r1, #90	; 0x5a
 80033b0:	8812      	ldrh	r2, [r2, #0]
 80033b2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	d06f      	beq.n	800349e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033be:	f3ef 8310 	mrs	r3, PRIMASK
 80033c2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80033c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80033c8:	2301      	movs	r3, #1
 80033ca:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ce:	f383 8810 	msr	PRIMASK, r3
}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4992      	ldr	r1, [pc, #584]	; (8003628 <HAL_UART_IRQHandler+0x588>)
 80033e0:	400a      	ands	r2, r1
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033e6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ea:	f383 8810 	msr	PRIMASK, r3
}
 80033ee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033f0:	f3ef 8310 	mrs	r3, PRIMASK
 80033f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80033f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f8:	677b      	str	r3, [r7, #116]	; 0x74
 80033fa:	2301      	movs	r3, #1
 80033fc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003400:	f383 8810 	msr	PRIMASK, r3
}
 8003404:	46c0      	nop			; (mov r8, r8)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2101      	movs	r1, #1
 8003412:	438a      	bics	r2, r1
 8003414:	609a      	str	r2, [r3, #8]
 8003416:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003418:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800341a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800341c:	f383 8810 	msr	PRIMASK, r3
}
 8003420:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003422:	f3ef 8310 	mrs	r3, PRIMASK
 8003426:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003428:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800342a:	673b      	str	r3, [r7, #112]	; 0x70
 800342c:	2301      	movs	r3, #1
 800342e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003432:	f383 8810 	msr	PRIMASK, r3
}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2140      	movs	r1, #64	; 0x40
 8003444:	438a      	bics	r2, r1
 8003446:	609a      	str	r2, [r3, #8]
 8003448:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800344a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800344e:	f383 8810 	msr	PRIMASK, r3
}
 8003452:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2280      	movs	r2, #128	; 0x80
 8003458:	2120      	movs	r1, #32
 800345a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003462:	f3ef 8310 	mrs	r3, PRIMASK
 8003466:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003468:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800346a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800346c:	2301      	movs	r3, #1
 800346e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003470:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003472:	f383 8810 	msr	PRIMASK, r3
}
 8003476:	46c0      	nop			; (mov r8, r8)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2110      	movs	r1, #16
 8003484:	438a      	bics	r2, r1
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800348a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800348c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800348e:	f383 8810 	msr	PRIMASK, r3
}
 8003492:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003498:	0018      	movs	r0, r3
 800349a:	f7fd fd37 	bl	8000f0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2202      	movs	r2, #2
 80034a2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2258      	movs	r2, #88	; 0x58
 80034a8:	5a9a      	ldrh	r2, [r3, r2]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	215a      	movs	r1, #90	; 0x5a
 80034ae:	5a5b      	ldrh	r3, [r3, r1]
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	0011      	movs	r1, r2
 80034ba:	0018      	movs	r0, r3
 80034bc:	f000 f8c0 	bl	8003640 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034c0:	e0aa      	b.n	8003618 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2258      	movs	r2, #88	; 0x58
 80034c6:	5a99      	ldrh	r1, [r3, r2]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	225a      	movs	r2, #90	; 0x5a
 80034cc:	5a9b      	ldrh	r3, [r3, r2]
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	208e      	movs	r0, #142	; 0x8e
 80034d2:	183b      	adds	r3, r7, r0
 80034d4:	1a8a      	subs	r2, r1, r2
 80034d6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	225a      	movs	r2, #90	; 0x5a
 80034dc:	5a9b      	ldrh	r3, [r3, r2]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d100      	bne.n	80034e6 <HAL_UART_IRQHandler+0x446>
 80034e4:	e09a      	b.n	800361c <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 80034e6:	183b      	adds	r3, r7, r0
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d100      	bne.n	80034f0 <HAL_UART_IRQHandler+0x450>
 80034ee:	e095      	b.n	800361c <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034f0:	f3ef 8310 	mrs	r3, PRIMASK
 80034f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80034f6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034f8:	2488      	movs	r4, #136	; 0x88
 80034fa:	193a      	adds	r2, r7, r4
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	2301      	movs	r3, #1
 8003500:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f383 8810 	msr	PRIMASK, r3
}
 8003508:	46c0      	nop			; (mov r8, r8)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4945      	ldr	r1, [pc, #276]	; (800362c <HAL_UART_IRQHandler+0x58c>)
 8003516:	400a      	ands	r2, r1
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	193b      	adds	r3, r7, r4
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f383 8810 	msr	PRIMASK, r3
}
 8003526:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003528:	f3ef 8310 	mrs	r3, PRIMASK
 800352c:	61bb      	str	r3, [r7, #24]
  return(result);
 800352e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003530:	2484      	movs	r4, #132	; 0x84
 8003532:	193a      	adds	r2, r7, r4
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	2301      	movs	r3, #1
 8003538:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	f383 8810 	msr	PRIMASK, r3
}
 8003540:	46c0      	nop			; (mov r8, r8)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2101      	movs	r1, #1
 800354e:	438a      	bics	r2, r1
 8003550:	609a      	str	r2, [r3, #8]
 8003552:	193b      	adds	r3, r7, r4
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	f383 8810 	msr	PRIMASK, r3
}
 800355e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2280      	movs	r2, #128	; 0x80
 8003564:	2120      	movs	r1, #32
 8003566:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003574:	f3ef 8310 	mrs	r3, PRIMASK
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800357c:	2480      	movs	r4, #128	; 0x80
 800357e:	193a      	adds	r2, r7, r4
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	2301      	movs	r3, #1
 8003584:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003588:	f383 8810 	msr	PRIMASK, r3
}
 800358c:	46c0      	nop			; (mov r8, r8)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2110      	movs	r1, #16
 800359a:	438a      	bics	r2, r1
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	193b      	adds	r3, r7, r4
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a6:	f383 8810 	msr	PRIMASK, r3
}
 80035aa:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035b2:	183b      	adds	r3, r7, r0
 80035b4:	881a      	ldrh	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	0011      	movs	r1, r2
 80035ba:	0018      	movs	r0, r3
 80035bc:	f000 f840 	bl	8003640 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035c0:	e02c      	b.n	800361c <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80035c2:	23a4      	movs	r3, #164	; 0xa4
 80035c4:	18fb      	adds	r3, r7, r3
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2280      	movs	r2, #128	; 0x80
 80035ca:	4013      	ands	r3, r2
 80035cc:	d00f      	beq.n	80035ee <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80035ce:	23a0      	movs	r3, #160	; 0xa0
 80035d0:	18fb      	adds	r3, r7, r3
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2280      	movs	r2, #128	; 0x80
 80035d6:	4013      	ands	r3, r2
 80035d8:	d009      	beq.n	80035ee <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d01e      	beq.n	8003620 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	0010      	movs	r0, r2
 80035ea:	4798      	blx	r3
    }
    return;
 80035ec:	e018      	b.n	8003620 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80035ee:	23a4      	movs	r3, #164	; 0xa4
 80035f0:	18fb      	adds	r3, r7, r3
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2240      	movs	r2, #64	; 0x40
 80035f6:	4013      	ands	r3, r2
 80035f8:	d013      	beq.n	8003622 <HAL_UART_IRQHandler+0x582>
 80035fa:	23a0      	movs	r3, #160	; 0xa0
 80035fc:	18fb      	adds	r3, r7, r3
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2240      	movs	r2, #64	; 0x40
 8003602:	4013      	ands	r3, r2
 8003604:	d00d      	beq.n	8003622 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	0018      	movs	r0, r3
 800360a:	f000 fc5e 	bl	8003eca <UART_EndTransmit_IT>
    return;
 800360e:	e008      	b.n	8003622 <HAL_UART_IRQHandler+0x582>
      return;
 8003610:	46c0      	nop			; (mov r8, r8)
 8003612:	e006      	b.n	8003622 <HAL_UART_IRQHandler+0x582>
    return;
 8003614:	46c0      	nop			; (mov r8, r8)
 8003616:	e004      	b.n	8003622 <HAL_UART_IRQHandler+0x582>
      return;
 8003618:	46c0      	nop			; (mov r8, r8)
 800361a:	e002      	b.n	8003622 <HAL_UART_IRQHandler+0x582>
      return;
 800361c:	46c0      	nop			; (mov r8, r8)
 800361e:	e000      	b.n	8003622 <HAL_UART_IRQHandler+0x582>
    return;
 8003620:	46c0      	nop			; (mov r8, r8)
  }

}
 8003622:	46bd      	mov	sp, r7
 8003624:	b02b      	add	sp, #172	; 0xac
 8003626:	bd90      	pop	{r4, r7, pc}
 8003628:	fffffeff 	.word	0xfffffeff
 800362c:	fffffedf 	.word	0xfffffedf

08003630 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003638:	46c0      	nop			; (mov r8, r8)
 800363a:	46bd      	mov	sp, r7
 800363c:	b002      	add	sp, #8
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	000a      	movs	r2, r1
 800364a:	1cbb      	adds	r3, r7, #2
 800364c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	46bd      	mov	sp, r7
 8003652:	b002      	add	sp, #8
 8003654:	bd80      	pop	{r7, pc}
	...

08003658 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b088      	sub	sp, #32
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003660:	231e      	movs	r3, #30
 8003662:	18fb      	adds	r3, r7, r3
 8003664:	2200      	movs	r2, #0
 8003666:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	431a      	orrs	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	4313      	orrs	r3, r2
 800367e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a8d      	ldr	r2, [pc, #564]	; (80038bc <UART_SetConfig+0x264>)
 8003688:	4013      	ands	r3, r2
 800368a:	0019      	movs	r1, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	430a      	orrs	r2, r1
 8003694:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	4a88      	ldr	r2, [pc, #544]	; (80038c0 <UART_SetConfig+0x268>)
 800369e:	4013      	ands	r3, r2
 80036a0:	0019      	movs	r1, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	4a7f      	ldr	r2, [pc, #508]	; (80038c4 <UART_SetConfig+0x26c>)
 80036c6:	4013      	ands	r3, r2
 80036c8:	0019      	movs	r1, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a7b      	ldr	r2, [pc, #492]	; (80038c8 <UART_SetConfig+0x270>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d127      	bne.n	800372e <UART_SetConfig+0xd6>
 80036de:	4b7b      	ldr	r3, [pc, #492]	; (80038cc <UART_SetConfig+0x274>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	2203      	movs	r2, #3
 80036e4:	4013      	ands	r3, r2
 80036e6:	2b03      	cmp	r3, #3
 80036e8:	d00d      	beq.n	8003706 <UART_SetConfig+0xae>
 80036ea:	d81b      	bhi.n	8003724 <UART_SetConfig+0xcc>
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d014      	beq.n	800371a <UART_SetConfig+0xc2>
 80036f0:	d818      	bhi.n	8003724 <UART_SetConfig+0xcc>
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <UART_SetConfig+0xa4>
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d00a      	beq.n	8003710 <UART_SetConfig+0xb8>
 80036fa:	e013      	b.n	8003724 <UART_SetConfig+0xcc>
 80036fc:	231f      	movs	r3, #31
 80036fe:	18fb      	adds	r3, r7, r3
 8003700:	2200      	movs	r2, #0
 8003702:	701a      	strb	r2, [r3, #0]
 8003704:	e021      	b.n	800374a <UART_SetConfig+0xf2>
 8003706:	231f      	movs	r3, #31
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2202      	movs	r2, #2
 800370c:	701a      	strb	r2, [r3, #0]
 800370e:	e01c      	b.n	800374a <UART_SetConfig+0xf2>
 8003710:	231f      	movs	r3, #31
 8003712:	18fb      	adds	r3, r7, r3
 8003714:	2204      	movs	r2, #4
 8003716:	701a      	strb	r2, [r3, #0]
 8003718:	e017      	b.n	800374a <UART_SetConfig+0xf2>
 800371a:	231f      	movs	r3, #31
 800371c:	18fb      	adds	r3, r7, r3
 800371e:	2208      	movs	r2, #8
 8003720:	701a      	strb	r2, [r3, #0]
 8003722:	e012      	b.n	800374a <UART_SetConfig+0xf2>
 8003724:	231f      	movs	r3, #31
 8003726:	18fb      	adds	r3, r7, r3
 8003728:	2210      	movs	r2, #16
 800372a:	701a      	strb	r2, [r3, #0]
 800372c:	e00d      	b.n	800374a <UART_SetConfig+0xf2>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a67      	ldr	r2, [pc, #412]	; (80038d0 <UART_SetConfig+0x278>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d104      	bne.n	8003742 <UART_SetConfig+0xea>
 8003738:	231f      	movs	r3, #31
 800373a:	18fb      	adds	r3, r7, r3
 800373c:	2200      	movs	r2, #0
 800373e:	701a      	strb	r2, [r3, #0]
 8003740:	e003      	b.n	800374a <UART_SetConfig+0xf2>
 8003742:	231f      	movs	r3, #31
 8003744:	18fb      	adds	r3, r7, r3
 8003746:	2210      	movs	r2, #16
 8003748:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69da      	ldr	r2, [r3, #28]
 800374e:	2380      	movs	r3, #128	; 0x80
 8003750:	021b      	lsls	r3, r3, #8
 8003752:	429a      	cmp	r2, r3
 8003754:	d15c      	bne.n	8003810 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8003756:	231f      	movs	r3, #31
 8003758:	18fb      	adds	r3, r7, r3
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b08      	cmp	r3, #8
 800375e:	d015      	beq.n	800378c <UART_SetConfig+0x134>
 8003760:	dc18      	bgt.n	8003794 <UART_SetConfig+0x13c>
 8003762:	2b04      	cmp	r3, #4
 8003764:	d00d      	beq.n	8003782 <UART_SetConfig+0x12a>
 8003766:	dc15      	bgt.n	8003794 <UART_SetConfig+0x13c>
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <UART_SetConfig+0x11a>
 800376c:	2b02      	cmp	r3, #2
 800376e:	d005      	beq.n	800377c <UART_SetConfig+0x124>
 8003770:	e010      	b.n	8003794 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003772:	f7fe fa1f 	bl	8001bb4 <HAL_RCC_GetPCLK1Freq>
 8003776:	0003      	movs	r3, r0
 8003778:	61bb      	str	r3, [r7, #24]
        break;
 800377a:	e012      	b.n	80037a2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800377c:	4b55      	ldr	r3, [pc, #340]	; (80038d4 <UART_SetConfig+0x27c>)
 800377e:	61bb      	str	r3, [r7, #24]
        break;
 8003780:	e00f      	b.n	80037a2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003782:	f7fe f9b7 	bl	8001af4 <HAL_RCC_GetSysClockFreq>
 8003786:	0003      	movs	r3, r0
 8003788:	61bb      	str	r3, [r7, #24]
        break;
 800378a:	e00a      	b.n	80037a2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800378c:	2380      	movs	r3, #128	; 0x80
 800378e:	021b      	lsls	r3, r3, #8
 8003790:	61bb      	str	r3, [r7, #24]
        break;
 8003792:	e006      	b.n	80037a2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003798:	231e      	movs	r3, #30
 800379a:	18fb      	adds	r3, r7, r3
 800379c:	2201      	movs	r2, #1
 800379e:	701a      	strb	r2, [r3, #0]
        break;
 80037a0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d100      	bne.n	80037aa <UART_SetConfig+0x152>
 80037a8:	e07a      	b.n	80038a0 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	005a      	lsls	r2, r3, #1
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	085b      	lsrs	r3, r3, #1
 80037b4:	18d2      	adds	r2, r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	0019      	movs	r1, r3
 80037bc:	0010      	movs	r0, r2
 80037be:	f7fc fca3 	bl	8000108 <__udivsi3>
 80037c2:	0003      	movs	r3, r0
 80037c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	2b0f      	cmp	r3, #15
 80037ca:	d91c      	bls.n	8003806 <UART_SetConfig+0x1ae>
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	2380      	movs	r3, #128	; 0x80
 80037d0:	025b      	lsls	r3, r3, #9
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d217      	bcs.n	8003806 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	b29a      	uxth	r2, r3
 80037da:	200e      	movs	r0, #14
 80037dc:	183b      	adds	r3, r7, r0
 80037de:	210f      	movs	r1, #15
 80037e0:	438a      	bics	r2, r1
 80037e2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	085b      	lsrs	r3, r3, #1
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	2207      	movs	r2, #7
 80037ec:	4013      	ands	r3, r2
 80037ee:	b299      	uxth	r1, r3
 80037f0:	183b      	adds	r3, r7, r0
 80037f2:	183a      	adds	r2, r7, r0
 80037f4:	8812      	ldrh	r2, [r2, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	183a      	adds	r2, r7, r0
 8003800:	8812      	ldrh	r2, [r2, #0]
 8003802:	60da      	str	r2, [r3, #12]
 8003804:	e04c      	b.n	80038a0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003806:	231e      	movs	r3, #30
 8003808:	18fb      	adds	r3, r7, r3
 800380a:	2201      	movs	r2, #1
 800380c:	701a      	strb	r2, [r3, #0]
 800380e:	e047      	b.n	80038a0 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003810:	231f      	movs	r3, #31
 8003812:	18fb      	adds	r3, r7, r3
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2b08      	cmp	r3, #8
 8003818:	d015      	beq.n	8003846 <UART_SetConfig+0x1ee>
 800381a:	dc18      	bgt.n	800384e <UART_SetConfig+0x1f6>
 800381c:	2b04      	cmp	r3, #4
 800381e:	d00d      	beq.n	800383c <UART_SetConfig+0x1e4>
 8003820:	dc15      	bgt.n	800384e <UART_SetConfig+0x1f6>
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <UART_SetConfig+0x1d4>
 8003826:	2b02      	cmp	r3, #2
 8003828:	d005      	beq.n	8003836 <UART_SetConfig+0x1de>
 800382a:	e010      	b.n	800384e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800382c:	f7fe f9c2 	bl	8001bb4 <HAL_RCC_GetPCLK1Freq>
 8003830:	0003      	movs	r3, r0
 8003832:	61bb      	str	r3, [r7, #24]
        break;
 8003834:	e012      	b.n	800385c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003836:	4b27      	ldr	r3, [pc, #156]	; (80038d4 <UART_SetConfig+0x27c>)
 8003838:	61bb      	str	r3, [r7, #24]
        break;
 800383a:	e00f      	b.n	800385c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800383c:	f7fe f95a 	bl	8001af4 <HAL_RCC_GetSysClockFreq>
 8003840:	0003      	movs	r3, r0
 8003842:	61bb      	str	r3, [r7, #24]
        break;
 8003844:	e00a      	b.n	800385c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003846:	2380      	movs	r3, #128	; 0x80
 8003848:	021b      	lsls	r3, r3, #8
 800384a:	61bb      	str	r3, [r7, #24]
        break;
 800384c:	e006      	b.n	800385c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003852:	231e      	movs	r3, #30
 8003854:	18fb      	adds	r3, r7, r3
 8003856:	2201      	movs	r2, #1
 8003858:	701a      	strb	r2, [r3, #0]
        break;
 800385a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d01e      	beq.n	80038a0 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	085a      	lsrs	r2, r3, #1
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	18d2      	adds	r2, r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	0019      	movs	r1, r3
 8003872:	0010      	movs	r0, r2
 8003874:	f7fc fc48 	bl	8000108 <__udivsi3>
 8003878:	0003      	movs	r3, r0
 800387a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	2b0f      	cmp	r3, #15
 8003880:	d90a      	bls.n	8003898 <UART_SetConfig+0x240>
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	2380      	movs	r3, #128	; 0x80
 8003886:	025b      	lsls	r3, r3, #9
 8003888:	429a      	cmp	r2, r3
 800388a:	d205      	bcs.n	8003898 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	b29a      	uxth	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	60da      	str	r2, [r3, #12]
 8003896:	e003      	b.n	80038a0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003898:	231e      	movs	r3, #30
 800389a:	18fb      	adds	r3, r7, r3
 800389c:	2201      	movs	r2, #1
 800389e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80038ac:	231e      	movs	r3, #30
 80038ae:	18fb      	adds	r3, r7, r3
 80038b0:	781b      	ldrb	r3, [r3, #0]
}
 80038b2:	0018      	movs	r0, r3
 80038b4:	46bd      	mov	sp, r7
 80038b6:	b008      	add	sp, #32
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	46c0      	nop			; (mov r8, r8)
 80038bc:	ffff69f3 	.word	0xffff69f3
 80038c0:	ffffcfff 	.word	0xffffcfff
 80038c4:	fffff4ff 	.word	0xfffff4ff
 80038c8:	40013800 	.word	0x40013800
 80038cc:	40021000 	.word	0x40021000
 80038d0:	40004400 	.word	0x40004400
 80038d4:	007a1200 	.word	0x007a1200

080038d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	2201      	movs	r2, #1
 80038e6:	4013      	ands	r3, r2
 80038e8:	d00b      	beq.n	8003902 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	4a4a      	ldr	r2, [pc, #296]	; (8003a1c <UART_AdvFeatureConfig+0x144>)
 80038f2:	4013      	ands	r3, r2
 80038f4:	0019      	movs	r1, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	2202      	movs	r2, #2
 8003908:	4013      	ands	r3, r2
 800390a:	d00b      	beq.n	8003924 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	4a43      	ldr	r2, [pc, #268]	; (8003a20 <UART_AdvFeatureConfig+0x148>)
 8003914:	4013      	ands	r3, r2
 8003916:	0019      	movs	r1, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	2204      	movs	r2, #4
 800392a:	4013      	ands	r3, r2
 800392c:	d00b      	beq.n	8003946 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	4a3b      	ldr	r2, [pc, #236]	; (8003a24 <UART_AdvFeatureConfig+0x14c>)
 8003936:	4013      	ands	r3, r2
 8003938:	0019      	movs	r1, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	2208      	movs	r2, #8
 800394c:	4013      	ands	r3, r2
 800394e:	d00b      	beq.n	8003968 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	4a34      	ldr	r2, [pc, #208]	; (8003a28 <UART_AdvFeatureConfig+0x150>)
 8003958:	4013      	ands	r3, r2
 800395a:	0019      	movs	r1, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	2210      	movs	r2, #16
 800396e:	4013      	ands	r3, r2
 8003970:	d00b      	beq.n	800398a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	4a2c      	ldr	r2, [pc, #176]	; (8003a2c <UART_AdvFeatureConfig+0x154>)
 800397a:	4013      	ands	r3, r2
 800397c:	0019      	movs	r1, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	2220      	movs	r2, #32
 8003990:	4013      	ands	r3, r2
 8003992:	d00b      	beq.n	80039ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	4a25      	ldr	r2, [pc, #148]	; (8003a30 <UART_AdvFeatureConfig+0x158>)
 800399c:	4013      	ands	r3, r2
 800399e:	0019      	movs	r1, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	2240      	movs	r2, #64	; 0x40
 80039b2:	4013      	ands	r3, r2
 80039b4:	d01d      	beq.n	80039f2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	4a1d      	ldr	r2, [pc, #116]	; (8003a34 <UART_AdvFeatureConfig+0x15c>)
 80039be:	4013      	ands	r3, r2
 80039c0:	0019      	movs	r1, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039d2:	2380      	movs	r3, #128	; 0x80
 80039d4:	035b      	lsls	r3, r3, #13
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d10b      	bne.n	80039f2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	4a15      	ldr	r2, [pc, #84]	; (8003a38 <UART_AdvFeatureConfig+0x160>)
 80039e2:	4013      	ands	r3, r2
 80039e4:	0019      	movs	r1, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	2280      	movs	r2, #128	; 0x80
 80039f8:	4013      	ands	r3, r2
 80039fa:	d00b      	beq.n	8003a14 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	4a0e      	ldr	r2, [pc, #56]	; (8003a3c <UART_AdvFeatureConfig+0x164>)
 8003a04:	4013      	ands	r3, r2
 8003a06:	0019      	movs	r1, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	605a      	str	r2, [r3, #4]
  }
}
 8003a14:	46c0      	nop			; (mov r8, r8)
 8003a16:	46bd      	mov	sp, r7
 8003a18:	b002      	add	sp, #8
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	fffdffff 	.word	0xfffdffff
 8003a20:	fffeffff 	.word	0xfffeffff
 8003a24:	fffbffff 	.word	0xfffbffff
 8003a28:	ffff7fff 	.word	0xffff7fff
 8003a2c:	ffffefff 	.word	0xffffefff
 8003a30:	ffffdfff 	.word	0xffffdfff
 8003a34:	ffefffff 	.word	0xffefffff
 8003a38:	ff9fffff 	.word	0xff9fffff
 8003a3c:	fff7ffff 	.word	0xfff7ffff

08003a40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b092      	sub	sp, #72	; 0x48
 8003a44:	af02      	add	r7, sp, #8
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2284      	movs	r2, #132	; 0x84
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a50:	f7fd f974 	bl	8000d3c <HAL_GetTick>
 8003a54:	0003      	movs	r3, r0
 8003a56:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2208      	movs	r2, #8
 8003a60:	4013      	ands	r3, r2
 8003a62:	2b08      	cmp	r3, #8
 8003a64:	d12c      	bne.n	8003ac0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a68:	2280      	movs	r2, #128	; 0x80
 8003a6a:	0391      	lsls	r1, r2, #14
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	4a46      	ldr	r2, [pc, #280]	; (8003b88 <UART_CheckIdleState+0x148>)
 8003a70:	9200      	str	r2, [sp, #0]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f000 f88c 	bl	8003b90 <UART_WaitOnFlagUntilTimeout>
 8003a78:	1e03      	subs	r3, r0, #0
 8003a7a:	d021      	beq.n	8003ac0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a7c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a84:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a86:	2301      	movs	r3, #1
 8003a88:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8c:	f383 8810 	msr	PRIMASK, r3
}
 8003a90:	46c0      	nop			; (mov r8, r8)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2180      	movs	r1, #128	; 0x80
 8003a9e:	438a      	bics	r2, r1
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa8:	f383 8810 	msr	PRIMASK, r3
}
 8003aac:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2278      	movs	r2, #120	; 0x78
 8003ab8:	2100      	movs	r1, #0
 8003aba:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e05f      	b.n	8003b80 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2204      	movs	r2, #4
 8003ac8:	4013      	ands	r3, r2
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d146      	bne.n	8003b5c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad0:	2280      	movs	r2, #128	; 0x80
 8003ad2:	03d1      	lsls	r1, r2, #15
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	4a2c      	ldr	r2, [pc, #176]	; (8003b88 <UART_CheckIdleState+0x148>)
 8003ad8:	9200      	str	r2, [sp, #0]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f000 f858 	bl	8003b90 <UART_WaitOnFlagUntilTimeout>
 8003ae0:	1e03      	subs	r3, r0, #0
 8003ae2:	d03b      	beq.n	8003b5c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ae4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ae8:	60fb      	str	r3, [r7, #12]
  return(result);
 8003aea:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aec:	637b      	str	r3, [r7, #52]	; 0x34
 8003aee:	2301      	movs	r3, #1
 8003af0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f383 8810 	msr	PRIMASK, r3
}
 8003af8:	46c0      	nop			; (mov r8, r8)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4921      	ldr	r1, [pc, #132]	; (8003b8c <UART_CheckIdleState+0x14c>)
 8003b06:	400a      	ands	r2, r1
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f383 8810 	msr	PRIMASK, r3
}
 8003b14:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b16:	f3ef 8310 	mrs	r3, PRIMASK
 8003b1a:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b1c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b1e:	633b      	str	r3, [r7, #48]	; 0x30
 8003b20:	2301      	movs	r3, #1
 8003b22:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f383 8810 	msr	PRIMASK, r3
}
 8003b2a:	46c0      	nop			; (mov r8, r8)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2101      	movs	r1, #1
 8003b38:	438a      	bics	r2, r1
 8003b3a:	609a      	str	r2, [r3, #8]
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	f383 8810 	msr	PRIMASK, r3
}
 8003b46:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2280      	movs	r2, #128	; 0x80
 8003b4c:	2120      	movs	r1, #32
 8003b4e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2278      	movs	r2, #120	; 0x78
 8003b54:	2100      	movs	r1, #0
 8003b56:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e011      	b.n	8003b80 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2280      	movs	r2, #128	; 0x80
 8003b66:	2120      	movs	r1, #32
 8003b68:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2278      	movs	r2, #120	; 0x78
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	0018      	movs	r0, r3
 8003b82:	46bd      	mov	sp, r7
 8003b84:	b010      	add	sp, #64	; 0x40
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	01ffffff 	.word	0x01ffffff
 8003b8c:	fffffedf 	.word	0xfffffedf

08003b90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	603b      	str	r3, [r7, #0]
 8003b9c:	1dfb      	adds	r3, r7, #7
 8003b9e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ba0:	e04b      	b.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	d048      	beq.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ba8:	f7fd f8c8 	bl	8000d3c <HAL_GetTick>
 8003bac:	0002      	movs	r2, r0
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d302      	bcc.n	8003bbe <UART_WaitOnFlagUntilTimeout+0x2e>
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e04b      	b.n	8003c5a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2204      	movs	r2, #4
 8003bca:	4013      	ands	r3, r2
 8003bcc:	d035      	beq.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	69db      	ldr	r3, [r3, #28]
 8003bd4:	2208      	movs	r2, #8
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d111      	bne.n	8003c00 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2208      	movs	r2, #8
 8003be2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	0018      	movs	r0, r3
 8003be8:	f000 f83c 	bl	8003c64 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2284      	movs	r2, #132	; 0x84
 8003bf0:	2108      	movs	r1, #8
 8003bf2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2278      	movs	r2, #120	; 0x78
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e02c      	b.n	8003c5a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	69da      	ldr	r2, [r3, #28]
 8003c06:	2380      	movs	r3, #128	; 0x80
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	401a      	ands	r2, r3
 8003c0c:	2380      	movs	r3, #128	; 0x80
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d112      	bne.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2280      	movs	r2, #128	; 0x80
 8003c1a:	0112      	lsls	r2, r2, #4
 8003c1c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	0018      	movs	r0, r3
 8003c22:	f000 f81f 	bl	8003c64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2284      	movs	r2, #132	; 0x84
 8003c2a:	2120      	movs	r1, #32
 8003c2c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2278      	movs	r2, #120	; 0x78
 8003c32:	2100      	movs	r1, #0
 8003c34:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e00f      	b.n	8003c5a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	4013      	ands	r3, r2
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	425a      	negs	r2, r3
 8003c4a:	4153      	adcs	r3, r2
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	001a      	movs	r2, r3
 8003c50:	1dfb      	adds	r3, r7, #7
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d0a4      	beq.n	8003ba2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	b004      	add	sp, #16
 8003c60:	bd80      	pop	{r7, pc}
	...

08003c64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b08e      	sub	sp, #56	; 0x38
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c6c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c70:	617b      	str	r3, [r7, #20]
  return(result);
 8003c72:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c74:	637b      	str	r3, [r7, #52]	; 0x34
 8003c76:	2301      	movs	r3, #1
 8003c78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	f383 8810 	msr	PRIMASK, r3
}
 8003c80:	46c0      	nop			; (mov r8, r8)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4926      	ldr	r1, [pc, #152]	; (8003d28 <UART_EndRxTransfer+0xc4>)
 8003c8e:	400a      	ands	r2, r1
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	f383 8810 	msr	PRIMASK, r3
}
 8003c9c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003ca2:	623b      	str	r3, [r7, #32]
  return(result);
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca6:	633b      	str	r3, [r7, #48]	; 0x30
 8003ca8:	2301      	movs	r3, #1
 8003caa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	f383 8810 	msr	PRIMASK, r3
}
 8003cb2:	46c0      	nop			; (mov r8, r8)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689a      	ldr	r2, [r3, #8]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	438a      	bics	r2, r1
 8003cc2:	609a      	str	r2, [r3, #8]
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cca:	f383 8810 	msr	PRIMASK, r3
}
 8003cce:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d118      	bne.n	8003d0a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cd8:	f3ef 8310 	mrs	r3, PRIMASK
 8003cdc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cde:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f383 8810 	msr	PRIMASK, r3
}
 8003cec:	46c0      	nop			; (mov r8, r8)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2110      	movs	r1, #16
 8003cfa:	438a      	bics	r2, r1
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f383 8810 	msr	PRIMASK, r3
}
 8003d08:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2280      	movs	r2, #128	; 0x80
 8003d0e:	2120      	movs	r1, #32
 8003d10:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003d1e:	46c0      	nop			; (mov r8, r8)
 8003d20:	46bd      	mov	sp, r7
 8003d22:	b00e      	add	sp, #56	; 0x38
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	fffffedf 	.word	0xfffffedf

08003d2c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	225a      	movs	r2, #90	; 0x5a
 8003d3e:	2100      	movs	r1, #0
 8003d40:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2252      	movs	r2, #82	; 0x52
 8003d46:	2100      	movs	r1, #0
 8003d48:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f7ff fc6f 	bl	8003630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d52:	46c0      	nop			; (mov r8, r8)
 8003d54:	46bd      	mov	sp, r7
 8003d56:	b004      	add	sp, #16
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b08a      	sub	sp, #40	; 0x28
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d66:	2b21      	cmp	r3, #33	; 0x21
 8003d68:	d14d      	bne.n	8003e06 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2252      	movs	r2, #82	; 0x52
 8003d6e:	5a9b      	ldrh	r3, [r3, r2]
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d132      	bne.n	8003ddc <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d76:	f3ef 8310 	mrs	r3, PRIMASK
 8003d7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d7c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d80:	2301      	movs	r3, #1
 8003d82:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f383 8810 	msr	PRIMASK, r3
}
 8003d8a:	46c0      	nop			; (mov r8, r8)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2180      	movs	r1, #128	; 0x80
 8003d98:	438a      	bics	r2, r1
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f383 8810 	msr	PRIMASK, r3
}
 8003da6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003da8:	f3ef 8310 	mrs	r3, PRIMASK
 8003dac:	617b      	str	r3, [r7, #20]
  return(result);
 8003dae:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003db0:	623b      	str	r3, [r7, #32]
 8003db2:	2301      	movs	r3, #1
 8003db4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	f383 8810 	msr	PRIMASK, r3
}
 8003dbc:	46c0      	nop			; (mov r8, r8)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2140      	movs	r1, #64	; 0x40
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	f383 8810 	msr	PRIMASK, r3
}
 8003dd8:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003dda:	e014      	b.n	8003e06 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de0:	781a      	ldrb	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	b292      	uxth	r2, r2
 8003de8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2252      	movs	r2, #82	; 0x52
 8003df8:	5a9b      	ldrh	r3, [r3, r2]
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	b299      	uxth	r1, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2252      	movs	r2, #82	; 0x52
 8003e04:	5299      	strh	r1, [r3, r2]
}
 8003e06:	46c0      	nop			; (mov r8, r8)
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	b00a      	add	sp, #40	; 0x28
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b08c      	sub	sp, #48	; 0x30
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e1a:	2b21      	cmp	r3, #33	; 0x21
 8003e1c:	d151      	bne.n	8003ec2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2252      	movs	r2, #82	; 0x52
 8003e22:	5a9b      	ldrh	r3, [r3, r2]
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d132      	bne.n	8003e90 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e2a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e30:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003e32:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e34:	2301      	movs	r3, #1
 8003e36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f383 8810 	msr	PRIMASK, r3
}
 8003e3e:	46c0      	nop			; (mov r8, r8)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2180      	movs	r1, #128	; 0x80
 8003e4c:	438a      	bics	r2, r1
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f383 8810 	msr	PRIMASK, r3
}
 8003e5a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e5c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e60:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e62:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
 8003e66:	2301      	movs	r3, #1
 8003e68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	f383 8810 	msr	PRIMASK, r3
}
 8003e70:	46c0      	nop			; (mov r8, r8)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2140      	movs	r1, #64	; 0x40
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	f383 8810 	msr	PRIMASK, r3
}
 8003e8c:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003e8e:	e018      	b.n	8003ec2 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e94:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e98:	881a      	ldrh	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	05d2      	lsls	r2, r2, #23
 8003ea0:	0dd2      	lsrs	r2, r2, #23
 8003ea2:	b292      	uxth	r2, r2
 8003ea4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eaa:	1c9a      	adds	r2, r3, #2
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2252      	movs	r2, #82	; 0x52
 8003eb4:	5a9b      	ldrh	r3, [r3, r2]
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b299      	uxth	r1, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2252      	movs	r2, #82	; 0x52
 8003ec0:	5299      	strh	r1, [r3, r2]
}
 8003ec2:	46c0      	nop			; (mov r8, r8)
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	b00c      	add	sp, #48	; 0x30
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b086      	sub	sp, #24
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ed6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ed8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	2301      	movs	r3, #1
 8003ede:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f383 8810 	msr	PRIMASK, r3
}
 8003ee6:	46c0      	nop			; (mov r8, r8)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2140      	movs	r1, #64	; 0x40
 8003ef4:	438a      	bics	r2, r1
 8003ef6:	601a      	str	r2, [r3, #0]
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	f383 8810 	msr	PRIMASK, r3
}
 8003f02:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2220      	movs	r2, #32
 8003f08:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	0018      	movs	r0, r3
 8003f14:	f7fc fd04 	bl	8000920 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f18:	46c0      	nop			; (mov r8, r8)
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	b006      	add	sp, #24
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <__libc_init_array>:
 8003f20:	b570      	push	{r4, r5, r6, lr}
 8003f22:	2600      	movs	r6, #0
 8003f24:	4d0c      	ldr	r5, [pc, #48]	; (8003f58 <__libc_init_array+0x38>)
 8003f26:	4c0d      	ldr	r4, [pc, #52]	; (8003f5c <__libc_init_array+0x3c>)
 8003f28:	1b64      	subs	r4, r4, r5
 8003f2a:	10a4      	asrs	r4, r4, #2
 8003f2c:	42a6      	cmp	r6, r4
 8003f2e:	d109      	bne.n	8003f44 <__libc_init_array+0x24>
 8003f30:	2600      	movs	r6, #0
 8003f32:	f000 f82b 	bl	8003f8c <_init>
 8003f36:	4d0a      	ldr	r5, [pc, #40]	; (8003f60 <__libc_init_array+0x40>)
 8003f38:	4c0a      	ldr	r4, [pc, #40]	; (8003f64 <__libc_init_array+0x44>)
 8003f3a:	1b64      	subs	r4, r4, r5
 8003f3c:	10a4      	asrs	r4, r4, #2
 8003f3e:	42a6      	cmp	r6, r4
 8003f40:	d105      	bne.n	8003f4e <__libc_init_array+0x2e>
 8003f42:	bd70      	pop	{r4, r5, r6, pc}
 8003f44:	00b3      	lsls	r3, r6, #2
 8003f46:	58eb      	ldr	r3, [r5, r3]
 8003f48:	4798      	blx	r3
 8003f4a:	3601      	adds	r6, #1
 8003f4c:	e7ee      	b.n	8003f2c <__libc_init_array+0xc>
 8003f4e:	00b3      	lsls	r3, r6, #2
 8003f50:	58eb      	ldr	r3, [r5, r3]
 8003f52:	4798      	blx	r3
 8003f54:	3601      	adds	r6, #1
 8003f56:	e7f2      	b.n	8003f3e <__libc_init_array+0x1e>
 8003f58:	08004000 	.word	0x08004000
 8003f5c:	08004000 	.word	0x08004000
 8003f60:	08004000 	.word	0x08004000
 8003f64:	08004004 	.word	0x08004004

08003f68 <memcpy>:
 8003f68:	2300      	movs	r3, #0
 8003f6a:	b510      	push	{r4, lr}
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d100      	bne.n	8003f72 <memcpy+0xa>
 8003f70:	bd10      	pop	{r4, pc}
 8003f72:	5ccc      	ldrb	r4, [r1, r3]
 8003f74:	54c4      	strb	r4, [r0, r3]
 8003f76:	3301      	adds	r3, #1
 8003f78:	e7f8      	b.n	8003f6c <memcpy+0x4>

08003f7a <memset>:
 8003f7a:	0003      	movs	r3, r0
 8003f7c:	1882      	adds	r2, r0, r2
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d100      	bne.n	8003f84 <memset+0xa>
 8003f82:	4770      	bx	lr
 8003f84:	7019      	strb	r1, [r3, #0]
 8003f86:	3301      	adds	r3, #1
 8003f88:	e7f9      	b.n	8003f7e <memset+0x4>
	...

08003f8c <_init>:
 8003f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f92:	bc08      	pop	{r3}
 8003f94:	469e      	mov	lr, r3
 8003f96:	4770      	bx	lr

08003f98 <_fini>:
 8003f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9a:	46c0      	nop			; (mov r8, r8)
 8003f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f9e:	bc08      	pop	{r3}
 8003fa0:	469e      	mov	lr, r3
 8003fa2:	4770      	bx	lr
