
SPI_MASTER_10MHz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d8c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003e4c  08003e4c  00013e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eac  08003eac  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08003eac  08003eac  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003eac  08003eac  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eac  08003eac  00013eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003eb0  08003eb0  00013eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  2000001c  08003ed0  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08003ed0  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f0f1  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e62  00000000  00000000  0002f135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  00030f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d10  00000000  00000000  00031d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010bf4  00000000  00000000  00032a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010969  00000000  00000000  00043664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000676c0  00000000  00000000  00053fcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bb68d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003238  00000000  00000000  000bb6e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003e34 	.word	0x08003e34

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	08003e34 	.word	0x08003e34

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b087      	sub	sp, #28
 8000224:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fd7d 	bl	8000d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f851 	bl	80002d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f9bb 	bl	80005a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000232:	f000 f99b 	bl	800056c <MX_DMA_Init>
  MX_SPI1_Init();
 8000236:	f000 f8ad 	bl	8000394 <MX_SPI1_Init>
  MX_TIM1_Init();
 800023a:	f000 f8e9 	bl	8000410 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800023e:	f000 f951 	bl	80004e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* CONFIIGURE THE CONTROL DATA BUFFER */

  /* Initialize the entire TX data buffer to 0. */
  for(int i = 0; i < spiSize; i++)
 8000242:	2300      	movs	r3, #0
 8000244:	60fb      	str	r3, [r7, #12]
 8000246:	e007      	b.n	8000258 <main+0x38>
      txData[i] = 0;
 8000248:	4a1a      	ldr	r2, [pc, #104]	; (80002b4 <main+0x94>)
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	18d3      	adds	r3, r2, r3
 800024e:	2200      	movs	r2, #0
 8000250:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < spiSize; i++)
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	3301      	adds	r3, #1
 8000256:	60fb      	str	r3, [r7, #12]
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	2b11      	cmp	r3, #17
 800025c:	ddf4      	ble.n	8000248 <main+0x28>

  /* Configure data to send via SPI*/
  setTxData(txData, &testMode, &out0, &out1, &out2);
 800025e:	4c16      	ldr	r4, [pc, #88]	; (80002b8 <main+0x98>)
 8000260:	4a16      	ldr	r2, [pc, #88]	; (80002bc <main+0x9c>)
 8000262:	4917      	ldr	r1, [pc, #92]	; (80002c0 <main+0xa0>)
 8000264:	4813      	ldr	r0, [pc, #76]	; (80002b4 <main+0x94>)
 8000266:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <main+0xa4>)
 8000268:	9300      	str	r3, [sp, #0]
 800026a:	0023      	movs	r3, r4
 800026c:	f000 f9e4 	bl	8000638 <setTxData>

  /* Initialize the UART data buffer to all blank characters */
  for(int i = 0; i < spiWords; i++)
 8000270:	2300      	movs	r3, #0
 8000272:	60bb      	str	r3, [r7, #8]
 8000274:	e016      	b.n	80002a4 <main+0x84>
  	for(int j = 0; j < uartChars; j++)
 8000276:	2300      	movs	r3, #0
 8000278:	607b      	str	r3, [r7, #4]
 800027a:	e00d      	b.n	8000298 <main+0x78>
  	{
  	   uartBuf[i][j] = ' ';
 800027c:	4912      	ldr	r1, [pc, #72]	; (80002c8 <main+0xa8>)
 800027e:	68ba      	ldr	r2, [r7, #8]
 8000280:	0013      	movs	r3, r2
 8000282:	005b      	lsls	r3, r3, #1
 8000284:	189b      	adds	r3, r3, r2
 8000286:	005b      	lsls	r3, r3, #1
 8000288:	18ca      	adds	r2, r1, r3
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	18d3      	adds	r3, r2, r3
 800028e:	2220      	movs	r2, #32
 8000290:	701a      	strb	r2, [r3, #0]
  	for(int j = 0; j < uartChars; j++)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	3301      	adds	r3, #1
 8000296:	607b      	str	r3, [r7, #4]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2b05      	cmp	r3, #5
 800029c:	ddee      	ble.n	800027c <main+0x5c>
  for(int i = 0; i < spiWords; i++)
 800029e:	68bb      	ldr	r3, [r7, #8]
 80002a0:	3301      	adds	r3, #1
 80002a2:	60bb      	str	r3, [r7, #8]
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	2b08      	cmp	r3, #8
 80002a8:	dde5      	ble.n	8000276 <main+0x56>
  	}

  /* Enable TIM1 interrupt */
  HAL_TIM_Base_Start_IT(&htim1);
 80002aa:	4b08      	ldr	r3, [pc, #32]	; (80002cc <main+0xac>)
 80002ac:	0018      	movs	r0, r3
 80002ae:	f002 fb6f 	bl	8002990 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b2:	e7fe      	b.n	80002b2 <main+0x92>
 80002b4:	200001b0 	.word	0x200001b0
 80002b8:	200001d6 	.word	0x200001d6
 80002bc:	20000001 	.word	0x20000001
 80002c0:	20000000 	.word	0x20000000
 80002c4:	20000002 	.word	0x20000002
 80002c8:	200001fc 	.word	0x200001fc
 80002cc:	2000009c 	.word	0x2000009c

080002d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d0:	b590      	push	{r4, r7, lr}
 80002d2:	b095      	sub	sp, #84	; 0x54
 80002d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d6:	2420      	movs	r4, #32
 80002d8:	193b      	adds	r3, r7, r4
 80002da:	0018      	movs	r0, r3
 80002dc:	2330      	movs	r3, #48	; 0x30
 80002de:	001a      	movs	r2, r3
 80002e0:	2100      	movs	r1, #0
 80002e2:	f003 fd9e 	bl	8003e22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e6:	2310      	movs	r3, #16
 80002e8:	18fb      	adds	r3, r7, r3
 80002ea:	0018      	movs	r0, r3
 80002ec:	2310      	movs	r3, #16
 80002ee:	001a      	movs	r2, r3
 80002f0:	2100      	movs	r1, #0
 80002f2:	f003 fd96 	bl	8003e22 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f6:	003b      	movs	r3, r7
 80002f8:	0018      	movs	r0, r3
 80002fa:	2310      	movs	r3, #16
 80002fc:	001a      	movs	r2, r3
 80002fe:	2100      	movs	r1, #0
 8000300:	f003 fd8f 	bl	8003e22 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000304:	0021      	movs	r1, r4
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2202      	movs	r2, #2
 800030a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2201      	movs	r2, #1
 8000310:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2210      	movs	r2, #16
 8000316:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2202      	movs	r2, #2
 800031c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2200      	movs	r2, #0
 8000322:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8000324:	187b      	adds	r3, r7, r1
 8000326:	2280      	movs	r2, #128	; 0x80
 8000328:	0392      	lsls	r2, r2, #14
 800032a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800032c:	187b      	adds	r3, r7, r1
 800032e:	2200      	movs	r2, #0
 8000330:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000332:	187b      	adds	r3, r7, r1
 8000334:	0018      	movs	r0, r3
 8000336:	f001 f99f 	bl	8001678 <HAL_RCC_OscConfig>
 800033a:	1e03      	subs	r3, r0, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800033e:	f000 fb7b 	bl	8000a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000342:	2110      	movs	r1, #16
 8000344:	187b      	adds	r3, r7, r1
 8000346:	2207      	movs	r2, #7
 8000348:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800034a:	187b      	adds	r3, r7, r1
 800034c:	2202      	movs	r2, #2
 800034e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000350:	187b      	adds	r3, r7, r1
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000356:	187b      	adds	r3, r7, r1
 8000358:	2200      	movs	r2, #0
 800035a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800035c:	187b      	adds	r3, r7, r1
 800035e:	2101      	movs	r1, #1
 8000360:	0018      	movs	r0, r3
 8000362:	f001 fca3 	bl	8001cac <HAL_RCC_ClockConfig>
 8000366:	1e03      	subs	r3, r0, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800036a:	f000 fb65 	bl	8000a38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800036e:	003b      	movs	r3, r7
 8000370:	2201      	movs	r2, #1
 8000372:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000374:	003b      	movs	r3, r7
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800037a:	003b      	movs	r3, r7
 800037c:	0018      	movs	r0, r3
 800037e:	f001 fdd9 	bl	8001f34 <HAL_RCCEx_PeriphCLKConfig>
 8000382:	1e03      	subs	r3, r0, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000386:	f000 fb57 	bl	8000a38 <Error_Handler>
  }
}
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	46bd      	mov	sp, r7
 800038e:	b015      	add	sp, #84	; 0x54
 8000390:	bd90      	pop	{r4, r7, pc}
	...

08000394 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000398:	4b1b      	ldr	r3, [pc, #108]	; (8000408 <MX_SPI1_Init+0x74>)
 800039a:	4a1c      	ldr	r2, [pc, #112]	; (800040c <MX_SPI1_Init+0x78>)
 800039c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800039e:	4b1a      	ldr	r3, [pc, #104]	; (8000408 <MX_SPI1_Init+0x74>)
 80003a0:	2282      	movs	r2, #130	; 0x82
 80003a2:	0052      	lsls	r2, r2, #1
 80003a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003a6:	4b18      	ldr	r3, [pc, #96]	; (8000408 <MX_SPI1_Init+0x74>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003ac:	4b16      	ldr	r3, [pc, #88]	; (8000408 <MX_SPI1_Init+0x74>)
 80003ae:	22e0      	movs	r2, #224	; 0xe0
 80003b0:	00d2      	lsls	r2, r2, #3
 80003b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003b4:	4b14      	ldr	r3, [pc, #80]	; (8000408 <MX_SPI1_Init+0x74>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003ba:	4b13      	ldr	r3, [pc, #76]	; (8000408 <MX_SPI1_Init+0x74>)
 80003bc:	2200      	movs	r2, #0
 80003be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003c0:	4b11      	ldr	r3, [pc, #68]	; (8000408 <MX_SPI1_Init+0x74>)
 80003c2:	2280      	movs	r2, #128	; 0x80
 80003c4:	0092      	lsls	r2, r2, #2
 80003c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003c8:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <MX_SPI1_Init+0x74>)
 80003ca:	2208      	movs	r2, #8
 80003cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003ce:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <MX_SPI1_Init+0x74>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003d4:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <MX_SPI1_Init+0x74>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003da:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <MX_SPI1_Init+0x74>)
 80003dc:	2200      	movs	r2, #0
 80003de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003e0:	4b09      	ldr	r3, [pc, #36]	; (8000408 <MX_SPI1_Init+0x74>)
 80003e2:	2207      	movs	r2, #7
 80003e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003e6:	4b08      	ldr	r3, [pc, #32]	; (8000408 <MX_SPI1_Init+0x74>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <MX_SPI1_Init+0x74>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003f2:	4b05      	ldr	r3, [pc, #20]	; (8000408 <MX_SPI1_Init+0x74>)
 80003f4:	0018      	movs	r0, r3
 80003f6:	f001 fe6b 	bl	80020d0 <HAL_SPI_Init>
 80003fa:	1e03      	subs	r3, r0, #0
 80003fc:	d001      	beq.n	8000402 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003fe:	f000 fb1b 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20000038 	.word	0x20000038
 800040c:	40013000 	.word	0x40013000

08000410 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b088      	sub	sp, #32
 8000414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000416:	2310      	movs	r3, #16
 8000418:	18fb      	adds	r3, r7, r3
 800041a:	0018      	movs	r0, r3
 800041c:	2310      	movs	r3, #16
 800041e:	001a      	movs	r2, r3
 8000420:	2100      	movs	r1, #0
 8000422:	f003 fcfe 	bl	8003e22 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000426:	2308      	movs	r3, #8
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	0018      	movs	r0, r3
 800042c:	2308      	movs	r3, #8
 800042e:	001a      	movs	r2, r3
 8000430:	2100      	movs	r1, #0
 8000432:	f003 fcf6 	bl	8003e22 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000436:	4b27      	ldr	r3, [pc, #156]	; (80004d4 <MX_TIM1_Init+0xc4>)
 8000438:	4a27      	ldr	r2, [pc, #156]	; (80004d8 <MX_TIM1_Init+0xc8>)
 800043a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800043c:	4b25      	ldr	r3, [pc, #148]	; (80004d4 <MX_TIM1_Init+0xc4>)
 800043e:	2200      	movs	r2, #0
 8000440:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000442:	4b24      	ldr	r3, [pc, #144]	; (80004d4 <MX_TIM1_Init+0xc4>)
 8000444:	2200      	movs	r2, #0
 8000446:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1250-1;
 8000448:	4b22      	ldr	r3, [pc, #136]	; (80004d4 <MX_TIM1_Init+0xc4>)
 800044a:	4a24      	ldr	r2, [pc, #144]	; (80004dc <MX_TIM1_Init+0xcc>)
 800044c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800044e:	4b21      	ldr	r3, [pc, #132]	; (80004d4 <MX_TIM1_Init+0xc4>)
 8000450:	2200      	movs	r2, #0
 8000452:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000454:	4b1f      	ldr	r3, [pc, #124]	; (80004d4 <MX_TIM1_Init+0xc4>)
 8000456:	2200      	movs	r2, #0
 8000458:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800045a:	4b1e      	ldr	r3, [pc, #120]	; (80004d4 <MX_TIM1_Init+0xc4>)
 800045c:	2280      	movs	r2, #128	; 0x80
 800045e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000460:	4b1c      	ldr	r3, [pc, #112]	; (80004d4 <MX_TIM1_Init+0xc4>)
 8000462:	0018      	movs	r0, r3
 8000464:	f002 fa44 	bl	80028f0 <HAL_TIM_Base_Init>
 8000468:	1e03      	subs	r3, r0, #0
 800046a:	d001      	beq.n	8000470 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
 800046c:	f000 fae4 	bl	8000a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000470:	2110      	movs	r1, #16
 8000472:	187b      	adds	r3, r7, r1
 8000474:	2280      	movs	r2, #128	; 0x80
 8000476:	0152      	lsls	r2, r2, #5
 8000478:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800047a:	187a      	adds	r2, r7, r1
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <MX_TIM1_Init+0xc4>)
 800047e:	0011      	movs	r1, r2
 8000480:	0018      	movs	r0, r3
 8000482:	f002 fbe7 	bl	8002c54 <HAL_TIM_ConfigClockSource>
 8000486:	1e03      	subs	r3, r0, #0
 8000488:	d001      	beq.n	800048e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800048a:	f000 fad5 	bl	8000a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800048e:	2108      	movs	r1, #8
 8000490:	187b      	adds	r3, r7, r1
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000496:	187b      	adds	r3, r7, r1
 8000498:	2200      	movs	r2, #0
 800049a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800049c:	187a      	adds	r2, r7, r1
 800049e:	4b0d      	ldr	r3, [pc, #52]	; (80004d4 <MX_TIM1_Init+0xc4>)
 80004a0:	0011      	movs	r1, r2
 80004a2:	0018      	movs	r0, r3
 80004a4:	f002 fdda 	bl	800305c <HAL_TIMEx_MasterConfigSynchronization>
 80004a8:	1e03      	subs	r3, r0, #0
 80004aa:	d001      	beq.n	80004b0 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 80004ac:	f000 fac4 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80004b0:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <MX_TIM1_Init+0xd0>)
 80004b2:	699a      	ldr	r2, [r3, #24]
 80004b4:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <MX_TIM1_Init+0xd0>)
 80004b6:	2180      	movs	r1, #128	; 0x80
 80004b8:	0109      	lsls	r1, r1, #4
 80004ba:	430a      	orrs	r2, r1
 80004bc:	619a      	str	r2, [r3, #24]
 80004be:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <MX_TIM1_Init+0xd0>)
 80004c0:	699a      	ldr	r2, [r3, #24]
 80004c2:	2380      	movs	r3, #128	; 0x80
 80004c4:	011b      	lsls	r3, r3, #4
 80004c6:	4013      	ands	r3, r2
 80004c8:	607b      	str	r3, [r7, #4]
 80004ca:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END TIM1_Init 2 */

}
 80004cc:	46c0      	nop			; (mov r8, r8)
 80004ce:	46bd      	mov	sp, r7
 80004d0:	b008      	add	sp, #32
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	2000009c 	.word	0x2000009c
 80004d8:	40012c00 	.word	0x40012c00
 80004dc:	000004e1 	.word	0x000004e1
 80004e0:	40021000 	.word	0x40021000

080004e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
  __HAL_RCC_USART1_CLK_ENABLE();
 80004ea:	4b1c      	ldr	r3, [pc, #112]	; (800055c <MX_USART1_UART_Init+0x78>)
 80004ec:	699a      	ldr	r2, [r3, #24]
 80004ee:	4b1b      	ldr	r3, [pc, #108]	; (800055c <MX_USART1_UART_Init+0x78>)
 80004f0:	2180      	movs	r1, #128	; 0x80
 80004f2:	01c9      	lsls	r1, r1, #7
 80004f4:	430a      	orrs	r2, r1
 80004f6:	619a      	str	r2, [r3, #24]
 80004f8:	4b18      	ldr	r3, [pc, #96]	; (800055c <MX_USART1_UART_Init+0x78>)
 80004fa:	699a      	ldr	r2, [r3, #24]
 80004fc:	2380      	movs	r3, #128	; 0x80
 80004fe:	01db      	lsls	r3, r3, #7
 8000500:	4013      	ands	r3, r2
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000506:	4b16      	ldr	r3, [pc, #88]	; (8000560 <MX_USART1_UART_Init+0x7c>)
 8000508:	4a16      	ldr	r2, [pc, #88]	; (8000564 <MX_USART1_UART_Init+0x80>)
 800050a:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 111731;
 800050c:	4b14      	ldr	r3, [pc, #80]	; (8000560 <MX_USART1_UART_Init+0x7c>)
 800050e:	4a16      	ldr	r2, [pc, #88]	; (8000568 <MX_USART1_UART_Init+0x84>)
 8000510:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000512:	4b13      	ldr	r3, [pc, #76]	; (8000560 <MX_USART1_UART_Init+0x7c>)
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000518:	4b11      	ldr	r3, [pc, #68]	; (8000560 <MX_USART1_UART_Init+0x7c>)
 800051a:	2200      	movs	r2, #0
 800051c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800051e:	4b10      	ldr	r3, [pc, #64]	; (8000560 <MX_USART1_UART_Init+0x7c>)
 8000520:	2200      	movs	r2, #0
 8000522:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8000524:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <MX_USART1_UART_Init+0x7c>)
 8000526:	2208      	movs	r2, #8
 8000528:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800052a:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <MX_USART1_UART_Init+0x7c>)
 800052c:	2200      	movs	r2, #0
 800052e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8000530:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <MX_USART1_UART_Init+0x7c>)
 8000532:	2280      	movs	r2, #128	; 0x80
 8000534:	0212      	lsls	r2, r2, #8
 8000536:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000538:	4b09      	ldr	r3, [pc, #36]	; (8000560 <MX_USART1_UART_Init+0x7c>)
 800053a:	2200      	movs	r2, #0
 800053c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800053e:	4b08      	ldr	r3, [pc, #32]	; (8000560 <MX_USART1_UART_Init+0x7c>)
 8000540:	2200      	movs	r2, #0
 8000542:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <MX_USART1_UART_Init+0x7c>)
 8000546:	0018      	movs	r0, r3
 8000548:	f002 fdf0 	bl	800312c <HAL_UART_Init>
 800054c:	1e03      	subs	r3, r0, #0
 800054e:	d001      	beq.n	8000554 <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 8000550:	f000 fa72 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000554:	46c0      	nop			; (mov r8, r8)
 8000556:	46bd      	mov	sp, r7
 8000558:	b002      	add	sp, #8
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40021000 	.word	0x40021000
 8000560:	200000e4 	.word	0x200000e4
 8000564:	40013800 	.word	0x40013800
 8000568:	0001b473 	.word	0x0001b473

0800056c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000572:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <MX_DMA_Init+0x38>)
 8000574:	695a      	ldr	r2, [r3, #20]
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <MX_DMA_Init+0x38>)
 8000578:	2101      	movs	r1, #1
 800057a:	430a      	orrs	r2, r1
 800057c:	615a      	str	r2, [r3, #20]
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <MX_DMA_Init+0x38>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	2201      	movs	r2, #1
 8000584:	4013      	ands	r3, r2
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	2100      	movs	r1, #0
 800058e:	200a      	movs	r0, #10
 8000590:	f000 fcd8 	bl	8000f44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000594:	200a      	movs	r0, #10
 8000596:	f000 fcea 	bl	8000f6e <HAL_NVIC_EnableIRQ>

}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	b002      	add	sp, #8
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	40021000 	.word	0x40021000

080005a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a8:	b590      	push	{r4, r7, lr}
 80005aa:	b089      	sub	sp, #36	; 0x24
 80005ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ae:	240c      	movs	r4, #12
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	0018      	movs	r0, r3
 80005b4:	2314      	movs	r3, #20
 80005b6:	001a      	movs	r2, r3
 80005b8:	2100      	movs	r1, #0
 80005ba:	f003 fc32 	bl	8003e22 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	4b1c      	ldr	r3, [pc, #112]	; (8000630 <MX_GPIO_Init+0x88>)
 80005c0:	695a      	ldr	r2, [r3, #20]
 80005c2:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <MX_GPIO_Init+0x88>)
 80005c4:	2180      	movs	r1, #128	; 0x80
 80005c6:	0289      	lsls	r1, r1, #10
 80005c8:	430a      	orrs	r2, r1
 80005ca:	615a      	str	r2, [r3, #20]
 80005cc:	4b18      	ldr	r3, [pc, #96]	; (8000630 <MX_GPIO_Init+0x88>)
 80005ce:	695a      	ldr	r2, [r3, #20]
 80005d0:	2380      	movs	r3, #128	; 0x80
 80005d2:	029b      	lsls	r3, r3, #10
 80005d4:	4013      	ands	r3, r2
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005da:	4b15      	ldr	r3, [pc, #84]	; (8000630 <MX_GPIO_Init+0x88>)
 80005dc:	695a      	ldr	r2, [r3, #20]
 80005de:	4b14      	ldr	r3, [pc, #80]	; (8000630 <MX_GPIO_Init+0x88>)
 80005e0:	2180      	movs	r1, #128	; 0x80
 80005e2:	0309      	lsls	r1, r1, #12
 80005e4:	430a      	orrs	r2, r1
 80005e6:	615a      	str	r2, [r3, #20]
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_GPIO_Init+0x88>)
 80005ea:	695a      	ldr	r2, [r3, #20]
 80005ec:	2380      	movs	r3, #128	; 0x80
 80005ee:	031b      	lsls	r3, r3, #12
 80005f0:	4013      	ands	r3, r2
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_SS_GPIO_Port, SPI1_SS_Pin, GPIO_PIN_SET);
 80005f6:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <MX_GPIO_Init+0x8c>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	2110      	movs	r1, #16
 80005fc:	0018      	movs	r0, r3
 80005fe:	f001 f81d 	bl	800163c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_SS_Pin */
  GPIO_InitStruct.Pin = SPI1_SS_Pin;
 8000602:	0021      	movs	r1, r4
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2210      	movs	r2, #16
 8000608:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2201      	movs	r2, #1
 800060e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2201      	movs	r2, #1
 8000614:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2203      	movs	r2, #3
 800061a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_SS_GPIO_Port, &GPIO_InitStruct);
 800061c:	187b      	adds	r3, r7, r1
 800061e:	4a05      	ldr	r2, [pc, #20]	; (8000634 <MX_GPIO_Init+0x8c>)
 8000620:	0019      	movs	r1, r3
 8000622:	0010      	movs	r0, r2
 8000624:	f000 fe9a 	bl	800135c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000628:	46c0      	nop			; (mov r8, r8)
 800062a:	46bd      	mov	sp, r7
 800062c:	b009      	add	sp, #36	; 0x24
 800062e:	bd90      	pop	{r4, r7, pc}
 8000630:	40021000 	.word	0x40021000
 8000634:	48000800 	.word	0x48000800

08000638 <setTxData>:

/* USER CODE BEGIN 4 */

/* Configuring the MOSI line bits */
uint8_t* setTxData(uint8_t* txData, bool* testMode, bool* out0, bool* out1, bool* out2)
  {
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	607a      	str	r2, [r7, #4]
 8000644:	603b      	str	r3, [r7, #0]

    /* Test mode is the MSbit of the CW (second byte, last bit). If it is 0, mode is automatic. If 1, mode is manual. */
    if(*testMode)
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d008      	beq.n	8000660 <setTxData+0x28>
      txData[0] |= (1u << 7);
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2280      	movs	r2, #128	; 0x80
 8000654:	4252      	negs	r2, r2
 8000656:	4313      	orrs	r3, r2
 8000658:	b2da      	uxtb	r2, r3
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	701a      	strb	r2, [r3, #0]
 800065e:	e006      	b.n	800066e <setTxData+0x36>
    else
      txData[0] &= ~(1u << 7);
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	227f      	movs	r2, #127	; 0x7f
 8000666:	4013      	ands	r3, r2
 8000668:	b2da      	uxtb	r2, r3
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	701a      	strb	r2, [r3, #0]

    /* Configuring commands for GPO pins */
    if(*out0)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d009      	beq.n	800068a <setTxData+0x52>
      txData[1] |= (1u << 0);
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	3301      	adds	r3, #1
 800067a:	781a      	ldrb	r2, [r3, #0]
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	3301      	adds	r3, #1
 8000680:	2101      	movs	r1, #1
 8000682:	430a      	orrs	r2, r1
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	701a      	strb	r2, [r3, #0]
 8000688:	e008      	b.n	800069c <setTxData+0x64>
    else
      txData[1] &= ~(1u << 0);
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	3301      	adds	r3, #1
 800068e:	781a      	ldrb	r2, [r3, #0]
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	3301      	adds	r3, #1
 8000694:	2101      	movs	r1, #1
 8000696:	438a      	bics	r2, r1
 8000698:	b2d2      	uxtb	r2, r2
 800069a:	701a      	strb	r2, [r3, #0]

    if(*out1)
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d009      	beq.n	80006b8 <setTxData+0x80>
      txData[1] |= (1u << 1);
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	3301      	adds	r3, #1
 80006a8:	781a      	ldrb	r2, [r3, #0]
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	3301      	adds	r3, #1
 80006ae:	2102      	movs	r1, #2
 80006b0:	430a      	orrs	r2, r1
 80006b2:	b2d2      	uxtb	r2, r2
 80006b4:	701a      	strb	r2, [r3, #0]
 80006b6:	e008      	b.n	80006ca <setTxData+0x92>
    else
      txData[1] &= ~(1u << 1);
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	3301      	adds	r3, #1
 80006bc:	781a      	ldrb	r2, [r3, #0]
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	3301      	adds	r3, #1
 80006c2:	2102      	movs	r1, #2
 80006c4:	438a      	bics	r2, r1
 80006c6:	b2d2      	uxtb	r2, r2
 80006c8:	701a      	strb	r2, [r3, #0]

    if(*out2)
 80006ca:	69bb      	ldr	r3, [r7, #24]
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d009      	beq.n	80006e6 <setTxData+0xae>
      txData[1] |= (1u << 2);
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	3301      	adds	r3, #1
 80006d6:	781a      	ldrb	r2, [r3, #0]
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	3301      	adds	r3, #1
 80006dc:	2104      	movs	r1, #4
 80006de:	430a      	orrs	r2, r1
 80006e0:	b2d2      	uxtb	r2, r2
 80006e2:	701a      	strb	r2, [r3, #0]
 80006e4:	e008      	b.n	80006f8 <setTxData+0xc0>
    else
      txData[1] &= ~(1u << 2);
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	3301      	adds	r3, #1
 80006ea:	781a      	ldrb	r2, [r3, #0]
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	3301      	adds	r3, #1
 80006f0:	2104      	movs	r1, #4
 80006f2:	438a      	bics	r2, r1
 80006f4:	b2d2      	uxtb	r2, r2
 80006f6:	701a      	strb	r2, [r3, #0]

    return txData;
 80006f8:	68fb      	ldr	r3, [r7, #12]
   }
 80006fa:	0018      	movs	r0, r3
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b004      	add	sp, #16
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <readADC>:


/* Reading the ADC data from the MISO line, by byte pairs */
uint16_t* readADC(uint16_t* adcData)
  {
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
     for(int i = 1; i <= adcWords; i++)
 800070c:	2301      	movs	r3, #1
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	e01d      	b.n	800074e <readADC+0x4a>
         adcData[i-1] = (uint16_t)( (uint16_t)(rxData[2*i] & 0x0F) << 8 | rxData[2*i+1] );
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	4a12      	ldr	r2, [pc, #72]	; (8000760 <readADC+0x5c>)
 8000718:	5cd3      	ldrb	r3, [r2, r3]
 800071a:	021b      	lsls	r3, r3, #8
 800071c:	b21a      	sxth	r2, r3
 800071e:	23f0      	movs	r3, #240	; 0xf0
 8000720:	011b      	lsls	r3, r3, #4
 8000722:	4013      	ands	r3, r2
 8000724:	b21a      	sxth	r2, r3
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	3301      	adds	r3, #1
 800072c:	490c      	ldr	r1, [pc, #48]	; (8000760 <readADC+0x5c>)
 800072e:	5ccb      	ldrb	r3, [r1, r3]
 8000730:	b21b      	sxth	r3, r3
 8000732:	4313      	orrs	r3, r2
 8000734:	b219      	sxth	r1, r3
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	4a0a      	ldr	r2, [pc, #40]	; (8000764 <readADC+0x60>)
 800073a:	4694      	mov	ip, r2
 800073c:	4463      	add	r3, ip
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	18d3      	adds	r3, r2, r3
 8000744:	b28a      	uxth	r2, r1
 8000746:	801a      	strh	r2, [r3, #0]
     for(int i = 1; i <= adcWords; i++)
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	3301      	adds	r3, #1
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	2b06      	cmp	r3, #6
 8000752:	ddde      	ble.n	8000712 <readADC+0xe>

     return adcData;
 8000754:	687b      	ldr	r3, [r7, #4]
  }
 8000756:	0018      	movs	r0, r3
 8000758:	46bd      	mov	sp, r7
 800075a:	b004      	add	sp, #16
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	200001c4 	.word	0x200001c4
 8000764:	7fffffff 	.word	0x7fffffff

08000768 <handleReceivedData>:

/* Handling received data */
void handleReceivedData (uint8_t* rxData, uint16_t* adcData)
  {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
      /* OBTAINING THE ENTIRE STATUS WORD */
      memcpy(misoData, rxData, spiSize);
 8000772:	4a08      	ldr	r2, [pc, #32]	; (8000794 <handleReceivedData+0x2c>)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	0010      	movs	r0, r2
 8000778:	0019      	movs	r1, r3
 800077a:	2312      	movs	r3, #18
 800077c:	001a      	movs	r2, r3
 800077e:	f003 fb47 	bl	8003e10 <memcpy>

      /* Obtaining the latest ADC data */
      readADC(adcData);
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	0018      	movs	r0, r3
 8000786:	f7ff ffbd 	bl	8000704 <readADC>
  }
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	b002      	add	sp, #8
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	200001d8 	.word	0x200001d8

08000798 <uint16_to_char_array>:

/* Converting data to char arrays, to print via UART */
char* uint16_to_char_array(uint16_t adcData, char* uartBuf, size_t bufSize)
  {
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b087      	sub	sp, #28
 800079c:	af00      	add	r7, sp, #0
 800079e:	60b9      	str	r1, [r7, #8]
 80007a0:	607a      	str	r2, [r7, #4]
 80007a2:	210e      	movs	r1, #14
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	1c02      	adds	r2, r0, #0
 80007a8:	801a      	strh	r2, [r3, #0]
     int i = bufSize - 1;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	3b01      	subs	r3, #1
 80007ae:	617b      	str	r3, [r7, #20]
	 uartBuf[i] = '\0';  /* Null-terminate the buffer */
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	68ba      	ldr	r2, [r7, #8]
 80007b4:	18d3      	adds	r3, r2, r3
 80007b6:	2200      	movs	r2, #0
 80007b8:	701a      	strb	r2, [r3, #0]

	 if (adcData == 0)
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	881b      	ldrh	r3, [r3, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d125      	bne.n	800080e <uint16_to_char_array+0x76>
		 uartBuf[--i] = '0';
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	3b01      	subs	r3, #1
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	18d3      	adds	r3, r2, r3
 80007ce:	2230      	movs	r2, #48	; 0x30
 80007d0:	701a      	strb	r2, [r3, #0]
 80007d2:	e024      	b.n	800081e <uint16_to_char_array+0x86>
	 else
		 while (adcData != 0 && i >= 0)
		     {
			    uartBuf[--i] = '0' + (adcData % 10);
 80007d4:	240e      	movs	r4, #14
 80007d6:	193b      	adds	r3, r7, r4
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	210a      	movs	r1, #10
 80007dc:	0018      	movs	r0, r3
 80007de:	f7ff fd19 	bl	8000214 <__aeabi_uidivmod>
 80007e2:	000b      	movs	r3, r1
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	617b      	str	r3, [r7, #20]
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	68b9      	ldr	r1, [r7, #8]
 80007f2:	18cb      	adds	r3, r1, r3
 80007f4:	3230      	adds	r2, #48	; 0x30
 80007f6:	b2d2      	uxtb	r2, r2
 80007f8:	701a      	strb	r2, [r3, #0]
				adcData /= 10;
 80007fa:	0023      	movs	r3, r4
 80007fc:	18fc      	adds	r4, r7, r3
 80007fe:	18fb      	adds	r3, r7, r3
 8000800:	881b      	ldrh	r3, [r3, #0]
 8000802:	210a      	movs	r1, #10
 8000804:	0018      	movs	r0, r3
 8000806:	f7ff fc7f 	bl	8000108 <__udivsi3>
 800080a:	0003      	movs	r3, r0
 800080c:	8023      	strh	r3, [r4, #0]
		 while (adcData != 0 && i >= 0)
 800080e:	230e      	movs	r3, #14
 8000810:	18fb      	adds	r3, r7, r3
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d002      	beq.n	800081e <uint16_to_char_array+0x86>
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	2b00      	cmp	r3, #0
 800081c:	dada      	bge.n	80007d4 <uint16_to_char_array+0x3c>
		      }

	 return uartBuf;
 800081e:	68bb      	ldr	r3, [r7, #8]
   }
 8000820:	0018      	movs	r0, r3
 8000822:	46bd      	mov	sp, r7
 8000824:	b007      	add	sp, #28
 8000826:	bd90      	pop	{r4, r7, pc}

08000828 <uartPrint>:

/* Printing data to UART */
void uartPrint(uint16_t* adcData, char(*uartBuf)[uartChars])
  {
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
	    /* Convert the status word (1st 2 bytes of MISO data to characters, '1' or '0') */
	    int k = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
	    for(int i = 0; i < 2; i++)
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	e01e      	b.n	800087a <uartPrint+0x52>
	    for(int j = 7; j >= 0; j--)
 800083c:	2307      	movs	r3, #7
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	e015      	b.n	800086e <uartPrint+0x46>
	       statusWord[k++] = (misoData[i] & (1u << j))?'1':'0';
 8000842:	4a38      	ldr	r2, [pc, #224]	; (8000924 <uartPrint+0xfc>)
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	18d3      	adds	r3, r2, r3
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	001a      	movs	r2, r3
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	40da      	lsrs	r2, r3
 8000850:	0013      	movs	r3, r2
 8000852:	2201      	movs	r2, #1
 8000854:	4013      	ands	r3, r2
 8000856:	d001      	beq.n	800085c <uartPrint+0x34>
 8000858:	2131      	movs	r1, #49	; 0x31
 800085a:	e000      	b.n	800085e <uartPrint+0x36>
 800085c:	2130      	movs	r1, #48	; 0x30
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	1c5a      	adds	r2, r3, #1
 8000862:	617a      	str	r2, [r7, #20]
 8000864:	4a30      	ldr	r2, [pc, #192]	; (8000928 <uartPrint+0x100>)
 8000866:	54d1      	strb	r1, [r2, r3]
	    for(int j = 7; j >= 0; j--)
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	3b01      	subs	r3, #1
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	2b00      	cmp	r3, #0
 8000872:	dae6      	bge.n	8000842 <uartPrint+0x1a>
	    for(int i = 0; i < 2; i++)
 8000874:	693b      	ldr	r3, [r7, #16]
 8000876:	3301      	adds	r3, #1
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	2b01      	cmp	r3, #1
 800087e:	dddd      	ble.n	800083c <uartPrint+0x14>

        /* Print the status word */
	    HAL_UART_Transmit(&huart1, (uint8_t *)"Status word: \r\n", 15, 50);
 8000880:	492a      	ldr	r1, [pc, #168]	; (800092c <uartPrint+0x104>)
 8000882:	482b      	ldr	r0, [pc, #172]	; (8000930 <uartPrint+0x108>)
 8000884:	2332      	movs	r3, #50	; 0x32
 8000886:	220f      	movs	r2, #15
 8000888:	f002 fca4 	bl	80031d4 <HAL_UART_Transmit>
	    HAL_UART_Transmit(&huart1, (uint8_t *)statusWord, 16, 50);
 800088c:	4926      	ldr	r1, [pc, #152]	; (8000928 <uartPrint+0x100>)
 800088e:	4828      	ldr	r0, [pc, #160]	; (8000930 <uartPrint+0x108>)
 8000890:	2332      	movs	r3, #50	; 0x32
 8000892:	2210      	movs	r2, #16
 8000894:	f002 fc9e 	bl	80031d4 <HAL_UART_Transmit>
	    HAL_UART_Transmit(&huart1, (uint8_t *)"\r\n", 2, 50);
 8000898:	4926      	ldr	r1, [pc, #152]	; (8000934 <uartPrint+0x10c>)
 800089a:	4825      	ldr	r0, [pc, #148]	; (8000930 <uartPrint+0x108>)
 800089c:	2332      	movs	r3, #50	; 0x32
 800089e:	2202      	movs	r2, #2
 80008a0:	f002 fc98 	bl	80031d4 <HAL_UART_Transmit>

		/* Print ADC data: */
		for(int j = 0; j < adcWords; j++)
 80008a4:	2300      	movs	r3, #0
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	e02e      	b.n	8000908 <uartPrint+0xe0>
		   {
			  if(j == 0)
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d105      	bne.n	80008bc <uartPrint+0x94>
			    HAL_UART_Transmit(&huart1, (uint8_t *)"ADC data: \r\n", 12, 50);
 80008b0:	4921      	ldr	r1, [pc, #132]	; (8000938 <uartPrint+0x110>)
 80008b2:	481f      	ldr	r0, [pc, #124]	; (8000930 <uartPrint+0x108>)
 80008b4:	2332      	movs	r3, #50	; 0x32
 80008b6:	220c      	movs	r2, #12
 80008b8:	f002 fc8c 	bl	80031d4 <HAL_UART_Transmit>

			  uint16_to_char_array(adcDataCpy[j], uartBuf[j], sizeof(uartBuf[j])); /* Currently the dummy buffer, adcDataCpy is used */
 80008bc:	4b1f      	ldr	r3, [pc, #124]	; (800093c <uartPrint+0x114>)
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	0052      	lsls	r2, r2, #1
 80008c2:	5ad0      	ldrh	r0, [r2, r3]
 80008c4:	68ba      	ldr	r2, [r7, #8]
 80008c6:	0013      	movs	r3, r2
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	189b      	adds	r3, r3, r2
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	001a      	movs	r2, r3
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	189b      	adds	r3, r3, r2
 80008d4:	2206      	movs	r2, #6
 80008d6:	0019      	movs	r1, r3
 80008d8:	f7ff ff5e 	bl	8000798 <uint16_to_char_array>
			  HAL_UART_Transmit(&huart1, (uint8_t *)uartBuf[j], sizeof(uartBuf[j]), 50);
 80008dc:	68ba      	ldr	r2, [r7, #8]
 80008de:	0013      	movs	r3, r2
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	189b      	adds	r3, r3, r2
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	001a      	movs	r2, r3
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	1899      	adds	r1, r3, r2
 80008ec:	4810      	ldr	r0, [pc, #64]	; (8000930 <uartPrint+0x108>)
 80008ee:	2332      	movs	r3, #50	; 0x32
 80008f0:	2206      	movs	r2, #6
 80008f2:	f002 fc6f 	bl	80031d4 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, (uint8_t *)"\r\n", 2, 50);
 80008f6:	490f      	ldr	r1, [pc, #60]	; (8000934 <uartPrint+0x10c>)
 80008f8:	480d      	ldr	r0, [pc, #52]	; (8000930 <uartPrint+0x108>)
 80008fa:	2332      	movs	r3, #50	; 0x32
 80008fc:	2202      	movs	r2, #2
 80008fe:	f002 fc69 	bl	80031d4 <HAL_UART_Transmit>
		for(int j = 0; j < adcWords; j++)
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	3301      	adds	r3, #1
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	2b05      	cmp	r3, #5
 800090c:	ddcd      	ble.n	80008aa <uartPrint+0x82>
			}

		/* New blank line */
		HAL_UART_Transmit(&huart1, (uint8_t *)"\r\n", 2, 50);
 800090e:	4909      	ldr	r1, [pc, #36]	; (8000934 <uartPrint+0x10c>)
 8000910:	4807      	ldr	r0, [pc, #28]	; (8000930 <uartPrint+0x108>)
 8000912:	2332      	movs	r3, #50	; 0x32
 8000914:	2202      	movs	r2, #2
 8000916:	f002 fc5d 	bl	80031d4 <HAL_UART_Transmit>
  }
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	b006      	add	sp, #24
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	200001d8 	.word	0x200001d8
 8000928:	20000234 	.word	0x20000234
 800092c:	08003e4c 	.word	0x08003e4c
 8000930:	200000e4 	.word	0x200000e4
 8000934:	08003e5c 	.word	0x08003e5c
 8000938:	08003e60 	.word	0x08003e60
 800093c:	20000004 	.word	0x20000004

08000940 <HAL_UART_TxCpltCallback>:

/* UART transmit interrupt callback function */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
   if (huart == &huart1)
 8000948:	687a      	ldr	r2, [r7, #4]
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_UART_TxCpltCallback+0x34>)
 800094c:	429a      	cmp	r2, r3
 800094e:	d10c      	bne.n	800096a <HAL_UART_TxCpltCallback+0x2a>
    {
	  dmaTim = 0;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <HAL_UART_TxCpltCallback+0x38>)
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]
	  HAL_UART_DMAStop(&huart1); /* Circular DMA buffer, has to be stopped and explicitly modified */
 8000956:	4b07      	ldr	r3, [pc, #28]	; (8000974 <HAL_UART_TxCpltCallback+0x34>)
 8000958:	0018      	movs	r0, r3
 800095a:	f002 fd6b 	bl	8003434 <HAL_UART_DMAStop>
      uartPrint(adcDataCpy, uartBuf);
 800095e:	4a07      	ldr	r2, [pc, #28]	; (800097c <HAL_UART_TxCpltCallback+0x3c>)
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <HAL_UART_TxCpltCallback+0x40>)
 8000962:	0011      	movs	r1, r2
 8000964:	0018      	movs	r0, r3
 8000966:	f7ff ff5f 	bl	8000828 <uartPrint>
    }
}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	b002      	add	sp, #8
 8000970:	bd80      	pop	{r7, pc}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	200000e4 	.word	0x200000e4
 8000978:	200001f8 	.word	0x200001f8
 800097c:	200001fc 	.word	0x200001fc
 8000980:	20000004 	.word	0x20000004

08000984 <HAL_TIM_PeriodElapsedCallback>:

/* 31.25us timer callback function, for SPI communication */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af02      	add	r7, sp, #8
 800098a:	6078      	str	r0, [r7, #4]
	/* Timer 1 elapsed */
    if (htim->Instance == TIM1)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a1e      	ldr	r2, [pc, #120]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d12a      	bne.n	80009ec <HAL_TIM_PeriodElapsedCallback+0x68>
        {
    	   currentTime = TIM1->CNT; /* Benchmarking, value represents the current number of timer ticks */
 8000996:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000998:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800099a:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800099c:	601a      	str	r2, [r3, #0]

			 HAL_GPIO_WritePin(SPI1_SS_GPIO_Port, SPI1_SS_Pin, GPIO_PIN_RESET);        /* Pull SS pin LOW */
 800099e:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	2110      	movs	r1, #16
 80009a4:	0018      	movs	r0, r3
 80009a6:	f000 fe49 	bl	800163c <HAL_GPIO_WritePin>

			 HAL_SPI_TransmitReceive(&hspi1, txData, rxData, spiSize, 100);            /* Transmit and receive (FULL-DUPLEX) */
 80009aa:	4a1b      	ldr	r2, [pc, #108]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80009ac:	491b      	ldr	r1, [pc, #108]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x98>)
 80009ae:	481c      	ldr	r0, [pc, #112]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80009b0:	2364      	movs	r3, #100	; 0x64
 80009b2:	9300      	str	r3, [sp, #0]
 80009b4:	2312      	movs	r3, #18
 80009b6:	f001 fc43 	bl	8002240 <HAL_SPI_TransmitReceive>

			 HAL_GPIO_WritePin(SPI1_SS_GPIO_Port, SPI1_SS_Pin, GPIO_PIN_SET);          /* Pull SS pin HIGH */
 80009ba:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80009bc:	2201      	movs	r2, #1
 80009be:	2110      	movs	r1, #16
 80009c0:	0018      	movs	r0, r3
 80009c2:	f000 fe3b 	bl	800163c <HAL_GPIO_WritePin>

			 /* Handle received data */
			 handleReceivedData(rxData, adcData);
 80009c6:	4a17      	ldr	r2, [pc, #92]	; (8000a24 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80009ca:	0011      	movs	r1, r2
 80009cc:	0018      	movs	r0, r3
 80009ce:	f7ff fecb 	bl	8000768 <handleReceivedData>

			 /* Initialize new UART transmission via DMA interrupt */
			 if(!dmaTim)
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d108      	bne.n	80009ec <HAL_TIM_PeriodElapsedCallback+0x68>
			   {
			      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)"/", 1);
 80009da:	4914      	ldr	r1, [pc, #80]	; (8000a2c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80009de:	2201      	movs	r2, #1
 80009e0:	0018      	movs	r0, r3
 80009e2:	f002 fc97 	bl	8003314 <HAL_UART_Transmit_DMA>
			      dmaTim = 1;
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	701a      	strb	r2, [r3, #0]
			   }
         }
             elapsedTime = abs((int)(TIM1->CNT)-(int)currentTime); /* Elapsed time for TIM1 callback, in ticks */
 80009ec:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80009ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f0:	001a      	movs	r2, r3
 80009f2:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	1ad3      	subs	r3, r2, r3
 80009f8:	17da      	asrs	r2, r3, #31
 80009fa:	189b      	adds	r3, r3, r2
 80009fc:	4053      	eors	r3, r2
 80009fe:	001a      	movs	r2, r3
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000a02:	601a      	str	r2, [r3, #0]
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	b002      	add	sp, #8
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40012c00 	.word	0x40012c00
 8000a10:	20000244 	.word	0x20000244
 8000a14:	48000800 	.word	0x48000800
 8000a18:	200001c4 	.word	0x200001c4
 8000a1c:	200001b0 	.word	0x200001b0
 8000a20:	20000038 	.word	0x20000038
 8000a24:	200001ec 	.word	0x200001ec
 8000a28:	200001f8 	.word	0x200001f8
 8000a2c:	08003e70 	.word	0x08003e70
 8000a30:	200000e4 	.word	0x200000e4
 8000a34:	20000248 	.word	0x20000248

08000a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
}
 8000a3e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <Error_Handler+0x8>
	...

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <HAL_MspInit+0x44>)
 8000a4c:	699a      	ldr	r2, [r3, #24]
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <HAL_MspInit+0x44>)
 8000a50:	2101      	movs	r1, #1
 8000a52:	430a      	orrs	r2, r1
 8000a54:	619a      	str	r2, [r3, #24]
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <HAL_MspInit+0x44>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <HAL_MspInit+0x44>)
 8000a64:	69da      	ldr	r2, [r3, #28]
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <HAL_MspInit+0x44>)
 8000a68:	2180      	movs	r1, #128	; 0x80
 8000a6a:	0549      	lsls	r1, r1, #21
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	61da      	str	r2, [r3, #28]
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <HAL_MspInit+0x44>)
 8000a72:	69da      	ldr	r2, [r3, #28]
 8000a74:	2380      	movs	r3, #128	; 0x80
 8000a76:	055b      	lsls	r3, r3, #21
 8000a78:	4013      	ands	r3, r2
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	b002      	add	sp, #8
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	40021000 	.word	0x40021000

08000a8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b08b      	sub	sp, #44	; 0x2c
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	2414      	movs	r4, #20
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	0018      	movs	r0, r3
 8000a9a:	2314      	movs	r3, #20
 8000a9c:	001a      	movs	r2, r3
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	f003 f9bf 	bl	8003e22 <memset>
  if(hspi->Instance==SPI1)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a1c      	ldr	r2, [pc, #112]	; (8000b1c <HAL_SPI_MspInit+0x90>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d132      	bne.n	8000b14 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000aae:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <HAL_SPI_MspInit+0x94>)
 8000ab0:	699a      	ldr	r2, [r3, #24]
 8000ab2:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <HAL_SPI_MspInit+0x94>)
 8000ab4:	2180      	movs	r1, #128	; 0x80
 8000ab6:	0149      	lsls	r1, r1, #5
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	619a      	str	r2, [r3, #24]
 8000abc:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <HAL_SPI_MspInit+0x94>)
 8000abe:	699a      	ldr	r2, [r3, #24]
 8000ac0:	2380      	movs	r3, #128	; 0x80
 8000ac2:	015b      	lsls	r3, r3, #5
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <HAL_SPI_MspInit+0x94>)
 8000acc:	695a      	ldr	r2, [r3, #20]
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <HAL_SPI_MspInit+0x94>)
 8000ad0:	2180      	movs	r1, #128	; 0x80
 8000ad2:	0289      	lsls	r1, r1, #10
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	615a      	str	r2, [r3, #20]
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <HAL_SPI_MspInit+0x94>)
 8000ada:	695a      	ldr	r2, [r3, #20]
 8000adc:	2380      	movs	r3, #128	; 0x80
 8000ade:	029b      	lsls	r3, r3, #10
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ae6:	0021      	movs	r1, r4
 8000ae8:	187b      	adds	r3, r7, r1
 8000aea:	22e0      	movs	r2, #224	; 0xe0
 8000aec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	2202      	movs	r2, #2
 8000af2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	2203      	movs	r2, #3
 8000afe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	187a      	adds	r2, r7, r1
 8000b08:	2390      	movs	r3, #144	; 0x90
 8000b0a:	05db      	lsls	r3, r3, #23
 8000b0c:	0011      	movs	r1, r2
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f000 fc24 	bl	800135c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b00b      	add	sp, #44	; 0x2c
 8000b1a:	bd90      	pop	{r4, r7, pc}
 8000b1c:	40013000 	.word	0x40013000
 8000b20:	40021000 	.word	0x40021000

08000b24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a0e      	ldr	r2, [pc, #56]	; (8000b6c <HAL_TIM_Base_MspInit+0x48>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d115      	bne.n	8000b62 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <HAL_TIM_Base_MspInit+0x4c>)
 8000b38:	699a      	ldr	r2, [r3, #24]
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <HAL_TIM_Base_MspInit+0x4c>)
 8000b3c:	2180      	movs	r1, #128	; 0x80
 8000b3e:	0109      	lsls	r1, r1, #4
 8000b40:	430a      	orrs	r2, r1
 8000b42:	619a      	str	r2, [r3, #24]
 8000b44:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <HAL_TIM_Base_MspInit+0x4c>)
 8000b46:	699a      	ldr	r2, [r3, #24]
 8000b48:	2380      	movs	r3, #128	; 0x80
 8000b4a:	011b      	lsls	r3, r3, #4
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2100      	movs	r1, #0
 8000b56:	200d      	movs	r0, #13
 8000b58:	f000 f9f4 	bl	8000f44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000b5c:	200d      	movs	r0, #13
 8000b5e:	f000 fa06 	bl	8000f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	46bd      	mov	sp, r7
 8000b66:	b004      	add	sp, #16
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	40012c00 	.word	0x40012c00
 8000b70:	40021000 	.word	0x40021000

08000b74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b08b      	sub	sp, #44	; 0x2c
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	2414      	movs	r4, #20
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	0018      	movs	r0, r3
 8000b82:	2314      	movs	r3, #20
 8000b84:	001a      	movs	r2, r3
 8000b86:	2100      	movs	r1, #0
 8000b88:	f003 f94b 	bl	8003e22 <memset>
  if(huart->Instance==USART1)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a30      	ldr	r2, [pc, #192]	; (8000c54 <HAL_UART_MspInit+0xe0>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d159      	bne.n	8000c4a <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b96:	4b30      	ldr	r3, [pc, #192]	; (8000c58 <HAL_UART_MspInit+0xe4>)
 8000b98:	699a      	ldr	r2, [r3, #24]
 8000b9a:	4b2f      	ldr	r3, [pc, #188]	; (8000c58 <HAL_UART_MspInit+0xe4>)
 8000b9c:	2180      	movs	r1, #128	; 0x80
 8000b9e:	01c9      	lsls	r1, r1, #7
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	619a      	str	r2, [r3, #24]
 8000ba4:	4b2c      	ldr	r3, [pc, #176]	; (8000c58 <HAL_UART_MspInit+0xe4>)
 8000ba6:	699a      	ldr	r2, [r3, #24]
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	01db      	lsls	r3, r3, #7
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	4b29      	ldr	r3, [pc, #164]	; (8000c58 <HAL_UART_MspInit+0xe4>)
 8000bb4:	695a      	ldr	r2, [r3, #20]
 8000bb6:	4b28      	ldr	r3, [pc, #160]	; (8000c58 <HAL_UART_MspInit+0xe4>)
 8000bb8:	2180      	movs	r1, #128	; 0x80
 8000bba:	0289      	lsls	r1, r1, #10
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	615a      	str	r2, [r3, #20]
 8000bc0:	4b25      	ldr	r3, [pc, #148]	; (8000c58 <HAL_UART_MspInit+0xe4>)
 8000bc2:	695a      	ldr	r2, [r3, #20]
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	029b      	lsls	r3, r3, #10
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	22c0      	movs	r2, #192	; 0xc0
 8000bd2:	00d2      	lsls	r2, r2, #3
 8000bd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	0021      	movs	r1, r4
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	2202      	movs	r2, #2
 8000bdc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	187b      	adds	r3, r7, r1
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	2203      	movs	r2, #3
 8000be8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	2201      	movs	r2, #1
 8000bee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf0:	187a      	adds	r2, r7, r1
 8000bf2:	2390      	movs	r3, #144	; 0x90
 8000bf4:	05db      	lsls	r3, r3, #23
 8000bf6:	0011      	movs	r1, r2
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f000 fbaf 	bl	800135c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <HAL_UART_MspInit+0xe8>)
 8000c00:	4a17      	ldr	r2, [pc, #92]	; (8000c60 <HAL_UART_MspInit+0xec>)
 8000c02:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c04:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <HAL_UART_MspInit+0xe8>)
 8000c06:	2210      	movs	r2, #16
 8000c08:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <HAL_UART_MspInit+0xe8>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <HAL_UART_MspInit+0xe8>)
 8000c12:	2280      	movs	r2, #128	; 0x80
 8000c14:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <HAL_UART_MspInit+0xe8>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <HAL_UART_MspInit+0xe8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <HAL_UART_MspInit+0xe8>)
 8000c24:	2220      	movs	r2, #32
 8000c26:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <HAL_UART_MspInit+0xe8>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <HAL_UART_MspInit+0xe8>)
 8000c30:	0018      	movs	r0, r3
 8000c32:	f000 f9b9 	bl	8000fa8 <HAL_DMA_Init>
 8000c36:	1e03      	subs	r3, r0, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000c3a:	f7ff fefd 	bl	8000a38 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a06      	ldr	r2, [pc, #24]	; (8000c5c <HAL_UART_MspInit+0xe8>)
 8000c42:	671a      	str	r2, [r3, #112]	; 0x70
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <HAL_UART_MspInit+0xe8>)
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	b00b      	add	sp, #44	; 0x2c
 8000c50:	bd90      	pop	{r4, r7, pc}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	40013800 	.word	0x40013800
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	2000016c 	.word	0x2000016c
 8000c60:	4002001c 	.word	0x4002001c

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <NMI_Handler+0x4>

08000c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <HardFault_Handler+0x4>

08000c70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c74:	46c0      	nop			; (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c88:	f000 f894 	bl	8000db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8c:	46c0      	nop			; (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f000 fa6a 	bl	8001174 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	2000016c 	.word	0x2000016c

08000cac <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cb0:	4b03      	ldr	r3, [pc, #12]	; (8000cc0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f001 feb8 	bl	8002a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	2000009c 	.word	0x2000009c

08000cc4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000cc8:	46c0      	nop			; (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cd0:	480d      	ldr	r0, [pc, #52]	; (8000d08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cd2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cd4:	f7ff fff6 	bl	8000cc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd8:	480c      	ldr	r0, [pc, #48]	; (8000d0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000cda:	490d      	ldr	r1, [pc, #52]	; (8000d10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <LoopForever+0xe>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce0:	e002      	b.n	8000ce8 <LoopCopyDataInit>

08000ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce6:	3304      	adds	r3, #4

08000ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cec:	d3f9      	bcc.n	8000ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cee:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf0:	4c0a      	ldr	r4, [pc, #40]	; (8000d1c <LoopForever+0x16>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf4:	e001      	b.n	8000cfa <LoopFillZerobss>

08000cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf8:	3204      	adds	r2, #4

08000cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cfc:	d3fb      	bcc.n	8000cf6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cfe:	f003 f863 	bl	8003dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d02:	f7ff fa8d 	bl	8000220 <main>

08000d06 <LoopForever>:

LoopForever:
    b LoopForever
 8000d06:	e7fe      	b.n	8000d06 <LoopForever>
  ldr   r0, =_estack
 8000d08:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d10:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000d14:	08003eb4 	.word	0x08003eb4
  ldr r2, =_sbss
 8000d18:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000d1c:	20000250 	.word	0x20000250

08000d20 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC1_IRQHandler>
	...

08000d24 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d28:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <HAL_Init+0x24>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_Init+0x24>)
 8000d2e:	2110      	movs	r1, #16
 8000d30:	430a      	orrs	r2, r1
 8000d32:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d34:	2003      	movs	r0, #3
 8000d36:	f000 f809 	bl	8000d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d3a:	f7ff fe83 	bl	8000a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d3e:	2300      	movs	r3, #0
}
 8000d40:	0018      	movs	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	40022000 	.word	0x40022000

08000d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b590      	push	{r4, r7, lr}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d54:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <HAL_InitTick+0x5c>)
 8000d56:	681c      	ldr	r4, [r3, #0]
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <HAL_InitTick+0x60>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	0019      	movs	r1, r3
 8000d5e:	23fa      	movs	r3, #250	; 0xfa
 8000d60:	0098      	lsls	r0, r3, #2
 8000d62:	f7ff f9d1 	bl	8000108 <__udivsi3>
 8000d66:	0003      	movs	r3, r0
 8000d68:	0019      	movs	r1, r3
 8000d6a:	0020      	movs	r0, r4
 8000d6c:	f7ff f9cc 	bl	8000108 <__udivsi3>
 8000d70:	0003      	movs	r3, r0
 8000d72:	0018      	movs	r0, r3
 8000d74:	f000 f90b 	bl	8000f8e <HAL_SYSTICK_Config>
 8000d78:	1e03      	subs	r3, r0, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e00f      	b.n	8000da0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d80b      	bhi.n	8000d9e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	2301      	movs	r3, #1
 8000d8a:	425b      	negs	r3, r3
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f000 f8d8 	bl	8000f44 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_InitTick+0x64>)
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	e000      	b.n	8000da0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
}
 8000da0:	0018      	movs	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b003      	add	sp, #12
 8000da6:	bd90      	pop	{r4, r7, pc}
 8000da8:	20000010 	.word	0x20000010
 8000dac:	20000018 	.word	0x20000018
 8000db0:	20000014 	.word	0x20000014

08000db4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <HAL_IncTick+0x1c>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	001a      	movs	r2, r3
 8000dbe:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <HAL_IncTick+0x20>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	18d2      	adds	r2, r2, r3
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <HAL_IncTick+0x20>)
 8000dc6:	601a      	str	r2, [r3, #0]
}
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	20000018 	.word	0x20000018
 8000dd4:	2000024c 	.word	0x2000024c

08000dd8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;
 8000ddc:	4b02      	ldr	r3, [pc, #8]	; (8000de8 <HAL_GetTick+0x10>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	0018      	movs	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	2000024c 	.word	0x2000024c

08000dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	0002      	movs	r2, r0
 8000df4:	1dfb      	adds	r3, r7, #7
 8000df6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000df8:	1dfb      	adds	r3, r7, #7
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b7f      	cmp	r3, #127	; 0x7f
 8000dfe:	d809      	bhi.n	8000e14 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e00:	1dfb      	adds	r3, r7, #7
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	001a      	movs	r2, r3
 8000e06:	231f      	movs	r3, #31
 8000e08:	401a      	ands	r2, r3
 8000e0a:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <__NVIC_EnableIRQ+0x30>)
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	4091      	lsls	r1, r2
 8000e10:	000a      	movs	r2, r1
 8000e12:	601a      	str	r2, [r3, #0]
  }
}
 8000e14:	46c0      	nop			; (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	b002      	add	sp, #8
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	e000e100 	.word	0xe000e100

08000e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e20:	b590      	push	{r4, r7, lr}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	0002      	movs	r2, r0
 8000e28:	6039      	str	r1, [r7, #0]
 8000e2a:	1dfb      	adds	r3, r7, #7
 8000e2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e2e:	1dfb      	adds	r3, r7, #7
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b7f      	cmp	r3, #127	; 0x7f
 8000e34:	d828      	bhi.n	8000e88 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e36:	4a2f      	ldr	r2, [pc, #188]	; (8000ef4 <__NVIC_SetPriority+0xd4>)
 8000e38:	1dfb      	adds	r3, r7, #7
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	b25b      	sxtb	r3, r3
 8000e3e:	089b      	lsrs	r3, r3, #2
 8000e40:	33c0      	adds	r3, #192	; 0xc0
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	589b      	ldr	r3, [r3, r2]
 8000e46:	1dfa      	adds	r2, r7, #7
 8000e48:	7812      	ldrb	r2, [r2, #0]
 8000e4a:	0011      	movs	r1, r2
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	400a      	ands	r2, r1
 8000e50:	00d2      	lsls	r2, r2, #3
 8000e52:	21ff      	movs	r1, #255	; 0xff
 8000e54:	4091      	lsls	r1, r2
 8000e56:	000a      	movs	r2, r1
 8000e58:	43d2      	mvns	r2, r2
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	019b      	lsls	r3, r3, #6
 8000e62:	22ff      	movs	r2, #255	; 0xff
 8000e64:	401a      	ands	r2, r3
 8000e66:	1dfb      	adds	r3, r7, #7
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	4003      	ands	r3, r0
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e74:	481f      	ldr	r0, [pc, #124]	; (8000ef4 <__NVIC_SetPriority+0xd4>)
 8000e76:	1dfb      	adds	r3, r7, #7
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	b25b      	sxtb	r3, r3
 8000e7c:	089b      	lsrs	r3, r3, #2
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	33c0      	adds	r3, #192	; 0xc0
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e86:	e031      	b.n	8000eec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e88:	4a1b      	ldr	r2, [pc, #108]	; (8000ef8 <__NVIC_SetPriority+0xd8>)
 8000e8a:	1dfb      	adds	r3, r7, #7
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	0019      	movs	r1, r3
 8000e90:	230f      	movs	r3, #15
 8000e92:	400b      	ands	r3, r1
 8000e94:	3b08      	subs	r3, #8
 8000e96:	089b      	lsrs	r3, r3, #2
 8000e98:	3306      	adds	r3, #6
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	18d3      	adds	r3, r2, r3
 8000e9e:	3304      	adds	r3, #4
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	1dfa      	adds	r2, r7, #7
 8000ea4:	7812      	ldrb	r2, [r2, #0]
 8000ea6:	0011      	movs	r1, r2
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	400a      	ands	r2, r1
 8000eac:	00d2      	lsls	r2, r2, #3
 8000eae:	21ff      	movs	r1, #255	; 0xff
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	000a      	movs	r2, r1
 8000eb4:	43d2      	mvns	r2, r2
 8000eb6:	401a      	ands	r2, r3
 8000eb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	019b      	lsls	r3, r3, #6
 8000ebe:	22ff      	movs	r2, #255	; 0xff
 8000ec0:	401a      	ands	r2, r3
 8000ec2:	1dfb      	adds	r3, r7, #7
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	2303      	movs	r3, #3
 8000eca:	4003      	ands	r3, r0
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ed0:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <__NVIC_SetPriority+0xd8>)
 8000ed2:	1dfb      	adds	r3, r7, #7
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	001c      	movs	r4, r3
 8000ed8:	230f      	movs	r3, #15
 8000eda:	4023      	ands	r3, r4
 8000edc:	3b08      	subs	r3, #8
 8000ede:	089b      	lsrs	r3, r3, #2
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	3306      	adds	r3, #6
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	18c3      	adds	r3, r0, r3
 8000ee8:	3304      	adds	r3, #4
 8000eea:	601a      	str	r2, [r3, #0]
}
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b003      	add	sp, #12
 8000ef2:	bd90      	pop	{r4, r7, pc}
 8000ef4:	e000e100 	.word	0xe000e100
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	1e5a      	subs	r2, r3, #1
 8000f08:	2380      	movs	r3, #128	; 0x80
 8000f0a:	045b      	lsls	r3, r3, #17
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d301      	bcc.n	8000f14 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f10:	2301      	movs	r3, #1
 8000f12:	e010      	b.n	8000f36 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f14:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <SysTick_Config+0x44>)
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	3a01      	subs	r2, #1
 8000f1a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	425b      	negs	r3, r3
 8000f20:	2103      	movs	r1, #3
 8000f22:	0018      	movs	r0, r3
 8000f24:	f7ff ff7c 	bl	8000e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <SysTick_Config+0x44>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <SysTick_Config+0x44>)
 8000f30:	2207      	movs	r2, #7
 8000f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	0018      	movs	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	b002      	add	sp, #8
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	e000e010 	.word	0xe000e010

08000f44 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	210f      	movs	r1, #15
 8000f50:	187b      	adds	r3, r7, r1
 8000f52:	1c02      	adds	r2, r0, #0
 8000f54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	187b      	adds	r3, r7, r1
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	b25b      	sxtb	r3, r3
 8000f5e:	0011      	movs	r1, r2
 8000f60:	0018      	movs	r0, r3
 8000f62:	f7ff ff5d 	bl	8000e20 <__NVIC_SetPriority>
}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b004      	add	sp, #16
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	0002      	movs	r2, r0
 8000f76:	1dfb      	adds	r3, r7, #7
 8000f78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f7a:	1dfb      	adds	r3, r7, #7
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	b25b      	sxtb	r3, r3
 8000f80:	0018      	movs	r0, r3
 8000f82:	f7ff ff33 	bl	8000dec <__NVIC_EnableIRQ>
}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b002      	add	sp, #8
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f7ff ffaf 	bl	8000efc <SysTick_Config>
 8000f9e:	0003      	movs	r3, r0
}
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b002      	add	sp, #8
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d101      	bne.n	8000fbe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e036      	b.n	800102c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2221      	movs	r2, #33	; 0x21
 8000fc2:	2102      	movs	r1, #2
 8000fc4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4a18      	ldr	r2, [pc, #96]	; (8001034 <HAL_DMA_Init+0x8c>)
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000fde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ff6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69db      	ldr	r3, [r3, #28]
 8000ffc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	4313      	orrs	r3, r2
 8001002:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	68fa      	ldr	r2, [r7, #12]
 800100a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	0018      	movs	r0, r3
 8001010:	f000 f988 	bl	8001324 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2221      	movs	r2, #33	; 0x21
 800101e:	2101      	movs	r1, #1
 8001020:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2220      	movs	r2, #32
 8001026:	2100      	movs	r1, #0
 8001028:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800102a:	2300      	movs	r3, #0
}
 800102c:	0018      	movs	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	b004      	add	sp, #16
 8001032:	bd80      	pop	{r7, pc}
 8001034:	ffffc00f 	.word	0xffffc00f

08001038 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001046:	2317      	movs	r3, #23
 8001048:	18fb      	adds	r3, r7, r3
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2220      	movs	r2, #32
 8001052:	5c9b      	ldrb	r3, [r3, r2]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d101      	bne.n	800105c <HAL_DMA_Start_IT+0x24>
 8001058:	2302      	movs	r3, #2
 800105a:	e04f      	b.n	80010fc <HAL_DMA_Start_IT+0xc4>
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2220      	movs	r2, #32
 8001060:	2101      	movs	r1, #1
 8001062:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2221      	movs	r2, #33	; 0x21
 8001068:	5c9b      	ldrb	r3, [r3, r2]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b01      	cmp	r3, #1
 800106e:	d13a      	bne.n	80010e6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2221      	movs	r2, #33	; 0x21
 8001074:	2102      	movs	r1, #2
 8001076:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2200      	movs	r2, #0
 800107c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2101      	movs	r1, #1
 800108a:	438a      	bics	r2, r1
 800108c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	68b9      	ldr	r1, [r7, #8]
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f000 f919 	bl	80012cc <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d008      	beq.n	80010b4 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	210e      	movs	r1, #14
 80010ae:	430a      	orrs	r2, r1
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	e00f      	b.n	80010d4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	210a      	movs	r1, #10
 80010c0:	430a      	orrs	r2, r1
 80010c2:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2104      	movs	r1, #4
 80010d0:	438a      	bics	r2, r1
 80010d2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2101      	movs	r1, #1
 80010e0:	430a      	orrs	r2, r1
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	e007      	b.n	80010f6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2220      	movs	r2, #32
 80010ea:	2100      	movs	r1, #0
 80010ec:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80010ee:	2317      	movs	r3, #23
 80010f0:	18fb      	adds	r3, r7, r3
 80010f2:	2202      	movs	r2, #2
 80010f4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80010f6:	2317      	movs	r3, #23
 80010f8:	18fb      	adds	r3, r7, r3
 80010fa:	781b      	ldrb	r3, [r3, #0]
}
 80010fc:	0018      	movs	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	b006      	add	sp, #24
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2221      	movs	r2, #33	; 0x21
 8001110:	5c9b      	ldrb	r3, [r3, r2]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d008      	beq.n	800112a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2204      	movs	r2, #4
 800111c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2220      	movs	r2, #32
 8001122:	2100      	movs	r1, #0
 8001124:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e020      	b.n	800116c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	210e      	movs	r1, #14
 8001136:	438a      	bics	r2, r1
 8001138:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2101      	movs	r1, #1
 8001146:	438a      	bics	r2, r1
 8001148:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001152:	2101      	movs	r1, #1
 8001154:	4091      	lsls	r1, r2
 8001156:	000a      	movs	r2, r1
 8001158:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2221      	movs	r2, #33	; 0x21
 800115e:	2101      	movs	r1, #1
 8001160:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2220      	movs	r2, #32
 8001166:	2100      	movs	r1, #0
 8001168:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800116a:	2300      	movs	r3, #0
}
 800116c:	0018      	movs	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	b002      	add	sp, #8
 8001172:	bd80      	pop	{r7, pc}

08001174 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	2204      	movs	r2, #4
 8001192:	409a      	lsls	r2, r3
 8001194:	0013      	movs	r3, r2
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	4013      	ands	r3, r2
 800119a:	d024      	beq.n	80011e6 <HAL_DMA_IRQHandler+0x72>
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	2204      	movs	r2, #4
 80011a0:	4013      	ands	r3, r2
 80011a2:	d020      	beq.n	80011e6 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2220      	movs	r2, #32
 80011ac:	4013      	ands	r3, r2
 80011ae:	d107      	bne.n	80011c0 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2104      	movs	r1, #4
 80011bc:	438a      	bics	r2, r1
 80011be:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011c8:	2104      	movs	r1, #4
 80011ca:	4091      	lsls	r1, r2
 80011cc:	000a      	movs	r2, r1
 80011ce:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d100      	bne.n	80011da <HAL_DMA_IRQHandler+0x66>
 80011d8:	e06a      	b.n	80012b0 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	0010      	movs	r0, r2
 80011e2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80011e4:	e064      	b.n	80012b0 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	2202      	movs	r2, #2
 80011ec:	409a      	lsls	r2, r3
 80011ee:	0013      	movs	r3, r2
 80011f0:	68fa      	ldr	r2, [r7, #12]
 80011f2:	4013      	ands	r3, r2
 80011f4:	d02b      	beq.n	800124e <HAL_DMA_IRQHandler+0xda>
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	2202      	movs	r2, #2
 80011fa:	4013      	ands	r3, r2
 80011fc:	d027      	beq.n	800124e <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2220      	movs	r2, #32
 8001206:	4013      	ands	r3, r2
 8001208:	d10b      	bne.n	8001222 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	210a      	movs	r1, #10
 8001216:	438a      	bics	r2, r1
 8001218:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2221      	movs	r2, #33	; 0x21
 800121e:	2101      	movs	r1, #1
 8001220:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800122a:	2102      	movs	r1, #2
 800122c:	4091      	lsls	r1, r2
 800122e:	000a      	movs	r2, r1
 8001230:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2220      	movs	r2, #32
 8001236:	2100      	movs	r1, #0
 8001238:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123e:	2b00      	cmp	r3, #0
 8001240:	d036      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	0010      	movs	r0, r2
 800124a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800124c:	e030      	b.n	80012b0 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	2208      	movs	r2, #8
 8001254:	409a      	lsls	r2, r3
 8001256:	0013      	movs	r3, r2
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	4013      	ands	r3, r2
 800125c:	d028      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x13c>
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	2208      	movs	r2, #8
 8001262:	4013      	ands	r3, r2
 8001264:	d024      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	210e      	movs	r1, #14
 8001272:	438a      	bics	r2, r1
 8001274:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800127e:	2101      	movs	r1, #1
 8001280:	4091      	lsls	r1, r2
 8001282:	000a      	movs	r2, r1
 8001284:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2201      	movs	r2, #1
 800128a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2221      	movs	r2, #33	; 0x21
 8001290:	2101      	movs	r1, #1
 8001292:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2220      	movs	r2, #32
 8001298:	2100      	movs	r1, #0
 800129a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d005      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	0010      	movs	r0, r2
 80012ac:	4798      	blx	r3
    }
  }
}
 80012ae:	e7ff      	b.n	80012b0 <HAL_DMA_IRQHandler+0x13c>
 80012b0:	46c0      	nop			; (mov r8, r8)
 80012b2:	46bd      	mov	sp, r7
 80012b4:	b004      	add	sp, #16
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80012c4:	0018      	movs	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b002      	add	sp, #8
 80012ca:	bd80      	pop	{r7, pc}

080012cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
 80012d8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012e2:	2101      	movs	r1, #1
 80012e4:	4091      	lsls	r1, r2
 80012e6:	000a      	movs	r2, r1
 80012e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b10      	cmp	r3, #16
 80012f8:	d108      	bne.n	800130c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800130a:	e007      	b.n	800131c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	68ba      	ldr	r2, [r7, #8]
 8001312:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	60da      	str	r2, [r3, #12]
}
 800131c:	46c0      	nop			; (mov r8, r8)
 800131e:	46bd      	mov	sp, r7
 8001320:	b004      	add	sp, #16
 8001322:	bd80      	pop	{r7, pc}

08001324 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a08      	ldr	r2, [pc, #32]	; (8001354 <DMA_CalcBaseAndBitshift+0x30>)
 8001332:	4694      	mov	ip, r2
 8001334:	4463      	add	r3, ip
 8001336:	2114      	movs	r1, #20
 8001338:	0018      	movs	r0, r3
 800133a:	f7fe fee5 	bl	8000108 <__udivsi3>
 800133e:	0003      	movs	r3, r0
 8001340:	009a      	lsls	r2, r3, #2
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a03      	ldr	r2, [pc, #12]	; (8001358 <DMA_CalcBaseAndBitshift+0x34>)
 800134a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800134c:	46c0      	nop			; (mov r8, r8)
 800134e:	46bd      	mov	sp, r7
 8001350:	b002      	add	sp, #8
 8001352:	bd80      	pop	{r7, pc}
 8001354:	bffdfff8 	.word	0xbffdfff8
 8001358:	40020000 	.word	0x40020000

0800135c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800136a:	e14f      	b.n	800160c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2101      	movs	r1, #1
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	4091      	lsls	r1, r2
 8001376:	000a      	movs	r2, r1
 8001378:	4013      	ands	r3, r2
 800137a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d100      	bne.n	8001384 <HAL_GPIO_Init+0x28>
 8001382:	e140      	b.n	8001606 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2203      	movs	r2, #3
 800138a:	4013      	ands	r3, r2
 800138c:	2b01      	cmp	r3, #1
 800138e:	d005      	beq.n	800139c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2203      	movs	r2, #3
 8001396:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001398:	2b02      	cmp	r3, #2
 800139a:	d130      	bne.n	80013fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	2203      	movs	r2, #3
 80013a8:	409a      	lsls	r2, r3
 80013aa:	0013      	movs	r3, r2
 80013ac:	43da      	mvns	r2, r3
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	68da      	ldr	r2, [r3, #12]
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	409a      	lsls	r2, r3
 80013be:	0013      	movs	r3, r2
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013d2:	2201      	movs	r2, #1
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	409a      	lsls	r2, r3
 80013d8:	0013      	movs	r3, r2
 80013da:	43da      	mvns	r2, r3
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	091b      	lsrs	r3, r3, #4
 80013e8:	2201      	movs	r2, #1
 80013ea:	401a      	ands	r2, r3
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	409a      	lsls	r2, r3
 80013f0:	0013      	movs	r3, r2
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2203      	movs	r2, #3
 8001404:	4013      	ands	r3, r2
 8001406:	2b03      	cmp	r3, #3
 8001408:	d017      	beq.n	800143a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	2203      	movs	r2, #3
 8001416:	409a      	lsls	r2, r3
 8001418:	0013      	movs	r3, r2
 800141a:	43da      	mvns	r2, r3
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	689a      	ldr	r2, [r3, #8]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	409a      	lsls	r2, r3
 800142c:	0013      	movs	r3, r2
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2203      	movs	r2, #3
 8001440:	4013      	ands	r3, r2
 8001442:	2b02      	cmp	r3, #2
 8001444:	d123      	bne.n	800148e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	08da      	lsrs	r2, r3, #3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3208      	adds	r2, #8
 800144e:	0092      	lsls	r2, r2, #2
 8001450:	58d3      	ldr	r3, [r2, r3]
 8001452:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	2207      	movs	r2, #7
 8001458:	4013      	ands	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	220f      	movs	r2, #15
 800145e:	409a      	lsls	r2, r3
 8001460:	0013      	movs	r3, r2
 8001462:	43da      	mvns	r2, r3
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	4013      	ands	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	691a      	ldr	r2, [r3, #16]
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	2107      	movs	r1, #7
 8001472:	400b      	ands	r3, r1
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	409a      	lsls	r2, r3
 8001478:	0013      	movs	r3, r2
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	08da      	lsrs	r2, r3, #3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3208      	adds	r2, #8
 8001488:	0092      	lsls	r2, r2, #2
 800148a:	6939      	ldr	r1, [r7, #16]
 800148c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	2203      	movs	r2, #3
 800149a:	409a      	lsls	r2, r3
 800149c:	0013      	movs	r3, r2
 800149e:	43da      	mvns	r2, r3
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2203      	movs	r2, #3
 80014ac:	401a      	ands	r2, r3
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	409a      	lsls	r2, r3
 80014b4:	0013      	movs	r3, r2
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	23c0      	movs	r3, #192	; 0xc0
 80014c8:	029b      	lsls	r3, r3, #10
 80014ca:	4013      	ands	r3, r2
 80014cc:	d100      	bne.n	80014d0 <HAL_GPIO_Init+0x174>
 80014ce:	e09a      	b.n	8001606 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d0:	4b54      	ldr	r3, [pc, #336]	; (8001624 <HAL_GPIO_Init+0x2c8>)
 80014d2:	699a      	ldr	r2, [r3, #24]
 80014d4:	4b53      	ldr	r3, [pc, #332]	; (8001624 <HAL_GPIO_Init+0x2c8>)
 80014d6:	2101      	movs	r1, #1
 80014d8:	430a      	orrs	r2, r1
 80014da:	619a      	str	r2, [r3, #24]
 80014dc:	4b51      	ldr	r3, [pc, #324]	; (8001624 <HAL_GPIO_Init+0x2c8>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	2201      	movs	r2, #1
 80014e2:	4013      	ands	r3, r2
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014e8:	4a4f      	ldr	r2, [pc, #316]	; (8001628 <HAL_GPIO_Init+0x2cc>)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	089b      	lsrs	r3, r3, #2
 80014ee:	3302      	adds	r3, #2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	589b      	ldr	r3, [r3, r2]
 80014f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	2203      	movs	r2, #3
 80014fa:	4013      	ands	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	220f      	movs	r2, #15
 8001500:	409a      	lsls	r2, r3
 8001502:	0013      	movs	r3, r2
 8001504:	43da      	mvns	r2, r3
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	2390      	movs	r3, #144	; 0x90
 8001510:	05db      	lsls	r3, r3, #23
 8001512:	429a      	cmp	r2, r3
 8001514:	d013      	beq.n	800153e <HAL_GPIO_Init+0x1e2>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a44      	ldr	r2, [pc, #272]	; (800162c <HAL_GPIO_Init+0x2d0>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d00d      	beq.n	800153a <HAL_GPIO_Init+0x1de>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a43      	ldr	r2, [pc, #268]	; (8001630 <HAL_GPIO_Init+0x2d4>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d007      	beq.n	8001536 <HAL_GPIO_Init+0x1da>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a42      	ldr	r2, [pc, #264]	; (8001634 <HAL_GPIO_Init+0x2d8>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d101      	bne.n	8001532 <HAL_GPIO_Init+0x1d6>
 800152e:	2303      	movs	r3, #3
 8001530:	e006      	b.n	8001540 <HAL_GPIO_Init+0x1e4>
 8001532:	2305      	movs	r3, #5
 8001534:	e004      	b.n	8001540 <HAL_GPIO_Init+0x1e4>
 8001536:	2302      	movs	r3, #2
 8001538:	e002      	b.n	8001540 <HAL_GPIO_Init+0x1e4>
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <HAL_GPIO_Init+0x1e4>
 800153e:	2300      	movs	r3, #0
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	2103      	movs	r1, #3
 8001544:	400a      	ands	r2, r1
 8001546:	0092      	lsls	r2, r2, #2
 8001548:	4093      	lsls	r3, r2
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001550:	4935      	ldr	r1, [pc, #212]	; (8001628 <HAL_GPIO_Init+0x2cc>)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	089b      	lsrs	r3, r3, #2
 8001556:	3302      	adds	r3, #2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800155e:	4b36      	ldr	r3, [pc, #216]	; (8001638 <HAL_GPIO_Init+0x2dc>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	43da      	mvns	r2, r3
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	4013      	ands	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	035b      	lsls	r3, r3, #13
 8001576:	4013      	ands	r3, r2
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4313      	orrs	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001582:	4b2d      	ldr	r3, [pc, #180]	; (8001638 <HAL_GPIO_Init+0x2dc>)
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001588:	4b2b      	ldr	r3, [pc, #172]	; (8001638 <HAL_GPIO_Init+0x2dc>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	43da      	mvns	r2, r3
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	039b      	lsls	r3, r3, #14
 80015a0:	4013      	ands	r3, r2
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015ac:	4b22      	ldr	r3, [pc, #136]	; (8001638 <HAL_GPIO_Init+0x2dc>)
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80015b2:	4b21      	ldr	r3, [pc, #132]	; (8001638 <HAL_GPIO_Init+0x2dc>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	43da      	mvns	r2, r3
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	029b      	lsls	r3, r3, #10
 80015ca:	4013      	ands	r3, r2
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015d6:	4b18      	ldr	r3, [pc, #96]	; (8001638 <HAL_GPIO_Init+0x2dc>)
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80015dc:	4b16      	ldr	r3, [pc, #88]	; (8001638 <HAL_GPIO_Init+0x2dc>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	43da      	mvns	r2, r3
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	025b      	lsls	r3, r3, #9
 80015f4:	4013      	ands	r3, r2
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001600:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <HAL_GPIO_Init+0x2dc>)
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	3301      	adds	r3, #1
 800160a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	40da      	lsrs	r2, r3
 8001614:	1e13      	subs	r3, r2, #0
 8001616:	d000      	beq.n	800161a <HAL_GPIO_Init+0x2be>
 8001618:	e6a8      	b.n	800136c <HAL_GPIO_Init+0x10>
  } 
}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	46c0      	nop			; (mov r8, r8)
 800161e:	46bd      	mov	sp, r7
 8001620:	b006      	add	sp, #24
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40021000 	.word	0x40021000
 8001628:	40010000 	.word	0x40010000
 800162c:	48000400 	.word	0x48000400
 8001630:	48000800 	.word	0x48000800
 8001634:	48000c00 	.word	0x48000c00
 8001638:	40010400 	.word	0x40010400

0800163c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	0008      	movs	r0, r1
 8001646:	0011      	movs	r1, r2
 8001648:	1cbb      	adds	r3, r7, #2
 800164a:	1c02      	adds	r2, r0, #0
 800164c:	801a      	strh	r2, [r3, #0]
 800164e:	1c7b      	adds	r3, r7, #1
 8001650:	1c0a      	adds	r2, r1, #0
 8001652:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001654:	1c7b      	adds	r3, r7, #1
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d004      	beq.n	8001666 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800165c:	1cbb      	adds	r3, r7, #2
 800165e:	881a      	ldrh	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001664:	e003      	b.n	800166e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001666:	1cbb      	adds	r3, r7, #2
 8001668:	881a      	ldrh	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800166e:	46c0      	nop			; (mov r8, r8)
 8001670:	46bd      	mov	sp, r7
 8001672:	b002      	add	sp, #8
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e301      	b.n	8001c8e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2201      	movs	r2, #1
 8001690:	4013      	ands	r3, r2
 8001692:	d100      	bne.n	8001696 <HAL_RCC_OscConfig+0x1e>
 8001694:	e08d      	b.n	80017b2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001696:	4bc3      	ldr	r3, [pc, #780]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	220c      	movs	r2, #12
 800169c:	4013      	ands	r3, r2
 800169e:	2b04      	cmp	r3, #4
 80016a0:	d00e      	beq.n	80016c0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016a2:	4bc0      	ldr	r3, [pc, #768]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	220c      	movs	r2, #12
 80016a8:	4013      	ands	r3, r2
 80016aa:	2b08      	cmp	r3, #8
 80016ac:	d116      	bne.n	80016dc <HAL_RCC_OscConfig+0x64>
 80016ae:	4bbd      	ldr	r3, [pc, #756]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	025b      	lsls	r3, r3, #9
 80016b6:	401a      	ands	r2, r3
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	025b      	lsls	r3, r3, #9
 80016bc:	429a      	cmp	r2, r3
 80016be:	d10d      	bne.n	80016dc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c0:	4bb8      	ldr	r3, [pc, #736]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	029b      	lsls	r3, r3, #10
 80016c8:	4013      	ands	r3, r2
 80016ca:	d100      	bne.n	80016ce <HAL_RCC_OscConfig+0x56>
 80016cc:	e070      	b.n	80017b0 <HAL_RCC_OscConfig+0x138>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d000      	beq.n	80016d8 <HAL_RCC_OscConfig+0x60>
 80016d6:	e06b      	b.n	80017b0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e2d8      	b.n	8001c8e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d107      	bne.n	80016f4 <HAL_RCC_OscConfig+0x7c>
 80016e4:	4baf      	ldr	r3, [pc, #700]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4bae      	ldr	r3, [pc, #696]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 80016ea:	2180      	movs	r1, #128	; 0x80
 80016ec:	0249      	lsls	r1, r1, #9
 80016ee:	430a      	orrs	r2, r1
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	e02f      	b.n	8001754 <HAL_RCC_OscConfig+0xdc>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d10c      	bne.n	8001716 <HAL_RCC_OscConfig+0x9e>
 80016fc:	4ba9      	ldr	r3, [pc, #676]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4ba8      	ldr	r3, [pc, #672]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 8001702:	49a9      	ldr	r1, [pc, #676]	; (80019a8 <HAL_RCC_OscConfig+0x330>)
 8001704:	400a      	ands	r2, r1
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	4ba6      	ldr	r3, [pc, #664]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4ba5      	ldr	r3, [pc, #660]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 800170e:	49a7      	ldr	r1, [pc, #668]	; (80019ac <HAL_RCC_OscConfig+0x334>)
 8001710:	400a      	ands	r2, r1
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	e01e      	b.n	8001754 <HAL_RCC_OscConfig+0xdc>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b05      	cmp	r3, #5
 800171c:	d10e      	bne.n	800173c <HAL_RCC_OscConfig+0xc4>
 800171e:	4ba1      	ldr	r3, [pc, #644]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	4ba0      	ldr	r3, [pc, #640]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 8001724:	2180      	movs	r1, #128	; 0x80
 8001726:	02c9      	lsls	r1, r1, #11
 8001728:	430a      	orrs	r2, r1
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	4b9d      	ldr	r3, [pc, #628]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b9c      	ldr	r3, [pc, #624]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 8001732:	2180      	movs	r1, #128	; 0x80
 8001734:	0249      	lsls	r1, r1, #9
 8001736:	430a      	orrs	r2, r1
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	e00b      	b.n	8001754 <HAL_RCC_OscConfig+0xdc>
 800173c:	4b99      	ldr	r3, [pc, #612]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b98      	ldr	r3, [pc, #608]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 8001742:	4999      	ldr	r1, [pc, #612]	; (80019a8 <HAL_RCC_OscConfig+0x330>)
 8001744:	400a      	ands	r2, r1
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	4b96      	ldr	r3, [pc, #600]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b95      	ldr	r3, [pc, #596]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 800174e:	4997      	ldr	r1, [pc, #604]	; (80019ac <HAL_RCC_OscConfig+0x334>)
 8001750:	400a      	ands	r2, r1
 8001752:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d014      	beq.n	8001786 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175c:	f7ff fb3c 	bl	8000dd8 <HAL_GetTick>
 8001760:	0003      	movs	r3, r0
 8001762:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001766:	f7ff fb37 	bl	8000dd8 <HAL_GetTick>
 800176a:	0002      	movs	r2, r0
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b64      	cmp	r3, #100	; 0x64
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e28a      	b.n	8001c8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001778:	4b8a      	ldr	r3, [pc, #552]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	2380      	movs	r3, #128	; 0x80
 800177e:	029b      	lsls	r3, r3, #10
 8001780:	4013      	ands	r3, r2
 8001782:	d0f0      	beq.n	8001766 <HAL_RCC_OscConfig+0xee>
 8001784:	e015      	b.n	80017b2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001786:	f7ff fb27 	bl	8000dd8 <HAL_GetTick>
 800178a:	0003      	movs	r3, r0
 800178c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001790:	f7ff fb22 	bl	8000dd8 <HAL_GetTick>
 8001794:	0002      	movs	r2, r0
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b64      	cmp	r3, #100	; 0x64
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e275      	b.n	8001c8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a2:	4b80      	ldr	r3, [pc, #512]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	029b      	lsls	r3, r3, #10
 80017aa:	4013      	ands	r3, r2
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x118>
 80017ae:	e000      	b.n	80017b2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2202      	movs	r2, #2
 80017b8:	4013      	ands	r3, r2
 80017ba:	d100      	bne.n	80017be <HAL_RCC_OscConfig+0x146>
 80017bc:	e069      	b.n	8001892 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80017be:	4b79      	ldr	r3, [pc, #484]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	220c      	movs	r2, #12
 80017c4:	4013      	ands	r3, r2
 80017c6:	d00b      	beq.n	80017e0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017c8:	4b76      	ldr	r3, [pc, #472]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	220c      	movs	r2, #12
 80017ce:	4013      	ands	r3, r2
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d11c      	bne.n	800180e <HAL_RCC_OscConfig+0x196>
 80017d4:	4b73      	ldr	r3, [pc, #460]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	025b      	lsls	r3, r3, #9
 80017dc:	4013      	ands	r3, r2
 80017de:	d116      	bne.n	800180e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e0:	4b70      	ldr	r3, [pc, #448]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2202      	movs	r2, #2
 80017e6:	4013      	ands	r3, r2
 80017e8:	d005      	beq.n	80017f6 <HAL_RCC_OscConfig+0x17e>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d001      	beq.n	80017f6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e24b      	b.n	8001c8e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f6:	4b6b      	ldr	r3, [pc, #428]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	22f8      	movs	r2, #248	; 0xf8
 80017fc:	4393      	bics	r3, r2
 80017fe:	0019      	movs	r1, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	00da      	lsls	r2, r3, #3
 8001806:	4b67      	ldr	r3, [pc, #412]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 8001808:	430a      	orrs	r2, r1
 800180a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180c:	e041      	b.n	8001892 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d024      	beq.n	8001860 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001816:	4b63      	ldr	r3, [pc, #396]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	4b62      	ldr	r3, [pc, #392]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 800181c:	2101      	movs	r1, #1
 800181e:	430a      	orrs	r2, r1
 8001820:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001822:	f7ff fad9 	bl	8000dd8 <HAL_GetTick>
 8001826:	0003      	movs	r3, r0
 8001828:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800182c:	f7ff fad4 	bl	8000dd8 <HAL_GetTick>
 8001830:	0002      	movs	r2, r0
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e227      	b.n	8001c8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183e:	4b59      	ldr	r3, [pc, #356]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2202      	movs	r2, #2
 8001844:	4013      	ands	r3, r2
 8001846:	d0f1      	beq.n	800182c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001848:	4b56      	ldr	r3, [pc, #344]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	22f8      	movs	r2, #248	; 0xf8
 800184e:	4393      	bics	r3, r2
 8001850:	0019      	movs	r1, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	00da      	lsls	r2, r3, #3
 8001858:	4b52      	ldr	r3, [pc, #328]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 800185a:	430a      	orrs	r2, r1
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	e018      	b.n	8001892 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001860:	4b50      	ldr	r3, [pc, #320]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b4f      	ldr	r3, [pc, #316]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 8001866:	2101      	movs	r1, #1
 8001868:	438a      	bics	r2, r1
 800186a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186c:	f7ff fab4 	bl	8000dd8 <HAL_GetTick>
 8001870:	0003      	movs	r3, r0
 8001872:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001876:	f7ff faaf 	bl	8000dd8 <HAL_GetTick>
 800187a:	0002      	movs	r2, r0
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e202      	b.n	8001c8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001888:	4b46      	ldr	r3, [pc, #280]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2202      	movs	r2, #2
 800188e:	4013      	ands	r3, r2
 8001890:	d1f1      	bne.n	8001876 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2208      	movs	r2, #8
 8001898:	4013      	ands	r3, r2
 800189a:	d036      	beq.n	800190a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d019      	beq.n	80018d8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018a4:	4b3f      	ldr	r3, [pc, #252]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 80018a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018a8:	4b3e      	ldr	r3, [pc, #248]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 80018aa:	2101      	movs	r1, #1
 80018ac:	430a      	orrs	r2, r1
 80018ae:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b0:	f7ff fa92 	bl	8000dd8 <HAL_GetTick>
 80018b4:	0003      	movs	r3, r0
 80018b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ba:	f7ff fa8d 	bl	8000dd8 <HAL_GetTick>
 80018be:	0002      	movs	r2, r0
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e1e0      	b.n	8001c8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018cc:	4b35      	ldr	r3, [pc, #212]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 80018ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d0:	2202      	movs	r2, #2
 80018d2:	4013      	ands	r3, r2
 80018d4:	d0f1      	beq.n	80018ba <HAL_RCC_OscConfig+0x242>
 80018d6:	e018      	b.n	800190a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018d8:	4b32      	ldr	r3, [pc, #200]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 80018da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018dc:	4b31      	ldr	r3, [pc, #196]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 80018de:	2101      	movs	r1, #1
 80018e0:	438a      	bics	r2, r1
 80018e2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e4:	f7ff fa78 	bl	8000dd8 <HAL_GetTick>
 80018e8:	0003      	movs	r3, r0
 80018ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ee:	f7ff fa73 	bl	8000dd8 <HAL_GetTick>
 80018f2:	0002      	movs	r2, r0
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e1c6      	b.n	8001c8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001900:	4b28      	ldr	r3, [pc, #160]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	2202      	movs	r2, #2
 8001906:	4013      	ands	r3, r2
 8001908:	d1f1      	bne.n	80018ee <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2204      	movs	r2, #4
 8001910:	4013      	ands	r3, r2
 8001912:	d100      	bne.n	8001916 <HAL_RCC_OscConfig+0x29e>
 8001914:	e0b4      	b.n	8001a80 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001916:	201f      	movs	r0, #31
 8001918:	183b      	adds	r3, r7, r0
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800191e:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 8001920:	69da      	ldr	r2, [r3, #28]
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	055b      	lsls	r3, r3, #21
 8001926:	4013      	ands	r3, r2
 8001928:	d110      	bne.n	800194c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800192a:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 800192c:	69da      	ldr	r2, [r3, #28]
 800192e:	4b1d      	ldr	r3, [pc, #116]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 8001930:	2180      	movs	r1, #128	; 0x80
 8001932:	0549      	lsls	r1, r1, #21
 8001934:	430a      	orrs	r2, r1
 8001936:	61da      	str	r2, [r3, #28]
 8001938:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 800193a:	69da      	ldr	r2, [r3, #28]
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	055b      	lsls	r3, r3, #21
 8001940:	4013      	ands	r3, r2
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001946:	183b      	adds	r3, r7, r0
 8001948:	2201      	movs	r2, #1
 800194a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194c:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <HAL_RCC_OscConfig+0x338>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4013      	ands	r3, r2
 8001956:	d11a      	bne.n	800198e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001958:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <HAL_RCC_OscConfig+0x338>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <HAL_RCC_OscConfig+0x338>)
 800195e:	2180      	movs	r1, #128	; 0x80
 8001960:	0049      	lsls	r1, r1, #1
 8001962:	430a      	orrs	r2, r1
 8001964:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001966:	f7ff fa37 	bl	8000dd8 <HAL_GetTick>
 800196a:	0003      	movs	r3, r0
 800196c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001970:	f7ff fa32 	bl	8000dd8 <HAL_GetTick>
 8001974:	0002      	movs	r2, r0
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b64      	cmp	r3, #100	; 0x64
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e185      	b.n	8001c8e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <HAL_RCC_OscConfig+0x338>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	2380      	movs	r3, #128	; 0x80
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4013      	ands	r3, r2
 800198c:	d0f0      	beq.n	8001970 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d10e      	bne.n	80019b4 <HAL_RCC_OscConfig+0x33c>
 8001996:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 8001998:	6a1a      	ldr	r2, [r3, #32]
 800199a:	4b02      	ldr	r3, [pc, #8]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 800199c:	2101      	movs	r1, #1
 800199e:	430a      	orrs	r2, r1
 80019a0:	621a      	str	r2, [r3, #32]
 80019a2:	e035      	b.n	8001a10 <HAL_RCC_OscConfig+0x398>
 80019a4:	40021000 	.word	0x40021000
 80019a8:	fffeffff 	.word	0xfffeffff
 80019ac:	fffbffff 	.word	0xfffbffff
 80019b0:	40007000 	.word	0x40007000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d10c      	bne.n	80019d6 <HAL_RCC_OscConfig+0x35e>
 80019bc:	4bb6      	ldr	r3, [pc, #728]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 80019be:	6a1a      	ldr	r2, [r3, #32]
 80019c0:	4bb5      	ldr	r3, [pc, #724]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 80019c2:	2101      	movs	r1, #1
 80019c4:	438a      	bics	r2, r1
 80019c6:	621a      	str	r2, [r3, #32]
 80019c8:	4bb3      	ldr	r3, [pc, #716]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 80019ca:	6a1a      	ldr	r2, [r3, #32]
 80019cc:	4bb2      	ldr	r3, [pc, #712]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 80019ce:	2104      	movs	r1, #4
 80019d0:	438a      	bics	r2, r1
 80019d2:	621a      	str	r2, [r3, #32]
 80019d4:	e01c      	b.n	8001a10 <HAL_RCC_OscConfig+0x398>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	2b05      	cmp	r3, #5
 80019dc:	d10c      	bne.n	80019f8 <HAL_RCC_OscConfig+0x380>
 80019de:	4bae      	ldr	r3, [pc, #696]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 80019e0:	6a1a      	ldr	r2, [r3, #32]
 80019e2:	4bad      	ldr	r3, [pc, #692]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 80019e4:	2104      	movs	r1, #4
 80019e6:	430a      	orrs	r2, r1
 80019e8:	621a      	str	r2, [r3, #32]
 80019ea:	4bab      	ldr	r3, [pc, #684]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 80019ec:	6a1a      	ldr	r2, [r3, #32]
 80019ee:	4baa      	ldr	r3, [pc, #680]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 80019f0:	2101      	movs	r1, #1
 80019f2:	430a      	orrs	r2, r1
 80019f4:	621a      	str	r2, [r3, #32]
 80019f6:	e00b      	b.n	8001a10 <HAL_RCC_OscConfig+0x398>
 80019f8:	4ba7      	ldr	r3, [pc, #668]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 80019fa:	6a1a      	ldr	r2, [r3, #32]
 80019fc:	4ba6      	ldr	r3, [pc, #664]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 80019fe:	2101      	movs	r1, #1
 8001a00:	438a      	bics	r2, r1
 8001a02:	621a      	str	r2, [r3, #32]
 8001a04:	4ba4      	ldr	r3, [pc, #656]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001a06:	6a1a      	ldr	r2, [r3, #32]
 8001a08:	4ba3      	ldr	r3, [pc, #652]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001a0a:	2104      	movs	r1, #4
 8001a0c:	438a      	bics	r2, r1
 8001a0e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d014      	beq.n	8001a42 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a18:	f7ff f9de 	bl	8000dd8 <HAL_GetTick>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a20:	e009      	b.n	8001a36 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a22:	f7ff f9d9 	bl	8000dd8 <HAL_GetTick>
 8001a26:	0002      	movs	r2, r0
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	4a9b      	ldr	r2, [pc, #620]	; (8001c9c <HAL_RCC_OscConfig+0x624>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e12b      	b.n	8001c8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a36:	4b98      	ldr	r3, [pc, #608]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d0f0      	beq.n	8001a22 <HAL_RCC_OscConfig+0x3aa>
 8001a40:	e013      	b.n	8001a6a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a42:	f7ff f9c9 	bl	8000dd8 <HAL_GetTick>
 8001a46:	0003      	movs	r3, r0
 8001a48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a4a:	e009      	b.n	8001a60 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a4c:	f7ff f9c4 	bl	8000dd8 <HAL_GetTick>
 8001a50:	0002      	movs	r2, r0
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	4a91      	ldr	r2, [pc, #580]	; (8001c9c <HAL_RCC_OscConfig+0x624>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e116      	b.n	8001c8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a60:	4b8d      	ldr	r3, [pc, #564]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	2202      	movs	r2, #2
 8001a66:	4013      	ands	r3, r2
 8001a68:	d1f0      	bne.n	8001a4c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a6a:	231f      	movs	r3, #31
 8001a6c:	18fb      	adds	r3, r7, r3
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d105      	bne.n	8001a80 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a74:	4b88      	ldr	r3, [pc, #544]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001a76:	69da      	ldr	r2, [r3, #28]
 8001a78:	4b87      	ldr	r3, [pc, #540]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001a7a:	4989      	ldr	r1, [pc, #548]	; (8001ca0 <HAL_RCC_OscConfig+0x628>)
 8001a7c:	400a      	ands	r2, r1
 8001a7e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2210      	movs	r2, #16
 8001a86:	4013      	ands	r3, r2
 8001a88:	d063      	beq.n	8001b52 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d12a      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a92:	4b81      	ldr	r3, [pc, #516]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001a94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a96:	4b80      	ldr	r3, [pc, #512]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001a98:	2104      	movs	r1, #4
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001a9e:	4b7e      	ldr	r3, [pc, #504]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aa2:	4b7d      	ldr	r3, [pc, #500]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aaa:	f7ff f995 	bl	8000dd8 <HAL_GetTick>
 8001aae:	0003      	movs	r3, r0
 8001ab0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ab4:	f7ff f990 	bl	8000dd8 <HAL_GetTick>
 8001ab8:	0002      	movs	r2, r0
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e0e3      	b.n	8001c8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ac6:	4b74      	ldr	r3, [pc, #464]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aca:	2202      	movs	r2, #2
 8001acc:	4013      	ands	r3, r2
 8001ace:	d0f1      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ad0:	4b71      	ldr	r3, [pc, #452]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad4:	22f8      	movs	r2, #248	; 0xf8
 8001ad6:	4393      	bics	r3, r2
 8001ad8:	0019      	movs	r1, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	00da      	lsls	r2, r3, #3
 8001ae0:	4b6d      	ldr	r3, [pc, #436]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ae6:	e034      	b.n	8001b52 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	3305      	adds	r3, #5
 8001aee:	d111      	bne.n	8001b14 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001af0:	4b69      	ldr	r3, [pc, #420]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001af2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001af4:	4b68      	ldr	r3, [pc, #416]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001af6:	2104      	movs	r1, #4
 8001af8:	438a      	bics	r2, r1
 8001afa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001afc:	4b66      	ldr	r3, [pc, #408]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b00:	22f8      	movs	r2, #248	; 0xf8
 8001b02:	4393      	bics	r3, r2
 8001b04:	0019      	movs	r1, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	00da      	lsls	r2, r3, #3
 8001b0c:	4b62      	ldr	r3, [pc, #392]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	635a      	str	r2, [r3, #52]	; 0x34
 8001b12:	e01e      	b.n	8001b52 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b14:	4b60      	ldr	r3, [pc, #384]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001b16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b18:	4b5f      	ldr	r3, [pc, #380]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001b1a:	2104      	movs	r1, #4
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001b20:	4b5d      	ldr	r3, [pc, #372]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001b22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b24:	4b5c      	ldr	r3, [pc, #368]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001b26:	2101      	movs	r1, #1
 8001b28:	438a      	bics	r2, r1
 8001b2a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2c:	f7ff f954 	bl	8000dd8 <HAL_GetTick>
 8001b30:	0003      	movs	r3, r0
 8001b32:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b36:	f7ff f94f 	bl	8000dd8 <HAL_GetTick>
 8001b3a:	0002      	movs	r2, r0
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e0a2      	b.n	8001c8e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b48:	4b53      	ldr	r3, [pc, #332]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d1f1      	bne.n	8001b36 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d100      	bne.n	8001b5c <HAL_RCC_OscConfig+0x4e4>
 8001b5a:	e097      	b.n	8001c8c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b5c:	4b4e      	ldr	r3, [pc, #312]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	220c      	movs	r2, #12
 8001b62:	4013      	ands	r3, r2
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	d100      	bne.n	8001b6a <HAL_RCC_OscConfig+0x4f2>
 8001b68:	e06b      	b.n	8001c42 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d14c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b72:	4b49      	ldr	r3, [pc, #292]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	4b48      	ldr	r3, [pc, #288]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001b78:	494a      	ldr	r1, [pc, #296]	; (8001ca4 <HAL_RCC_OscConfig+0x62c>)
 8001b7a:	400a      	ands	r2, r1
 8001b7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7e:	f7ff f92b 	bl	8000dd8 <HAL_GetTick>
 8001b82:	0003      	movs	r3, r0
 8001b84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b88:	f7ff f926 	bl	8000dd8 <HAL_GetTick>
 8001b8c:	0002      	movs	r2, r0
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e079      	b.n	8001c8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b9a:	4b3f      	ldr	r3, [pc, #252]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	2380      	movs	r3, #128	; 0x80
 8001ba0:	049b      	lsls	r3, r3, #18
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ba6:	4b3c      	ldr	r3, [pc, #240]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001baa:	220f      	movs	r2, #15
 8001bac:	4393      	bics	r3, r2
 8001bae:	0019      	movs	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb4:	4b38      	ldr	r3, [pc, #224]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bba:	4b37      	ldr	r3, [pc, #220]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	4a3a      	ldr	r2, [pc, #232]	; (8001ca8 <HAL_RCC_OscConfig+0x630>)
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	0019      	movs	r1, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	4b32      	ldr	r3, [pc, #200]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bd4:	4b30      	ldr	r3, [pc, #192]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b2f      	ldr	r3, [pc, #188]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001bda:	2180      	movs	r1, #128	; 0x80
 8001bdc:	0449      	lsls	r1, r1, #17
 8001bde:	430a      	orrs	r2, r1
 8001be0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be2:	f7ff f8f9 	bl	8000dd8 <HAL_GetTick>
 8001be6:	0003      	movs	r3, r0
 8001be8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bec:	f7ff f8f4 	bl	8000dd8 <HAL_GetTick>
 8001bf0:	0002      	movs	r2, r0
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e047      	b.n	8001c8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bfe:	4b26      	ldr	r3, [pc, #152]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	049b      	lsls	r3, r3, #18
 8001c06:	4013      	ands	r3, r2
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0x574>
 8001c0a:	e03f      	b.n	8001c8c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0c:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001c12:	4924      	ldr	r1, [pc, #144]	; (8001ca4 <HAL_RCC_OscConfig+0x62c>)
 8001c14:	400a      	ands	r2, r1
 8001c16:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c18:	f7ff f8de 	bl	8000dd8 <HAL_GetTick>
 8001c1c:	0003      	movs	r3, r0
 8001c1e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c22:	f7ff f8d9 	bl	8000dd8 <HAL_GetTick>
 8001c26:	0002      	movs	r2, r0
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e02c      	b.n	8001c8e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c34:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	049b      	lsls	r3, r3, #18
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d1f0      	bne.n	8001c22 <HAL_RCC_OscConfig+0x5aa>
 8001c40:	e024      	b.n	8001c8c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d101      	bne.n	8001c4e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e01f      	b.n	8001c8e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001c4e:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001c54:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <HAL_RCC_OscConfig+0x620>)
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	025b      	lsls	r3, r3, #9
 8001c60:	401a      	ands	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d10e      	bne.n	8001c88 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	220f      	movs	r2, #15
 8001c6e:	401a      	ands	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d107      	bne.n	8001c88 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	23f0      	movs	r3, #240	; 0xf0
 8001c7c:	039b      	lsls	r3, r3, #14
 8001c7e:	401a      	ands	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d001      	beq.n	8001c8c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e000      	b.n	8001c8e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	0018      	movs	r0, r3
 8001c90:	46bd      	mov	sp, r7
 8001c92:	b008      	add	sp, #32
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	00001388 	.word	0x00001388
 8001ca0:	efffffff 	.word	0xefffffff
 8001ca4:	feffffff 	.word	0xfeffffff
 8001ca8:	ffc2ffff 	.word	0xffc2ffff

08001cac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e0b3      	b.n	8001e28 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc0:	4b5b      	ldr	r3, [pc, #364]	; (8001e30 <HAL_RCC_ClockConfig+0x184>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d911      	bls.n	8001cf2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cce:	4b58      	ldr	r3, [pc, #352]	; (8001e30 <HAL_RCC_ClockConfig+0x184>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	4393      	bics	r3, r2
 8001cd6:	0019      	movs	r1, r3
 8001cd8:	4b55      	ldr	r3, [pc, #340]	; (8001e30 <HAL_RCC_ClockConfig+0x184>)
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce0:	4b53      	ldr	r3, [pc, #332]	; (8001e30 <HAL_RCC_ClockConfig+0x184>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d001      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e09a      	b.n	8001e28 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d015      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2204      	movs	r2, #4
 8001d02:	4013      	ands	r3, r2
 8001d04:	d006      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d06:	4b4b      	ldr	r3, [pc, #300]	; (8001e34 <HAL_RCC_ClockConfig+0x188>)
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	4b4a      	ldr	r3, [pc, #296]	; (8001e34 <HAL_RCC_ClockConfig+0x188>)
 8001d0c:	21e0      	movs	r1, #224	; 0xe0
 8001d0e:	00c9      	lsls	r1, r1, #3
 8001d10:	430a      	orrs	r2, r1
 8001d12:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d14:	4b47      	ldr	r3, [pc, #284]	; (8001e34 <HAL_RCC_ClockConfig+0x188>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	22f0      	movs	r2, #240	; 0xf0
 8001d1a:	4393      	bics	r3, r2
 8001d1c:	0019      	movs	r1, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	4b44      	ldr	r3, [pc, #272]	; (8001e34 <HAL_RCC_ClockConfig+0x188>)
 8001d24:	430a      	orrs	r2, r1
 8001d26:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d040      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d107      	bne.n	8001d4a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3a:	4b3e      	ldr	r3, [pc, #248]	; (8001e34 <HAL_RCC_ClockConfig+0x188>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	029b      	lsls	r3, r3, #10
 8001d42:	4013      	ands	r3, r2
 8001d44:	d114      	bne.n	8001d70 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e06e      	b.n	8001e28 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d107      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d52:	4b38      	ldr	r3, [pc, #224]	; (8001e34 <HAL_RCC_ClockConfig+0x188>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	2380      	movs	r3, #128	; 0x80
 8001d58:	049b      	lsls	r3, r3, #18
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	d108      	bne.n	8001d70 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e062      	b.n	8001e28 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d62:	4b34      	ldr	r3, [pc, #208]	; (8001e34 <HAL_RCC_ClockConfig+0x188>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2202      	movs	r2, #2
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d101      	bne.n	8001d70 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e05b      	b.n	8001e28 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d70:	4b30      	ldr	r3, [pc, #192]	; (8001e34 <HAL_RCC_ClockConfig+0x188>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2203      	movs	r2, #3
 8001d76:	4393      	bics	r3, r2
 8001d78:	0019      	movs	r1, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	4b2d      	ldr	r3, [pc, #180]	; (8001e34 <HAL_RCC_ClockConfig+0x188>)
 8001d80:	430a      	orrs	r2, r1
 8001d82:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d84:	f7ff f828 	bl	8000dd8 <HAL_GetTick>
 8001d88:	0003      	movs	r3, r0
 8001d8a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8c:	e009      	b.n	8001da2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d8e:	f7ff f823 	bl	8000dd8 <HAL_GetTick>
 8001d92:	0002      	movs	r2, r0
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	4a27      	ldr	r2, [pc, #156]	; (8001e38 <HAL_RCC_ClockConfig+0x18c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e042      	b.n	8001e28 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da2:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <HAL_RCC_ClockConfig+0x188>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	220c      	movs	r2, #12
 8001da8:	401a      	ands	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d1ec      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001db4:	4b1e      	ldr	r3, [pc, #120]	; (8001e30 <HAL_RCC_ClockConfig+0x184>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2201      	movs	r2, #1
 8001dba:	4013      	ands	r3, r2
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d211      	bcs.n	8001de6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc2:	4b1b      	ldr	r3, [pc, #108]	; (8001e30 <HAL_RCC_ClockConfig+0x184>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	4393      	bics	r3, r2
 8001dca:	0019      	movs	r1, r3
 8001dcc:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <HAL_RCC_ClockConfig+0x184>)
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd4:	4b16      	ldr	r3, [pc, #88]	; (8001e30 <HAL_RCC_ClockConfig+0x184>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	4013      	ands	r3, r2
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d001      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e020      	b.n	8001e28 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2204      	movs	r2, #4
 8001dec:	4013      	ands	r3, r2
 8001dee:	d009      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001df0:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <HAL_RCC_ClockConfig+0x188>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	4a11      	ldr	r2, [pc, #68]	; (8001e3c <HAL_RCC_ClockConfig+0x190>)
 8001df6:	4013      	ands	r3, r2
 8001df8:	0019      	movs	r1, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <HAL_RCC_ClockConfig+0x188>)
 8001e00:	430a      	orrs	r2, r1
 8001e02:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e04:	f000 f820 	bl	8001e48 <HAL_RCC_GetSysClockFreq>
 8001e08:	0001      	movs	r1, r0
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <HAL_RCC_ClockConfig+0x188>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	091b      	lsrs	r3, r3, #4
 8001e10:	220f      	movs	r2, #15
 8001e12:	4013      	ands	r3, r2
 8001e14:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <HAL_RCC_ClockConfig+0x194>)
 8001e16:	5cd3      	ldrb	r3, [r2, r3]
 8001e18:	000a      	movs	r2, r1
 8001e1a:	40da      	lsrs	r2, r3
 8001e1c:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <HAL_RCC_ClockConfig+0x198>)
 8001e1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e20:	2003      	movs	r0, #3
 8001e22:	f7fe ff93 	bl	8000d4c <HAL_InitTick>
  
  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	0018      	movs	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	b004      	add	sp, #16
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40022000 	.word	0x40022000
 8001e34:	40021000 	.word	0x40021000
 8001e38:	00001388 	.word	0x00001388
 8001e3c:	fffff8ff 	.word	0xfffff8ff
 8001e40:	08003e74 	.word	0x08003e74
 8001e44:	20000010 	.word	0x20000010

08001e48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	2300      	movs	r3, #0
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001e62:	4b20      	ldr	r3, [pc, #128]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	220c      	movs	r2, #12
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d002      	beq.n	8001e78 <HAL_RCC_GetSysClockFreq+0x30>
 8001e72:	2b08      	cmp	r3, #8
 8001e74:	d003      	beq.n	8001e7e <HAL_RCC_GetSysClockFreq+0x36>
 8001e76:	e02c      	b.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e78:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e7a:	613b      	str	r3, [r7, #16]
      break;
 8001e7c:	e02c      	b.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	0c9b      	lsrs	r3, r3, #18
 8001e82:	220f      	movs	r2, #15
 8001e84:	4013      	ands	r3, r2
 8001e86:	4a19      	ldr	r2, [pc, #100]	; (8001eec <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e88:	5cd3      	ldrb	r3, [r2, r3]
 8001e8a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001e8c:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e90:	220f      	movs	r2, #15
 8001e92:	4013      	ands	r3, r2
 8001e94:	4a16      	ldr	r2, [pc, #88]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001e96:	5cd3      	ldrb	r3, [r2, r3]
 8001e98:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	025b      	lsls	r3, r3, #9
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d009      	beq.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	4810      	ldr	r0, [pc, #64]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ea8:	f7fe f92e 	bl	8000108 <__udivsi3>
 8001eac:	0003      	movs	r3, r0
 8001eae:	001a      	movs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4353      	muls	r3, r2
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	e009      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	000a      	movs	r2, r1
 8001ebc:	0152      	lsls	r2, r2, #5
 8001ebe:	1a52      	subs	r2, r2, r1
 8001ec0:	0193      	lsls	r3, r2, #6
 8001ec2:	1a9b      	subs	r3, r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	185b      	adds	r3, r3, r1
 8001ec8:	021b      	lsls	r3, r3, #8
 8001eca:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	613b      	str	r3, [r7, #16]
      break;
 8001ed0:	e002      	b.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ed2:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ed4:	613b      	str	r3, [r7, #16]
      break;
 8001ed6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ed8:	693b      	ldr	r3, [r7, #16]
}
 8001eda:	0018      	movs	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	b006      	add	sp, #24
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	007a1200 	.word	0x007a1200
 8001eec:	08003e8c 	.word	0x08003e8c
 8001ef0:	08003e9c 	.word	0x08003e9c

08001ef4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ef8:	4b02      	ldr	r3, [pc, #8]	; (8001f04 <HAL_RCC_GetHCLKFreq+0x10>)
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	0018      	movs	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	20000010 	.word	0x20000010

08001f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001f0c:	f7ff fff2 	bl	8001ef4 <HAL_RCC_GetHCLKFreq>
 8001f10:	0001      	movs	r1, r0
 8001f12:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	0a1b      	lsrs	r3, r3, #8
 8001f18:	2207      	movs	r2, #7
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f1e:	5cd3      	ldrb	r3, [r2, r3]
 8001f20:	40d9      	lsrs	r1, r3
 8001f22:	000b      	movs	r3, r1
}    
 8001f24:	0018      	movs	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	08003e84 	.word	0x08003e84

08001f34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	025b      	lsls	r3, r3, #9
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d100      	bne.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001f50:	e08e      	b.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001f52:	2017      	movs	r0, #23
 8001f54:	183b      	adds	r3, r7, r0
 8001f56:	2200      	movs	r2, #0
 8001f58:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f5a:	4b57      	ldr	r3, [pc, #348]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f5c:	69da      	ldr	r2, [r3, #28]
 8001f5e:	2380      	movs	r3, #128	; 0x80
 8001f60:	055b      	lsls	r3, r3, #21
 8001f62:	4013      	ands	r3, r2
 8001f64:	d110      	bne.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f66:	4b54      	ldr	r3, [pc, #336]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f68:	69da      	ldr	r2, [r3, #28]
 8001f6a:	4b53      	ldr	r3, [pc, #332]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f6c:	2180      	movs	r1, #128	; 0x80
 8001f6e:	0549      	lsls	r1, r1, #21
 8001f70:	430a      	orrs	r2, r1
 8001f72:	61da      	str	r2, [r3, #28]
 8001f74:	4b50      	ldr	r3, [pc, #320]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f76:	69da      	ldr	r2, [r3, #28]
 8001f78:	2380      	movs	r3, #128	; 0x80
 8001f7a:	055b      	lsls	r3, r3, #21
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f82:	183b      	adds	r3, r7, r0
 8001f84:	2201      	movs	r2, #1
 8001f86:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f88:	4b4c      	ldr	r3, [pc, #304]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	2380      	movs	r3, #128	; 0x80
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4013      	ands	r3, r2
 8001f92:	d11a      	bne.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f94:	4b49      	ldr	r3, [pc, #292]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4b48      	ldr	r3, [pc, #288]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001f9a:	2180      	movs	r1, #128	; 0x80
 8001f9c:	0049      	lsls	r1, r1, #1
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa2:	f7fe ff19 	bl	8000dd8 <HAL_GetTick>
 8001fa6:	0003      	movs	r3, r0
 8001fa8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001faa:	e008      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fac:	f7fe ff14 	bl	8000dd8 <HAL_GetTick>
 8001fb0:	0002      	movs	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b64      	cmp	r3, #100	; 0x64
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e077      	b.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbe:	4b3f      	ldr	r3, [pc, #252]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fca:	4b3b      	ldr	r3, [pc, #236]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fcc:	6a1a      	ldr	r2, [r3, #32]
 8001fce:	23c0      	movs	r3, #192	; 0xc0
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d034      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	23c0      	movs	r3, #192	; 0xc0
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d02c      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fec:	4b32      	ldr	r3, [pc, #200]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	4a33      	ldr	r2, [pc, #204]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ff6:	4b30      	ldr	r3, [pc, #192]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ff8:	6a1a      	ldr	r2, [r3, #32]
 8001ffa:	4b2f      	ldr	r3, [pc, #188]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ffc:	2180      	movs	r1, #128	; 0x80
 8001ffe:	0249      	lsls	r1, r1, #9
 8002000:	430a      	orrs	r2, r1
 8002002:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002004:	4b2c      	ldr	r3, [pc, #176]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002006:	6a1a      	ldr	r2, [r3, #32]
 8002008:	4b2b      	ldr	r3, [pc, #172]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800200a:	492e      	ldr	r1, [pc, #184]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800200c:	400a      	ands	r2, r1
 800200e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002010:	4b29      	ldr	r3, [pc, #164]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2201      	movs	r2, #1
 800201a:	4013      	ands	r3, r2
 800201c:	d013      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201e:	f7fe fedb 	bl	8000dd8 <HAL_GetTick>
 8002022:	0003      	movs	r3, r0
 8002024:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002026:	e009      	b.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002028:	f7fe fed6 	bl	8000dd8 <HAL_GetTick>
 800202c:	0002      	movs	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	4a25      	ldr	r2, [pc, #148]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d901      	bls.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e038      	b.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203c:	4b1e      	ldr	r3, [pc, #120]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	2202      	movs	r2, #2
 8002042:	4013      	ands	r3, r2
 8002044:	d0f0      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002046:	4b1c      	ldr	r3, [pc, #112]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	4a1d      	ldr	r2, [pc, #116]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800204c:	4013      	ands	r3, r2
 800204e:	0019      	movs	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	4b18      	ldr	r3, [pc, #96]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002056:	430a      	orrs	r2, r1
 8002058:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800205a:	2317      	movs	r3, #23
 800205c:	18fb      	adds	r3, r7, r3
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d105      	bne.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002064:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002066:	69da      	ldr	r2, [r3, #28]
 8002068:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800206a:	4918      	ldr	r1, [pc, #96]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800206c:	400a      	ands	r2, r1
 800206e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2201      	movs	r2, #1
 8002076:	4013      	ands	r3, r2
 8002078:	d009      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800207a:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	2203      	movs	r2, #3
 8002080:	4393      	bics	r3, r2
 8002082:	0019      	movs	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800208a:	430a      	orrs	r2, r1
 800208c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2220      	movs	r2, #32
 8002094:	4013      	ands	r3, r2
 8002096:	d009      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002098:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800209a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209c:	2210      	movs	r2, #16
 800209e:	4393      	bics	r3, r2
 80020a0:	0019      	movs	r1, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020a8:	430a      	orrs	r2, r1
 80020aa:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	0018      	movs	r0, r3
 80020b0:	46bd      	mov	sp, r7
 80020b2:	b006      	add	sp, #24
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40007000 	.word	0x40007000
 80020c0:	fffffcff 	.word	0xfffffcff
 80020c4:	fffeffff 	.word	0xfffeffff
 80020c8:	00001388 	.word	0x00001388
 80020cc:	efffffff 	.word	0xefffffff

080020d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e0a8      	b.n	8002234 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d109      	bne.n	80020fe <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	2382      	movs	r3, #130	; 0x82
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d009      	beq.n	800210a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	61da      	str	r2, [r3, #28]
 80020fc:	e005      	b.n	800210a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	225d      	movs	r2, #93	; 0x5d
 8002114:	5c9b      	ldrb	r3, [r3, r2]
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	d107      	bne.n	800212c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	225c      	movs	r2, #92	; 0x5c
 8002120:	2100      	movs	r1, #0
 8002122:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	0018      	movs	r0, r3
 8002128:	f7fe fcb0 	bl	8000a8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	225d      	movs	r2, #93	; 0x5d
 8002130:	2102      	movs	r1, #2
 8002132:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2140      	movs	r1, #64	; 0x40
 8002140:	438a      	bics	r2, r1
 8002142:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	23e0      	movs	r3, #224	; 0xe0
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	429a      	cmp	r2, r3
 800214e:	d902      	bls.n	8002156 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	e002      	b.n	800215c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002156:	2380      	movs	r3, #128	; 0x80
 8002158:	015b      	lsls	r3, r3, #5
 800215a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	23f0      	movs	r3, #240	; 0xf0
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	429a      	cmp	r2, r3
 8002166:	d008      	beq.n	800217a <HAL_SPI_Init+0xaa>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	23e0      	movs	r3, #224	; 0xe0
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	429a      	cmp	r2, r3
 8002172:	d002      	beq.n	800217a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	2382      	movs	r3, #130	; 0x82
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	401a      	ands	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6899      	ldr	r1, [r3, #8]
 8002188:	2384      	movs	r3, #132	; 0x84
 800218a:	021b      	lsls	r3, r3, #8
 800218c:	400b      	ands	r3, r1
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	2102      	movs	r1, #2
 8002196:	400b      	ands	r3, r1
 8002198:	431a      	orrs	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	2101      	movs	r1, #1
 80021a0:	400b      	ands	r3, r1
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6999      	ldr	r1, [r3, #24]
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	400b      	ands	r3, r1
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	2138      	movs	r1, #56	; 0x38
 80021b6:	400b      	ands	r3, r1
 80021b8:	431a      	orrs	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	2180      	movs	r1, #128	; 0x80
 80021c0:	400b      	ands	r3, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	0011      	movs	r1, r2
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021ca:	2380      	movs	r3, #128	; 0x80
 80021cc:	019b      	lsls	r3, r3, #6
 80021ce:	401a      	ands	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	0c1b      	lsrs	r3, r3, #16
 80021de:	2204      	movs	r2, #4
 80021e0:	401a      	ands	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	2110      	movs	r1, #16
 80021e8:	400b      	ands	r3, r1
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f0:	2108      	movs	r1, #8
 80021f2:	400b      	ands	r3, r1
 80021f4:	431a      	orrs	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68d9      	ldr	r1, [r3, #12]
 80021fa:	23f0      	movs	r3, #240	; 0xf0
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	400b      	ands	r3, r1
 8002200:	431a      	orrs	r2, r3
 8002202:	0011      	movs	r1, r2
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	015b      	lsls	r3, r3, #5
 800220a:	401a      	ands	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	69da      	ldr	r2, [r3, #28]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4907      	ldr	r1, [pc, #28]	; (800223c <HAL_SPI_Init+0x16c>)
 8002220:	400a      	ands	r2, r1
 8002222:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	225d      	movs	r2, #93	; 0x5d
 800222e:	2101      	movs	r1, #1
 8002230:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	0018      	movs	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	b004      	add	sp, #16
 800223a:	bd80      	pop	{r7, pc}
 800223c:	fffff7ff 	.word	0xfffff7ff

08002240 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08a      	sub	sp, #40	; 0x28
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
 800224c:	001a      	movs	r2, r3
 800224e:	1cbb      	adds	r3, r7, #2
 8002250:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002252:	2301      	movs	r3, #1
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002256:	2323      	movs	r3, #35	; 0x23
 8002258:	18fb      	adds	r3, r7, r3
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	225c      	movs	r2, #92	; 0x5c
 8002262:	5c9b      	ldrb	r3, [r3, r2]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <HAL_SPI_TransmitReceive+0x2c>
 8002268:	2302      	movs	r3, #2
 800226a:	e1c4      	b.n	80025f6 <HAL_SPI_TransmitReceive+0x3b6>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	225c      	movs	r2, #92	; 0x5c
 8002270:	2101      	movs	r1, #1
 8002272:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002274:	f7fe fdb0 	bl	8000dd8 <HAL_GetTick>
 8002278:	0003      	movs	r3, r0
 800227a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800227c:	201b      	movs	r0, #27
 800227e:	183b      	adds	r3, r7, r0
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	215d      	movs	r1, #93	; 0x5d
 8002284:	5c52      	ldrb	r2, [r2, r1]
 8002286:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800228e:	2312      	movs	r3, #18
 8002290:	18fb      	adds	r3, r7, r3
 8002292:	1cba      	adds	r2, r7, #2
 8002294:	8812      	ldrh	r2, [r2, #0]
 8002296:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002298:	183b      	adds	r3, r7, r0
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d011      	beq.n	80022c4 <HAL_SPI_TransmitReceive+0x84>
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	2382      	movs	r3, #130	; 0x82
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d107      	bne.n	80022ba <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d103      	bne.n	80022ba <HAL_SPI_TransmitReceive+0x7a>
 80022b2:	183b      	adds	r3, r7, r0
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d004      	beq.n	80022c4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80022ba:	2323      	movs	r3, #35	; 0x23
 80022bc:	18fb      	adds	r3, r7, r3
 80022be:	2202      	movs	r2, #2
 80022c0:	701a      	strb	r2, [r3, #0]
    goto error;
 80022c2:	e191      	b.n	80025e8 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d006      	beq.n	80022d8 <HAL_SPI_TransmitReceive+0x98>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_SPI_TransmitReceive+0x98>
 80022d0:	1cbb      	adds	r3, r7, #2
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d104      	bne.n	80022e2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80022d8:	2323      	movs	r3, #35	; 0x23
 80022da:	18fb      	adds	r3, r7, r3
 80022dc:	2201      	movs	r2, #1
 80022de:	701a      	strb	r2, [r3, #0]
    goto error;
 80022e0:	e182      	b.n	80025e8 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	225d      	movs	r2, #93	; 0x5d
 80022e6:	5c9b      	ldrb	r3, [r3, r2]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d003      	beq.n	80022f6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	225d      	movs	r2, #93	; 0x5d
 80022f2:	2105      	movs	r1, #5
 80022f4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1cba      	adds	r2, r7, #2
 8002306:	2146      	movs	r1, #70	; 0x46
 8002308:	8812      	ldrh	r2, [r2, #0]
 800230a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	1cba      	adds	r2, r7, #2
 8002310:	2144      	movs	r1, #68	; 0x44
 8002312:	8812      	ldrh	r2, [r2, #0]
 8002314:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	1cba      	adds	r2, r7, #2
 8002320:	8812      	ldrh	r2, [r2, #0]
 8002322:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	1cba      	adds	r2, r7, #2
 8002328:	8812      	ldrh	r2, [r2, #0]
 800232a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	23e0      	movs	r3, #224	; 0xe0
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	429a      	cmp	r2, r3
 8002342:	d908      	bls.n	8002356 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	49ac      	ldr	r1, [pc, #688]	; (8002600 <HAL_SPI_TransmitReceive+0x3c0>)
 8002350:	400a      	ands	r2, r1
 8002352:	605a      	str	r2, [r3, #4]
 8002354:	e008      	b.n	8002368 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2180      	movs	r1, #128	; 0x80
 8002362:	0149      	lsls	r1, r1, #5
 8002364:	430a      	orrs	r2, r1
 8002366:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2240      	movs	r2, #64	; 0x40
 8002370:	4013      	ands	r3, r2
 8002372:	2b40      	cmp	r3, #64	; 0x40
 8002374:	d007      	beq.n	8002386 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2140      	movs	r1, #64	; 0x40
 8002382:	430a      	orrs	r2, r1
 8002384:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	23e0      	movs	r3, #224	; 0xe0
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	429a      	cmp	r2, r3
 8002390:	d800      	bhi.n	8002394 <HAL_SPI_TransmitReceive+0x154>
 8002392:	e083      	b.n	800249c <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_SPI_TransmitReceive+0x168>
 800239c:	2312      	movs	r3, #18
 800239e:	18fb      	adds	r3, r7, r3
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d000      	beq.n	80023a8 <HAL_SPI_TransmitReceive+0x168>
 80023a6:	e06d      	b.n	8002484 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ac:	881a      	ldrh	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b8:	1c9a      	adds	r2, r3, #2
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023cc:	e05a      	b.n	8002484 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	2202      	movs	r2, #2
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d11b      	bne.n	8002414 <HAL_SPI_TransmitReceive+0x1d4>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d016      	beq.n	8002414 <HAL_SPI_TransmitReceive+0x1d4>
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d113      	bne.n	8002414 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f0:	881a      	ldrh	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fc:	1c9a      	adds	r2, r3, #2
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002406:	b29b      	uxth	r3, r3
 8002408:	3b01      	subs	r3, #1
 800240a:	b29a      	uxth	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2201      	movs	r2, #1
 800241c:	4013      	ands	r3, r2
 800241e:	2b01      	cmp	r3, #1
 8002420:	d11c      	bne.n	800245c <HAL_SPI_TransmitReceive+0x21c>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2246      	movs	r2, #70	; 0x46
 8002426:	5a9b      	ldrh	r3, [r3, r2]
 8002428:	b29b      	uxth	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d016      	beq.n	800245c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	b292      	uxth	r2, r2
 800243a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	1c9a      	adds	r2, r3, #2
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2246      	movs	r2, #70	; 0x46
 800244a:	5a9b      	ldrh	r3, [r3, r2]
 800244c:	b29b      	uxth	r3, r3
 800244e:	3b01      	subs	r3, #1
 8002450:	b299      	uxth	r1, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2246      	movs	r2, #70	; 0x46
 8002456:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002458:	2301      	movs	r3, #1
 800245a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800245c:	f7fe fcbc 	bl	8000dd8 <HAL_GetTick>
 8002460:	0002      	movs	r2, r0
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002468:	429a      	cmp	r2, r3
 800246a:	d80b      	bhi.n	8002484 <HAL_SPI_TransmitReceive+0x244>
 800246c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246e:	3301      	adds	r3, #1
 8002470:	d008      	beq.n	8002484 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8002472:	2323      	movs	r3, #35	; 0x23
 8002474:	18fb      	adds	r3, r7, r3
 8002476:	2203      	movs	r2, #3
 8002478:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	225d      	movs	r2, #93	; 0x5d
 800247e:	2101      	movs	r1, #1
 8002480:	5499      	strb	r1, [r3, r2]
        goto error;
 8002482:	e0b1      	b.n	80025e8 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002488:	b29b      	uxth	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d19f      	bne.n	80023ce <HAL_SPI_TransmitReceive+0x18e>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2246      	movs	r2, #70	; 0x46
 8002492:	5a9b      	ldrh	r3, [r3, r2]
 8002494:	b29b      	uxth	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d199      	bne.n	80023ce <HAL_SPI_TransmitReceive+0x18e>
 800249a:	e089      	b.n	80025b0 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <HAL_SPI_TransmitReceive+0x270>
 80024a4:	2312      	movs	r3, #18
 80024a6:	18fb      	adds	r3, r7, r3
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d000      	beq.n	80024b0 <HAL_SPI_TransmitReceive+0x270>
 80024ae:	e074      	b.n	800259a <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	330c      	adds	r3, #12
 80024ba:	7812      	ldrb	r2, [r2, #0]
 80024bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	3b01      	subs	r3, #1
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024d6:	e060      	b.n	800259a <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2202      	movs	r2, #2
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d11c      	bne.n	8002520 <HAL_SPI_TransmitReceive+0x2e0>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d017      	beq.n	8002520 <HAL_SPI_TransmitReceive+0x2e0>
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d114      	bne.n	8002520 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	330c      	adds	r3, #12
 8002500:	7812      	ldrb	r2, [r2, #0]
 8002502:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002512:	b29b      	uxth	r3, r3
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2201      	movs	r2, #1
 8002528:	4013      	ands	r3, r2
 800252a:	2b01      	cmp	r3, #1
 800252c:	d11e      	bne.n	800256c <HAL_SPI_TransmitReceive+0x32c>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2246      	movs	r2, #70	; 0x46
 8002532:	5a9b      	ldrh	r3, [r3, r2]
 8002534:	b29b      	uxth	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d018      	beq.n	800256c <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	330c      	adds	r3, #12
 8002540:	001a      	movs	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	7812      	ldrb	r2, [r2, #0]
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2246      	movs	r2, #70	; 0x46
 800255a:	5a9b      	ldrh	r3, [r3, r2]
 800255c:	b29b      	uxth	r3, r3
 800255e:	3b01      	subs	r3, #1
 8002560:	b299      	uxth	r1, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2246      	movs	r2, #70	; 0x46
 8002566:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002568:	2301      	movs	r3, #1
 800256a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800256c:	f7fe fc34 	bl	8000dd8 <HAL_GetTick>
 8002570:	0002      	movs	r2, r0
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002578:	429a      	cmp	r2, r3
 800257a:	d802      	bhi.n	8002582 <HAL_SPI_TransmitReceive+0x342>
 800257c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257e:	3301      	adds	r3, #1
 8002580:	d102      	bne.n	8002588 <HAL_SPI_TransmitReceive+0x348>
 8002582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002584:	2b00      	cmp	r3, #0
 8002586:	d108      	bne.n	800259a <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8002588:	2323      	movs	r3, #35	; 0x23
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	2203      	movs	r2, #3
 800258e:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	225d      	movs	r2, #93	; 0x5d
 8002594:	2101      	movs	r1, #1
 8002596:	5499      	strb	r1, [r3, r2]
        goto error;
 8002598:	e026      	b.n	80025e8 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800259e:	b29b      	uxth	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d199      	bne.n	80024d8 <HAL_SPI_TransmitReceive+0x298>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2246      	movs	r2, #70	; 0x46
 80025a8:	5a9b      	ldrh	r3, [r3, r2]
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d193      	bne.n	80024d8 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025b0:	69fa      	ldr	r2, [r7, #28]
 80025b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	0018      	movs	r0, r3
 80025b8:	f000 f954 	bl	8002864 <SPI_EndRxTxTransaction>
 80025bc:	1e03      	subs	r3, r0, #0
 80025be:	d006      	beq.n	80025ce <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80025c0:	2323      	movs	r3, #35	; 0x23
 80025c2:	18fb      	adds	r3, r7, r3
 80025c4:	2201      	movs	r2, #1
 80025c6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2220      	movs	r2, #32
 80025cc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d004      	beq.n	80025e0 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80025d6:	2323      	movs	r3, #35	; 0x23
 80025d8:	18fb      	adds	r3, r7, r3
 80025da:	2201      	movs	r2, #1
 80025dc:	701a      	strb	r2, [r3, #0]
 80025de:	e003      	b.n	80025e8 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	225d      	movs	r2, #93	; 0x5d
 80025e4:	2101      	movs	r1, #1
 80025e6:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	225c      	movs	r2, #92	; 0x5c
 80025ec:	2100      	movs	r1, #0
 80025ee:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80025f0:	2323      	movs	r3, #35	; 0x23
 80025f2:	18fb      	adds	r3, r7, r3
 80025f4:	781b      	ldrb	r3, [r3, #0]
}
 80025f6:	0018      	movs	r0, r3
 80025f8:	46bd      	mov	sp, r7
 80025fa:	b00a      	add	sp, #40	; 0x28
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	ffffefff 	.word	0xffffefff

08002604 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	603b      	str	r3, [r7, #0]
 8002610:	1dfb      	adds	r3, r7, #7
 8002612:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002614:	f7fe fbe0 	bl	8000dd8 <HAL_GetTick>
 8002618:	0002      	movs	r2, r0
 800261a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261c:	1a9b      	subs	r3, r3, r2
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	18d3      	adds	r3, r2, r3
 8002622:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002624:	f7fe fbd8 	bl	8000dd8 <HAL_GetTick>
 8002628:	0003      	movs	r3, r0
 800262a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800262c:	4b3a      	ldr	r3, [pc, #232]	; (8002718 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	015b      	lsls	r3, r3, #5
 8002632:	0d1b      	lsrs	r3, r3, #20
 8002634:	69fa      	ldr	r2, [r7, #28]
 8002636:	4353      	muls	r3, r2
 8002638:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800263a:	e058      	b.n	80026ee <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	3301      	adds	r3, #1
 8002640:	d055      	beq.n	80026ee <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002642:	f7fe fbc9 	bl	8000dd8 <HAL_GetTick>
 8002646:	0002      	movs	r2, r0
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	69fa      	ldr	r2, [r7, #28]
 800264e:	429a      	cmp	r2, r3
 8002650:	d902      	bls.n	8002658 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d142      	bne.n	80026de <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	21e0      	movs	r1, #224	; 0xe0
 8002664:	438a      	bics	r2, r1
 8002666:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	2382      	movs	r3, #130	; 0x82
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	429a      	cmp	r2, r3
 8002672:	d113      	bne.n	800269c <SPI_WaitFlagStateUntilTimeout+0x98>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	2380      	movs	r3, #128	; 0x80
 800267a:	021b      	lsls	r3, r3, #8
 800267c:	429a      	cmp	r2, r3
 800267e:	d005      	beq.n	800268c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	429a      	cmp	r2, r3
 800268a:	d107      	bne.n	800269c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2140      	movs	r1, #64	; 0x40
 8002698:	438a      	bics	r2, r1
 800269a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026a0:	2380      	movs	r3, #128	; 0x80
 80026a2:	019b      	lsls	r3, r3, #6
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d110      	bne.n	80026ca <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	491a      	ldr	r1, [pc, #104]	; (800271c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80026b4:	400a      	ands	r2, r1
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2180      	movs	r1, #128	; 0x80
 80026c4:	0189      	lsls	r1, r1, #6
 80026c6:	430a      	orrs	r2, r1
 80026c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	225d      	movs	r2, #93	; 0x5d
 80026ce:	2101      	movs	r1, #1
 80026d0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	225c      	movs	r2, #92	; 0x5c
 80026d6:	2100      	movs	r1, #0
 80026d8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e017      	b.n	800270e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	4013      	ands	r3, r2
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	425a      	negs	r2, r3
 80026fe:	4153      	adcs	r3, r2
 8002700:	b2db      	uxtb	r3, r3
 8002702:	001a      	movs	r2, r3
 8002704:	1dfb      	adds	r3, r7, #7
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	429a      	cmp	r2, r3
 800270a:	d197      	bne.n	800263c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	0018      	movs	r0, r3
 8002710:	46bd      	mov	sp, r7
 8002712:	b008      	add	sp, #32
 8002714:	bd80      	pop	{r7, pc}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	20000010 	.word	0x20000010
 800271c:	ffffdfff 	.word	0xffffdfff

08002720 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08a      	sub	sp, #40	; 0x28
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
 800272c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800272e:	2317      	movs	r3, #23
 8002730:	18fb      	adds	r3, r7, r3
 8002732:	2200      	movs	r2, #0
 8002734:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002736:	f7fe fb4f 	bl	8000dd8 <HAL_GetTick>
 800273a:	0002      	movs	r2, r0
 800273c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273e:	1a9b      	subs	r3, r3, r2
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	18d3      	adds	r3, r2, r3
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002746:	f7fe fb47 	bl	8000dd8 <HAL_GetTick>
 800274a:	0003      	movs	r3, r0
 800274c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	330c      	adds	r3, #12
 8002754:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002756:	4b41      	ldr	r3, [pc, #260]	; (800285c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	0013      	movs	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	189b      	adds	r3, r3, r2
 8002760:	00da      	lsls	r2, r3, #3
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	0d1b      	lsrs	r3, r3, #20
 8002766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002768:	4353      	muls	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800276c:	e068      	b.n	8002840 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	23c0      	movs	r3, #192	; 0xc0
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	429a      	cmp	r2, r3
 8002776:	d10a      	bne.n	800278e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d107      	bne.n	800278e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	b2da      	uxtb	r2, r3
 8002784:	2117      	movs	r1, #23
 8002786:	187b      	adds	r3, r7, r1
 8002788:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800278a:	187b      	adds	r3, r7, r1
 800278c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	3301      	adds	r3, #1
 8002792:	d055      	beq.n	8002840 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002794:	f7fe fb20 	bl	8000dd8 <HAL_GetTick>
 8002798:	0002      	movs	r2, r0
 800279a:	6a3b      	ldr	r3, [r7, #32]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d902      	bls.n	80027aa <SPI_WaitFifoStateUntilTimeout+0x8a>
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d142      	bne.n	8002830 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	21e0      	movs	r1, #224	; 0xe0
 80027b6:	438a      	bics	r2, r1
 80027b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	2382      	movs	r3, #130	; 0x82
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d113      	bne.n	80027ee <SPI_WaitFifoStateUntilTimeout+0xce>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	2380      	movs	r3, #128	; 0x80
 80027cc:	021b      	lsls	r3, r3, #8
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d005      	beq.n	80027de <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	2380      	movs	r3, #128	; 0x80
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	429a      	cmp	r2, r3
 80027dc:	d107      	bne.n	80027ee <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2140      	movs	r1, #64	; 0x40
 80027ea:	438a      	bics	r2, r1
 80027ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	019b      	lsls	r3, r3, #6
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d110      	bne.n	800281c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4916      	ldr	r1, [pc, #88]	; (8002860 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002806:	400a      	ands	r2, r1
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2180      	movs	r1, #128	; 0x80
 8002816:	0189      	lsls	r1, r1, #6
 8002818:	430a      	orrs	r2, r1
 800281a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	225d      	movs	r2, #93	; 0x5d
 8002820:	2101      	movs	r1, #1
 8002822:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	225c      	movs	r2, #92	; 0x5c
 8002828:	2100      	movs	r1, #0
 800282a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e010      	b.n	8002852 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002836:	2300      	movs	r3, #0
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	3b01      	subs	r3, #1
 800283e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	4013      	ands	r3, r2
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	429a      	cmp	r2, r3
 800284e:	d18e      	bne.n	800276e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	0018      	movs	r0, r3
 8002854:	46bd      	mov	sp, r7
 8002856:	b00a      	add	sp, #40	; 0x28
 8002858:	bd80      	pop	{r7, pc}
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	20000010 	.word	0x20000010
 8002860:	ffffdfff 	.word	0xffffdfff

08002864 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af02      	add	r7, sp, #8
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	23c0      	movs	r3, #192	; 0xc0
 8002874:	0159      	lsls	r1, r3, #5
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	0013      	movs	r3, r2
 800287e:	2200      	movs	r2, #0
 8002880:	f7ff ff4e 	bl	8002720 <SPI_WaitFifoStateUntilTimeout>
 8002884:	1e03      	subs	r3, r0, #0
 8002886:	d007      	beq.n	8002898 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800288c:	2220      	movs	r2, #32
 800288e:	431a      	orrs	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e027      	b.n	80028e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	0013      	movs	r3, r2
 80028a2:	2200      	movs	r2, #0
 80028a4:	2180      	movs	r1, #128	; 0x80
 80028a6:	f7ff fead 	bl	8002604 <SPI_WaitFlagStateUntilTimeout>
 80028aa:	1e03      	subs	r3, r0, #0
 80028ac:	d007      	beq.n	80028be <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028b2:	2220      	movs	r2, #32
 80028b4:	431a      	orrs	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e014      	b.n	80028e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	23c0      	movs	r3, #192	; 0xc0
 80028c2:	00d9      	lsls	r1, r3, #3
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	0013      	movs	r3, r2
 80028cc:	2200      	movs	r2, #0
 80028ce:	f7ff ff27 	bl	8002720 <SPI_WaitFifoStateUntilTimeout>
 80028d2:	1e03      	subs	r3, r0, #0
 80028d4:	d007      	beq.n	80028e6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028da:	2220      	movs	r2, #32
 80028dc:	431a      	orrs	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e000      	b.n	80028e8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	0018      	movs	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	b004      	add	sp, #16
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e042      	b.n	8002988 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	223d      	movs	r2, #61	; 0x3d
 8002906:	5c9b      	ldrb	r3, [r3, r2]
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d107      	bne.n	800291e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	223c      	movs	r2, #60	; 0x3c
 8002912:	2100      	movs	r1, #0
 8002914:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	0018      	movs	r0, r3
 800291a:	f7fe f903 	bl	8000b24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	223d      	movs	r2, #61	; 0x3d
 8002922:	2102      	movs	r1, #2
 8002924:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3304      	adds	r3, #4
 800292e:	0019      	movs	r1, r3
 8002930:	0010      	movs	r0, r2
 8002932:	f000 fa83 	bl	8002e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2246      	movs	r2, #70	; 0x46
 800293a:	2101      	movs	r1, #1
 800293c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	223e      	movs	r2, #62	; 0x3e
 8002942:	2101      	movs	r1, #1
 8002944:	5499      	strb	r1, [r3, r2]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	223f      	movs	r2, #63	; 0x3f
 800294a:	2101      	movs	r1, #1
 800294c:	5499      	strb	r1, [r3, r2]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2240      	movs	r2, #64	; 0x40
 8002952:	2101      	movs	r1, #1
 8002954:	5499      	strb	r1, [r3, r2]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2241      	movs	r2, #65	; 0x41
 800295a:	2101      	movs	r1, #1
 800295c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2242      	movs	r2, #66	; 0x42
 8002962:	2101      	movs	r1, #1
 8002964:	5499      	strb	r1, [r3, r2]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2243      	movs	r2, #67	; 0x43
 800296a:	2101      	movs	r1, #1
 800296c:	5499      	strb	r1, [r3, r2]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2244      	movs	r2, #68	; 0x44
 8002972:	2101      	movs	r1, #1
 8002974:	5499      	strb	r1, [r3, r2]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2245      	movs	r2, #69	; 0x45
 800297a:	2101      	movs	r1, #1
 800297c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	223d      	movs	r2, #61	; 0x3d
 8002982:	2101      	movs	r1, #1
 8002984:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	0018      	movs	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	b002      	add	sp, #8
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	223d      	movs	r2, #61	; 0x3d
 800299c:	5c9b      	ldrb	r3, [r3, r2]
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d001      	beq.n	80029a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e035      	b.n	8002a14 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	223d      	movs	r2, #61	; 0x3d
 80029ac:	2102      	movs	r1, #2
 80029ae:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2101      	movs	r1, #1
 80029bc:	430a      	orrs	r2, r1
 80029be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a15      	ldr	r2, [pc, #84]	; (8002a1c <HAL_TIM_Base_Start_IT+0x8c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d009      	beq.n	80029de <HAL_TIM_Base_Start_IT+0x4e>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a14      	ldr	r2, [pc, #80]	; (8002a20 <HAL_TIM_Base_Start_IT+0x90>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d004      	beq.n	80029de <HAL_TIM_Base_Start_IT+0x4e>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a12      	ldr	r2, [pc, #72]	; (8002a24 <HAL_TIM_Base_Start_IT+0x94>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d111      	bne.n	8002a02 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	2207      	movs	r2, #7
 80029e6:	4013      	ands	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2b06      	cmp	r3, #6
 80029ee:	d010      	beq.n	8002a12 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2101      	movs	r1, #1
 80029fc:	430a      	orrs	r2, r1
 80029fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a00:	e007      	b.n	8002a12 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	0018      	movs	r0, r3
 8002a16:	46bd      	mov	sp, r7
 8002a18:	b004      	add	sp, #16
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40012c00 	.word	0x40012c00
 8002a20:	40000400 	.word	0x40000400
 8002a24:	40014000 	.word	0x40014000

08002a28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	2202      	movs	r2, #2
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d124      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	2202      	movs	r2, #2
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d11d      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2203      	movs	r2, #3
 8002a52:	4252      	negs	r2, r2
 8002a54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	2203      	movs	r2, #3
 8002a64:	4013      	ands	r3, r2
 8002a66:	d004      	beq.n	8002a72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	f000 f9ce 	bl	8002e0c <HAL_TIM_IC_CaptureCallback>
 8002a70:	e007      	b.n	8002a82 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	0018      	movs	r0, r3
 8002a76:	f000 f9c1 	bl	8002dfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f000 f9cd 	bl	8002e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	2204      	movs	r2, #4
 8002a90:	4013      	ands	r3, r2
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d125      	bne.n	8002ae2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	2204      	movs	r2, #4
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	d11e      	bne.n	8002ae2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2205      	movs	r2, #5
 8002aaa:	4252      	negs	r2, r2
 8002aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699a      	ldr	r2, [r3, #24]
 8002aba:	23c0      	movs	r3, #192	; 0xc0
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d004      	beq.n	8002acc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f000 f9a1 	bl	8002e0c <HAL_TIM_IC_CaptureCallback>
 8002aca:	e007      	b.n	8002adc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f000 f994 	bl	8002dfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f000 f9a0 	bl	8002e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	2208      	movs	r2, #8
 8002aea:	4013      	ands	r3, r2
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d124      	bne.n	8002b3a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	2208      	movs	r2, #8
 8002af8:	4013      	ands	r3, r2
 8002afa:	2b08      	cmp	r3, #8
 8002afc:	d11d      	bne.n	8002b3a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2209      	movs	r2, #9
 8002b04:	4252      	negs	r2, r2
 8002b06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2204      	movs	r2, #4
 8002b0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	2203      	movs	r2, #3
 8002b16:	4013      	ands	r3, r2
 8002b18:	d004      	beq.n	8002b24 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f000 f975 	bl	8002e0c <HAL_TIM_IC_CaptureCallback>
 8002b22:	e007      	b.n	8002b34 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	0018      	movs	r0, r3
 8002b28:	f000 f968 	bl	8002dfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f000 f974 	bl	8002e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	2210      	movs	r2, #16
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b10      	cmp	r3, #16
 8002b46:	d125      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	2210      	movs	r2, #16
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b10      	cmp	r3, #16
 8002b54:	d11e      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2211      	movs	r2, #17
 8002b5c:	4252      	negs	r2, r2
 8002b5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2208      	movs	r2, #8
 8002b64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	69da      	ldr	r2, [r3, #28]
 8002b6c:	23c0      	movs	r3, #192	; 0xc0
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4013      	ands	r3, r2
 8002b72:	d004      	beq.n	8002b7e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	0018      	movs	r0, r3
 8002b78:	f000 f948 	bl	8002e0c <HAL_TIM_IC_CaptureCallback>
 8002b7c:	e007      	b.n	8002b8e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	0018      	movs	r0, r3
 8002b82:	f000 f93b 	bl	8002dfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f000 f947 	bl	8002e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d10f      	bne.n	8002bc2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d108      	bne.n	8002bc2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	4252      	negs	r2, r2
 8002bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f7fd fee1 	bl	8000984 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	2280      	movs	r2, #128	; 0x80
 8002bca:	4013      	ands	r3, r2
 8002bcc:	2b80      	cmp	r3, #128	; 0x80
 8002bce:	d10f      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	2280      	movs	r2, #128	; 0x80
 8002bd8:	4013      	ands	r3, r2
 8002bda:	2b80      	cmp	r3, #128	; 0x80
 8002bdc:	d108      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2281      	movs	r2, #129	; 0x81
 8002be4:	4252      	negs	r2, r2
 8002be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	0018      	movs	r0, r3
 8002bec:	f000 fa96 	bl	800311c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	2240      	movs	r2, #64	; 0x40
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	2b40      	cmp	r3, #64	; 0x40
 8002bfc:	d10f      	bne.n	8002c1e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	2240      	movs	r2, #64	; 0x40
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b40      	cmp	r3, #64	; 0x40
 8002c0a:	d108      	bne.n	8002c1e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2241      	movs	r2, #65	; 0x41
 8002c12:	4252      	negs	r2, r2
 8002c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f000 f907 	bl	8002e2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	2220      	movs	r2, #32
 8002c26:	4013      	ands	r3, r2
 8002c28:	2b20      	cmp	r3, #32
 8002c2a:	d10f      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	4013      	ands	r3, r2
 8002c36:	2b20      	cmp	r3, #32
 8002c38:	d108      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2221      	movs	r2, #33	; 0x21
 8002c40:	4252      	negs	r2, r2
 8002c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	0018      	movs	r0, r3
 8002c48:	f000 fa60 	bl	800310c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c4c:	46c0      	nop			; (mov r8, r8)
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b002      	add	sp, #8
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c5e:	230f      	movs	r3, #15
 8002c60:	18fb      	adds	r3, r7, r3
 8002c62:	2200      	movs	r2, #0
 8002c64:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	223c      	movs	r2, #60	; 0x3c
 8002c6a:	5c9b      	ldrb	r3, [r3, r2]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <HAL_TIM_ConfigClockSource+0x20>
 8002c70:	2302      	movs	r3, #2
 8002c72:	e0bc      	b.n	8002dee <HAL_TIM_ConfigClockSource+0x19a>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	223c      	movs	r2, #60	; 0x3c
 8002c78:	2101      	movs	r1, #1
 8002c7a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	223d      	movs	r2, #61	; 0x3d
 8002c80:	2102      	movs	r1, #2
 8002c82:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2277      	movs	r2, #119	; 0x77
 8002c90:	4393      	bics	r3, r2
 8002c92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	4a58      	ldr	r2, [pc, #352]	; (8002df8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002c98:	4013      	ands	r3, r2
 8002c9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2280      	movs	r2, #128	; 0x80
 8002caa:	0192      	lsls	r2, r2, #6
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d040      	beq.n	8002d32 <HAL_TIM_ConfigClockSource+0xde>
 8002cb0:	2280      	movs	r2, #128	; 0x80
 8002cb2:	0192      	lsls	r2, r2, #6
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d900      	bls.n	8002cba <HAL_TIM_ConfigClockSource+0x66>
 8002cb8:	e088      	b.n	8002dcc <HAL_TIM_ConfigClockSource+0x178>
 8002cba:	2280      	movs	r2, #128	; 0x80
 8002cbc:	0152      	lsls	r2, r2, #5
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d100      	bne.n	8002cc4 <HAL_TIM_ConfigClockSource+0x70>
 8002cc2:	e088      	b.n	8002dd6 <HAL_TIM_ConfigClockSource+0x182>
 8002cc4:	2280      	movs	r2, #128	; 0x80
 8002cc6:	0152      	lsls	r2, r2, #5
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d900      	bls.n	8002cce <HAL_TIM_ConfigClockSource+0x7a>
 8002ccc:	e07e      	b.n	8002dcc <HAL_TIM_ConfigClockSource+0x178>
 8002cce:	2b70      	cmp	r3, #112	; 0x70
 8002cd0:	d018      	beq.n	8002d04 <HAL_TIM_ConfigClockSource+0xb0>
 8002cd2:	d900      	bls.n	8002cd6 <HAL_TIM_ConfigClockSource+0x82>
 8002cd4:	e07a      	b.n	8002dcc <HAL_TIM_ConfigClockSource+0x178>
 8002cd6:	2b60      	cmp	r3, #96	; 0x60
 8002cd8:	d04f      	beq.n	8002d7a <HAL_TIM_ConfigClockSource+0x126>
 8002cda:	d900      	bls.n	8002cde <HAL_TIM_ConfigClockSource+0x8a>
 8002cdc:	e076      	b.n	8002dcc <HAL_TIM_ConfigClockSource+0x178>
 8002cde:	2b50      	cmp	r3, #80	; 0x50
 8002ce0:	d03b      	beq.n	8002d5a <HAL_TIM_ConfigClockSource+0x106>
 8002ce2:	d900      	bls.n	8002ce6 <HAL_TIM_ConfigClockSource+0x92>
 8002ce4:	e072      	b.n	8002dcc <HAL_TIM_ConfigClockSource+0x178>
 8002ce6:	2b40      	cmp	r3, #64	; 0x40
 8002ce8:	d057      	beq.n	8002d9a <HAL_TIM_ConfigClockSource+0x146>
 8002cea:	d900      	bls.n	8002cee <HAL_TIM_ConfigClockSource+0x9a>
 8002cec:	e06e      	b.n	8002dcc <HAL_TIM_ConfigClockSource+0x178>
 8002cee:	2b30      	cmp	r3, #48	; 0x30
 8002cf0:	d063      	beq.n	8002dba <HAL_TIM_ConfigClockSource+0x166>
 8002cf2:	d86b      	bhi.n	8002dcc <HAL_TIM_ConfigClockSource+0x178>
 8002cf4:	2b20      	cmp	r3, #32
 8002cf6:	d060      	beq.n	8002dba <HAL_TIM_ConfigClockSource+0x166>
 8002cf8:	d868      	bhi.n	8002dcc <HAL_TIM_ConfigClockSource+0x178>
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d05d      	beq.n	8002dba <HAL_TIM_ConfigClockSource+0x166>
 8002cfe:	2b10      	cmp	r3, #16
 8002d00:	d05b      	beq.n	8002dba <HAL_TIM_ConfigClockSource+0x166>
 8002d02:	e063      	b.n	8002dcc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6818      	ldr	r0, [r3, #0]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	6899      	ldr	r1, [r3, #8]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f000 f982 	bl	800301c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2277      	movs	r2, #119	; 0x77
 8002d24:	4313      	orrs	r3, r2
 8002d26:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	609a      	str	r2, [r3, #8]
      break;
 8002d30:	e052      	b.n	8002dd8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	6899      	ldr	r1, [r3, #8]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f000 f96b 	bl	800301c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2180      	movs	r1, #128	; 0x80
 8002d52:	01c9      	lsls	r1, r1, #7
 8002d54:	430a      	orrs	r2, r1
 8002d56:	609a      	str	r2, [r3, #8]
      break;
 8002d58:	e03e      	b.n	8002dd8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	6859      	ldr	r1, [r3, #4]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	001a      	movs	r2, r3
 8002d68:	f000 f8de 	bl	8002f28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2150      	movs	r1, #80	; 0x50
 8002d72:	0018      	movs	r0, r3
 8002d74:	f000 f938 	bl	8002fe8 <TIM_ITRx_SetConfig>
      break;
 8002d78:	e02e      	b.n	8002dd8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6818      	ldr	r0, [r3, #0]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	6859      	ldr	r1, [r3, #4]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	001a      	movs	r2, r3
 8002d88:	f000 f8fc 	bl	8002f84 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2160      	movs	r1, #96	; 0x60
 8002d92:	0018      	movs	r0, r3
 8002d94:	f000 f928 	bl	8002fe8 <TIM_ITRx_SetConfig>
      break;
 8002d98:	e01e      	b.n	8002dd8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	6859      	ldr	r1, [r3, #4]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	001a      	movs	r2, r3
 8002da8:	f000 f8be 	bl	8002f28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2140      	movs	r1, #64	; 0x40
 8002db2:	0018      	movs	r0, r3
 8002db4:	f000 f918 	bl	8002fe8 <TIM_ITRx_SetConfig>
      break;
 8002db8:	e00e      	b.n	8002dd8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	0019      	movs	r1, r3
 8002dc4:	0010      	movs	r0, r2
 8002dc6:	f000 f90f 	bl	8002fe8 <TIM_ITRx_SetConfig>
      break;
 8002dca:	e005      	b.n	8002dd8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002dcc:	230f      	movs	r3, #15
 8002dce:	18fb      	adds	r3, r7, r3
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	701a      	strb	r2, [r3, #0]
      break;
 8002dd4:	e000      	b.n	8002dd8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002dd6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	223d      	movs	r2, #61	; 0x3d
 8002ddc:	2101      	movs	r1, #1
 8002dde:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	223c      	movs	r2, #60	; 0x3c
 8002de4:	2100      	movs	r1, #0
 8002de6:	5499      	strb	r1, [r3, r2]

  return status;
 8002de8:	230f      	movs	r3, #15
 8002dea:	18fb      	adds	r3, r7, r3
 8002dec:	781b      	ldrb	r3, [r3, #0]
}
 8002dee:	0018      	movs	r0, r3
 8002df0:	46bd      	mov	sp, r7
 8002df2:	b004      	add	sp, #16
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	ffff00ff 	.word	0xffff00ff

08002dfc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e04:	46c0      	nop			; (mov r8, r8)
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b002      	add	sp, #8
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e14:	46c0      	nop			; (mov r8, r8)
 8002e16:	46bd      	mov	sp, r7
 8002e18:	b002      	add	sp, #8
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e24:	46c0      	nop			; (mov r8, r8)
 8002e26:	46bd      	mov	sp, r7
 8002e28:	b002      	add	sp, #8
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e34:	46c0      	nop			; (mov r8, r8)
 8002e36:	46bd      	mov	sp, r7
 8002e38:	b002      	add	sp, #8
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a2f      	ldr	r2, [pc, #188]	; (8002f0c <TIM_Base_SetConfig+0xd0>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d003      	beq.n	8002e5c <TIM_Base_SetConfig+0x20>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a2e      	ldr	r2, [pc, #184]	; (8002f10 <TIM_Base_SetConfig+0xd4>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d108      	bne.n	8002e6e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2270      	movs	r2, #112	; 0x70
 8002e60:	4393      	bics	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a26      	ldr	r2, [pc, #152]	; (8002f0c <TIM_Base_SetConfig+0xd0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d013      	beq.n	8002e9e <TIM_Base_SetConfig+0x62>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a25      	ldr	r2, [pc, #148]	; (8002f10 <TIM_Base_SetConfig+0xd4>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d00f      	beq.n	8002e9e <TIM_Base_SetConfig+0x62>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a24      	ldr	r2, [pc, #144]	; (8002f14 <TIM_Base_SetConfig+0xd8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d00b      	beq.n	8002e9e <TIM_Base_SetConfig+0x62>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a23      	ldr	r2, [pc, #140]	; (8002f18 <TIM_Base_SetConfig+0xdc>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d007      	beq.n	8002e9e <TIM_Base_SetConfig+0x62>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a22      	ldr	r2, [pc, #136]	; (8002f1c <TIM_Base_SetConfig+0xe0>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d003      	beq.n	8002e9e <TIM_Base_SetConfig+0x62>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a21      	ldr	r2, [pc, #132]	; (8002f20 <TIM_Base_SetConfig+0xe4>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d108      	bne.n	8002eb0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	4a20      	ldr	r2, [pc, #128]	; (8002f24 <TIM_Base_SetConfig+0xe8>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2280      	movs	r2, #128	; 0x80
 8002eb4:	4393      	bics	r3, r2
 8002eb6:	001a      	movs	r2, r3
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a0c      	ldr	r2, [pc, #48]	; (8002f0c <TIM_Base_SetConfig+0xd0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d00b      	beq.n	8002ef6 <TIM_Base_SetConfig+0xba>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a0d      	ldr	r2, [pc, #52]	; (8002f18 <TIM_Base_SetConfig+0xdc>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d007      	beq.n	8002ef6 <TIM_Base_SetConfig+0xba>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a0c      	ldr	r2, [pc, #48]	; (8002f1c <TIM_Base_SetConfig+0xe0>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d003      	beq.n	8002ef6 <TIM_Base_SetConfig+0xba>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a0b      	ldr	r2, [pc, #44]	; (8002f20 <TIM_Base_SetConfig+0xe4>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d103      	bne.n	8002efe <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	691a      	ldr	r2, [r3, #16]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	615a      	str	r2, [r3, #20]
}
 8002f04:	46c0      	nop			; (mov r8, r8)
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b004      	add	sp, #16
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40012c00 	.word	0x40012c00
 8002f10:	40000400 	.word	0x40000400
 8002f14:	40002000 	.word	0x40002000
 8002f18:	40014000 	.word	0x40014000
 8002f1c:	40014400 	.word	0x40014400
 8002f20:	40014800 	.word	0x40014800
 8002f24:	fffffcff 	.word	0xfffffcff

08002f28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	4393      	bics	r3, r2
 8002f42:	001a      	movs	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	22f0      	movs	r2, #240	; 0xf0
 8002f52:	4393      	bics	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	011b      	lsls	r3, r3, #4
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	220a      	movs	r2, #10
 8002f64:	4393      	bics	r3, r2
 8002f66:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	621a      	str	r2, [r3, #32]
}
 8002f7c:	46c0      	nop			; (mov r8, r8)
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	b006      	add	sp, #24
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	2210      	movs	r2, #16
 8002f96:	4393      	bics	r3, r2
 8002f98:	001a      	movs	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	4a0d      	ldr	r2, [pc, #52]	; (8002fe4 <TIM_TI2_ConfigInputStage+0x60>)
 8002fae:	4013      	ands	r3, r2
 8002fb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	031b      	lsls	r3, r3, #12
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	22a0      	movs	r2, #160	; 0xa0
 8002fc0:	4393      	bics	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	621a      	str	r2, [r3, #32]
}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b006      	add	sp, #24
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	ffff0fff 	.word	0xffff0fff

08002fe8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2270      	movs	r2, #112	; 0x70
 8002ffc:	4393      	bics	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4313      	orrs	r3, r2
 8003006:	2207      	movs	r2, #7
 8003008:	4313      	orrs	r3, r2
 800300a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	609a      	str	r2, [r3, #8]
}
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	46bd      	mov	sp, r7
 8003016:	b004      	add	sp, #16
 8003018:	bd80      	pop	{r7, pc}
	...

0800301c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
 8003028:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	4a09      	ldr	r2, [pc, #36]	; (8003058 <TIM_ETR_SetConfig+0x3c>)
 8003034:	4013      	ands	r3, r2
 8003036:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	021a      	lsls	r2, r3, #8
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	431a      	orrs	r2, r3
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	4313      	orrs	r3, r2
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	4313      	orrs	r3, r2
 8003048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	609a      	str	r2, [r3, #8]
}
 8003050:	46c0      	nop			; (mov r8, r8)
 8003052:	46bd      	mov	sp, r7
 8003054:	b006      	add	sp, #24
 8003056:	bd80      	pop	{r7, pc}
 8003058:	ffff00ff 	.word	0xffff00ff

0800305c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	223c      	movs	r2, #60	; 0x3c
 800306a:	5c9b      	ldrb	r3, [r3, r2]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003070:	2302      	movs	r3, #2
 8003072:	e041      	b.n	80030f8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	223c      	movs	r2, #60	; 0x3c
 8003078:	2101      	movs	r1, #1
 800307a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	223d      	movs	r2, #61	; 0x3d
 8003080:	2102      	movs	r1, #2
 8003082:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2270      	movs	r2, #112	; 0x70
 8003098:	4393      	bics	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a13      	ldr	r2, [pc, #76]	; (8003100 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d009      	beq.n	80030cc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a11      	ldr	r2, [pc, #68]	; (8003104 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d004      	beq.n	80030cc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a10      	ldr	r2, [pc, #64]	; (8003108 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d10c      	bne.n	80030e6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2280      	movs	r2, #128	; 0x80
 80030d0:	4393      	bics	r3, r2
 80030d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	4313      	orrs	r3, r2
 80030dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	223d      	movs	r2, #61	; 0x3d
 80030ea:	2101      	movs	r1, #1
 80030ec:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	223c      	movs	r2, #60	; 0x3c
 80030f2:	2100      	movs	r1, #0
 80030f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	0018      	movs	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	b004      	add	sp, #16
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40012c00 	.word	0x40012c00
 8003104:	40000400 	.word	0x40000400
 8003108:	40014000 	.word	0x40014000

0800310c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003114:	46c0      	nop			; (mov r8, r8)
 8003116:	46bd      	mov	sp, r7
 8003118:	b002      	add	sp, #8
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003124:	46c0      	nop			; (mov r8, r8)
 8003126:	46bd      	mov	sp, r7
 8003128:	b002      	add	sp, #8
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e044      	b.n	80031c8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003142:	2b00      	cmp	r3, #0
 8003144:	d107      	bne.n	8003156 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2278      	movs	r2, #120	; 0x78
 800314a:	2100      	movs	r1, #0
 800314c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	0018      	movs	r0, r3
 8003152:	f7fd fd0f 	bl	8000b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2224      	movs	r2, #36	; 0x24
 800315a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2101      	movs	r1, #1
 8003168:	438a      	bics	r2, r1
 800316a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	0018      	movs	r0, r3
 8003170:	f000 fa00 	bl	8003574 <UART_SetConfig>
 8003174:	0003      	movs	r3, r0
 8003176:	2b01      	cmp	r3, #1
 8003178:	d101      	bne.n	800317e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e024      	b.n	80031c8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	0018      	movs	r0, r3
 800318a:	f000 fb33 	bl	80037f4 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	490d      	ldr	r1, [pc, #52]	; (80031d0 <HAL_UART_Init+0xa4>)
 800319a:	400a      	ands	r2, r1
 800319c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2108      	movs	r1, #8
 80031aa:	438a      	bics	r2, r1
 80031ac:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2101      	movs	r1, #1
 80031ba:	430a      	orrs	r2, r1
 80031bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	0018      	movs	r0, r3
 80031c2:	f000 fbcb 	bl	800395c <UART_CheckIdleState>
 80031c6:	0003      	movs	r3, r0
}
 80031c8:	0018      	movs	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	b002      	add	sp, #8
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	fffff7ff 	.word	0xfffff7ff

080031d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08a      	sub	sp, #40	; 0x28
 80031d8:	af02      	add	r7, sp, #8
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	603b      	str	r3, [r7, #0]
 80031e0:	1dbb      	adds	r3, r7, #6
 80031e2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031e8:	2b20      	cmp	r3, #32
 80031ea:	d000      	beq.n	80031ee <HAL_UART_Transmit+0x1a>
 80031ec:	e08d      	b.n	800330a <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_UART_Transmit+0x28>
 80031f4:	1dbb      	adds	r3, r7, #6
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e085      	b.n	800330c <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	2380      	movs	r3, #128	; 0x80
 8003206:	015b      	lsls	r3, r3, #5
 8003208:	429a      	cmp	r2, r3
 800320a:	d109      	bne.n	8003220 <HAL_UART_Transmit+0x4c>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d105      	bne.n	8003220 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2201      	movs	r2, #1
 8003218:	4013      	ands	r3, r2
 800321a:	d001      	beq.n	8003220 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e075      	b.n	800330c <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2284      	movs	r2, #132	; 0x84
 8003224:	2100      	movs	r1, #0
 8003226:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2221      	movs	r2, #33	; 0x21
 800322c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800322e:	f7fd fdd3 	bl	8000dd8 <HAL_GetTick>
 8003232:	0003      	movs	r3, r0
 8003234:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	1dba      	adds	r2, r7, #6
 800323a:	2150      	movs	r1, #80	; 0x50
 800323c:	8812      	ldrh	r2, [r2, #0]
 800323e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	1dba      	adds	r2, r7, #6
 8003244:	2152      	movs	r1, #82	; 0x52
 8003246:	8812      	ldrh	r2, [r2, #0]
 8003248:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	2380      	movs	r3, #128	; 0x80
 8003250:	015b      	lsls	r3, r3, #5
 8003252:	429a      	cmp	r2, r3
 8003254:	d108      	bne.n	8003268 <HAL_UART_Transmit+0x94>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d104      	bne.n	8003268 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800325e:	2300      	movs	r3, #0
 8003260:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	61bb      	str	r3, [r7, #24]
 8003266:	e003      	b.n	8003270 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800326c:	2300      	movs	r3, #0
 800326e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003270:	e030      	b.n	80032d4 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	0013      	movs	r3, r2
 800327c:	2200      	movs	r2, #0
 800327e:	2180      	movs	r1, #128	; 0x80
 8003280:	f000 fc14 	bl	8003aac <UART_WaitOnFlagUntilTimeout>
 8003284:	1e03      	subs	r3, r0, #0
 8003286:	d004      	beq.n	8003292 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2220      	movs	r2, #32
 800328c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e03c      	b.n	800330c <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10b      	bne.n	80032b0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	881a      	ldrh	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	05d2      	lsls	r2, r2, #23
 80032a2:	0dd2      	lsrs	r2, r2, #23
 80032a4:	b292      	uxth	r2, r2
 80032a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	3302      	adds	r3, #2
 80032ac:	61bb      	str	r3, [r7, #24]
 80032ae:	e008      	b.n	80032c2 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	781a      	ldrb	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	b292      	uxth	r2, r2
 80032ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	3301      	adds	r3, #1
 80032c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2252      	movs	r2, #82	; 0x52
 80032c6:	5a9b      	ldrh	r3, [r3, r2]
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b299      	uxth	r1, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2252      	movs	r2, #82	; 0x52
 80032d2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2252      	movs	r2, #82	; 0x52
 80032d8:	5a9b      	ldrh	r3, [r3, r2]
 80032da:	b29b      	uxth	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1c8      	bne.n	8003272 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	0013      	movs	r3, r2
 80032ea:	2200      	movs	r2, #0
 80032ec:	2140      	movs	r1, #64	; 0x40
 80032ee:	f000 fbdd 	bl	8003aac <UART_WaitOnFlagUntilTimeout>
 80032f2:	1e03      	subs	r3, r0, #0
 80032f4:	d004      	beq.n	8003300 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2220      	movs	r2, #32
 80032fa:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e005      	b.n	800330c <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2220      	movs	r2, #32
 8003304:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003306:	2300      	movs	r3, #0
 8003308:	e000      	b.n	800330c <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800330a:	2302      	movs	r3, #2
  }
}
 800330c:	0018      	movs	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	b008      	add	sp, #32
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b088      	sub	sp, #32
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	1dbb      	adds	r3, r7, #6
 8003320:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003326:	2b20      	cmp	r3, #32
 8003328:	d000      	beq.n	800332c <HAL_UART_Transmit_DMA+0x18>
 800332a:	e077      	b.n	800341c <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_UART_Transmit_DMA+0x26>
 8003332:	1dbb      	adds	r3, r7, #6
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e06f      	b.n	800341e <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	2380      	movs	r3, #128	; 0x80
 8003344:	015b      	lsls	r3, r3, #5
 8003346:	429a      	cmp	r2, r3
 8003348:	d109      	bne.n	800335e <HAL_UART_Transmit_DMA+0x4a>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d105      	bne.n	800335e <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2201      	movs	r2, #1
 8003356:	4013      	ands	r3, r2
 8003358:	d001      	beq.n	800335e <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e05f      	b.n	800341e <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	1dba      	adds	r2, r7, #6
 8003368:	2150      	movs	r1, #80	; 0x50
 800336a:	8812      	ldrh	r2, [r2, #0]
 800336c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	1dba      	adds	r2, r7, #6
 8003372:	2152      	movs	r1, #82	; 0x52
 8003374:	8812      	ldrh	r2, [r2, #0]
 8003376:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2284      	movs	r2, #132	; 0x84
 800337c:	2100      	movs	r1, #0
 800337e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2221      	movs	r2, #33	; 0x21
 8003384:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338a:	2b00      	cmp	r3, #0
 800338c:	d027      	beq.n	80033de <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003392:	4a25      	ldr	r2, [pc, #148]	; (8003428 <HAL_UART_Transmit_DMA+0x114>)
 8003394:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339a:	4a24      	ldr	r2, [pc, #144]	; (800342c <HAL_UART_Transmit_DMA+0x118>)
 800339c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a2:	4a23      	ldr	r2, [pc, #140]	; (8003430 <HAL_UART_Transmit_DMA+0x11c>)
 80033a4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033aa:	2200      	movs	r2, #0
 80033ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b6:	0019      	movs	r1, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3328      	adds	r3, #40	; 0x28
 80033be:	001a      	movs	r2, r3
 80033c0:	1dbb      	adds	r3, r7, #6
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	f7fd fe38 	bl	8001038 <HAL_DMA_Start_IT>
 80033c8:	1e03      	subs	r3, r0, #0
 80033ca:	d008      	beq.n	80033de <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2284      	movs	r2, #132	; 0x84
 80033d0:	2110      	movs	r1, #16
 80033d2:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2220      	movs	r2, #32
 80033d8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e01f      	b.n	800341e <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2240      	movs	r2, #64	; 0x40
 80033e4:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033e6:	f3ef 8310 	mrs	r3, PRIMASK
 80033ea:	613b      	str	r3, [r7, #16]
  return(result);
 80033ec:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80033ee:	61fb      	str	r3, [r7, #28]
 80033f0:	2301      	movs	r3, #1
 80033f2:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f383 8810 	msr	PRIMASK, r3
}
 80033fa:	46c0      	nop			; (mov r8, r8)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2180      	movs	r1, #128	; 0x80
 8003408:	430a      	orrs	r2, r1
 800340a:	609a      	str	r2, [r3, #8]
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	f383 8810 	msr	PRIMASK, r3
}
 8003416:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8003418:	2300      	movs	r3, #0
 800341a:	e000      	b.n	800341e <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800341c:	2302      	movs	r3, #2
  }
}
 800341e:	0018      	movs	r0, r3
 8003420:	46bd      	mov	sp, r7
 8003422:	b008      	add	sp, #32
 8003424:	bd80      	pop	{r7, pc}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	08003c91 	.word	0x08003c91
 800342c:	08003d25 	.word	0x08003d25
 8003430:	08003d43 	.word	0x08003d43

08003434 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b08c      	sub	sp, #48	; 0x30
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003440:	62fb      	str	r3, [r7, #44]	; 0x2c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2280      	movs	r2, #128	; 0x80
 8003446:	589b      	ldr	r3, [r3, r2]
 8003448:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2280      	movs	r2, #128	; 0x80
 8003452:	4013      	ands	r3, r2
 8003454:	2b80      	cmp	r3, #128	; 0x80
 8003456:	d138      	bne.n	80034ca <HAL_UART_DMAStop+0x96>
 8003458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345a:	2b21      	cmp	r3, #33	; 0x21
 800345c:	d135      	bne.n	80034ca <HAL_UART_DMAStop+0x96>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800345e:	f3ef 8310 	mrs	r3, PRIMASK
 8003462:	617b      	str	r3, [r7, #20]
  return(result);
 8003464:	697b      	ldr	r3, [r7, #20]
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003466:	627b      	str	r3, [r7, #36]	; 0x24
 8003468:	2301      	movs	r3, #1
 800346a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	f383 8810 	msr	PRIMASK, r3
}
 8003472:	46c0      	nop			; (mov r8, r8)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2180      	movs	r1, #128	; 0x80
 8003480:	438a      	bics	r2, r1
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f383 8810 	msr	PRIMASK, r3
}
 800348e:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003494:	2b00      	cmp	r3, #0
 8003496:	d014      	beq.n	80034c2 <HAL_UART_DMAStop+0x8e>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349c:	0018      	movs	r0, r3
 800349e:	f7fd fe31 	bl	8001104 <HAL_DMA_Abort>
 80034a2:	1e03      	subs	r3, r0, #0
 80034a4:	d00d      	beq.n	80034c2 <HAL_UART_DMAStop+0x8e>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034aa:	0018      	movs	r0, r3
 80034ac:	f7fd ff04 	bl	80012b8 <HAL_DMA_GetError>
 80034b0:	0003      	movs	r3, r0
 80034b2:	2b20      	cmp	r3, #32
 80034b4:	d105      	bne.n	80034c2 <HAL_UART_DMAStop+0x8e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2284      	movs	r2, #132	; 0x84
 80034ba:	2110      	movs	r1, #16
 80034bc:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e044      	b.n	800354c <HAL_UART_DMAStop+0x118>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	0018      	movs	r0, r3
 80034c6:	f000 fb5a 	bl	8003b7e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	2240      	movs	r2, #64	; 0x40
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b40      	cmp	r3, #64	; 0x40
 80034d6:	d138      	bne.n	800354a <HAL_UART_DMAStop+0x116>
 80034d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034da:	2b22      	cmp	r3, #34	; 0x22
 80034dc:	d135      	bne.n	800354a <HAL_UART_DMAStop+0x116>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034de:	f3ef 8310 	mrs	r3, PRIMASK
 80034e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80034e4:	68bb      	ldr	r3, [r7, #8]
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034e6:	623b      	str	r3, [r7, #32]
 80034e8:	2301      	movs	r3, #1
 80034ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f383 8810 	msr	PRIMASK, r3
}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2140      	movs	r1, #64	; 0x40
 8003500:	438a      	bics	r2, r1
 8003502:	609a      	str	r2, [r3, #8]
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	f383 8810 	msr	PRIMASK, r3
}
 800350e:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003514:	2b00      	cmp	r3, #0
 8003516:	d014      	beq.n	8003542 <HAL_UART_DMAStop+0x10e>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800351c:	0018      	movs	r0, r3
 800351e:	f7fd fdf1 	bl	8001104 <HAL_DMA_Abort>
 8003522:	1e03      	subs	r3, r0, #0
 8003524:	d00d      	beq.n	8003542 <HAL_UART_DMAStop+0x10e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800352a:	0018      	movs	r0, r3
 800352c:	f7fd fec4 	bl	80012b8 <HAL_DMA_GetError>
 8003530:	0003      	movs	r3, r0
 8003532:	2b20      	cmp	r3, #32
 8003534:	d105      	bne.n	8003542 <HAL_UART_DMAStop+0x10e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2284      	movs	r2, #132	; 0x84
 800353a:	2110      	movs	r1, #16
 800353c:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e004      	b.n	800354c <HAL_UART_DMAStop+0x118>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	0018      	movs	r0, r3
 8003546:	f000 fb3f 	bl	8003bc8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	0018      	movs	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	b00c      	add	sp, #48	; 0x30
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800355c:	46c0      	nop			; (mov r8, r8)
 800355e:	46bd      	mov	sp, r7
 8003560:	b002      	add	sp, #8
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800356c:	46c0      	nop			; (mov r8, r8)
 800356e:	46bd      	mov	sp, r7
 8003570:	b002      	add	sp, #8
 8003572:	bd80      	pop	{r7, pc}

08003574 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800357c:	231e      	movs	r3, #30
 800357e:	18fb      	adds	r3, r7, r3
 8003580:	2200      	movs	r2, #0
 8003582:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	431a      	orrs	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	4313      	orrs	r3, r2
 800359a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a8d      	ldr	r2, [pc, #564]	; (80037d8 <UART_SetConfig+0x264>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	0019      	movs	r1, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	4a88      	ldr	r2, [pc, #544]	; (80037dc <UART_SetConfig+0x268>)
 80035ba:	4013      	ands	r3, r2
 80035bc:	0019      	movs	r1, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	4a7f      	ldr	r2, [pc, #508]	; (80037e0 <UART_SetConfig+0x26c>)
 80035e2:	4013      	ands	r3, r2
 80035e4:	0019      	movs	r1, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a7b      	ldr	r2, [pc, #492]	; (80037e4 <UART_SetConfig+0x270>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d127      	bne.n	800364a <UART_SetConfig+0xd6>
 80035fa:	4b7b      	ldr	r3, [pc, #492]	; (80037e8 <UART_SetConfig+0x274>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	2203      	movs	r2, #3
 8003600:	4013      	ands	r3, r2
 8003602:	2b03      	cmp	r3, #3
 8003604:	d00d      	beq.n	8003622 <UART_SetConfig+0xae>
 8003606:	d81b      	bhi.n	8003640 <UART_SetConfig+0xcc>
 8003608:	2b02      	cmp	r3, #2
 800360a:	d014      	beq.n	8003636 <UART_SetConfig+0xc2>
 800360c:	d818      	bhi.n	8003640 <UART_SetConfig+0xcc>
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <UART_SetConfig+0xa4>
 8003612:	2b01      	cmp	r3, #1
 8003614:	d00a      	beq.n	800362c <UART_SetConfig+0xb8>
 8003616:	e013      	b.n	8003640 <UART_SetConfig+0xcc>
 8003618:	231f      	movs	r3, #31
 800361a:	18fb      	adds	r3, r7, r3
 800361c:	2200      	movs	r2, #0
 800361e:	701a      	strb	r2, [r3, #0]
 8003620:	e021      	b.n	8003666 <UART_SetConfig+0xf2>
 8003622:	231f      	movs	r3, #31
 8003624:	18fb      	adds	r3, r7, r3
 8003626:	2202      	movs	r2, #2
 8003628:	701a      	strb	r2, [r3, #0]
 800362a:	e01c      	b.n	8003666 <UART_SetConfig+0xf2>
 800362c:	231f      	movs	r3, #31
 800362e:	18fb      	adds	r3, r7, r3
 8003630:	2204      	movs	r2, #4
 8003632:	701a      	strb	r2, [r3, #0]
 8003634:	e017      	b.n	8003666 <UART_SetConfig+0xf2>
 8003636:	231f      	movs	r3, #31
 8003638:	18fb      	adds	r3, r7, r3
 800363a:	2208      	movs	r2, #8
 800363c:	701a      	strb	r2, [r3, #0]
 800363e:	e012      	b.n	8003666 <UART_SetConfig+0xf2>
 8003640:	231f      	movs	r3, #31
 8003642:	18fb      	adds	r3, r7, r3
 8003644:	2210      	movs	r2, #16
 8003646:	701a      	strb	r2, [r3, #0]
 8003648:	e00d      	b.n	8003666 <UART_SetConfig+0xf2>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a67      	ldr	r2, [pc, #412]	; (80037ec <UART_SetConfig+0x278>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d104      	bne.n	800365e <UART_SetConfig+0xea>
 8003654:	231f      	movs	r3, #31
 8003656:	18fb      	adds	r3, r7, r3
 8003658:	2200      	movs	r2, #0
 800365a:	701a      	strb	r2, [r3, #0]
 800365c:	e003      	b.n	8003666 <UART_SetConfig+0xf2>
 800365e:	231f      	movs	r3, #31
 8003660:	18fb      	adds	r3, r7, r3
 8003662:	2210      	movs	r2, #16
 8003664:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	69da      	ldr	r2, [r3, #28]
 800366a:	2380      	movs	r3, #128	; 0x80
 800366c:	021b      	lsls	r3, r3, #8
 800366e:	429a      	cmp	r2, r3
 8003670:	d15c      	bne.n	800372c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8003672:	231f      	movs	r3, #31
 8003674:	18fb      	adds	r3, r7, r3
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b08      	cmp	r3, #8
 800367a:	d015      	beq.n	80036a8 <UART_SetConfig+0x134>
 800367c:	dc18      	bgt.n	80036b0 <UART_SetConfig+0x13c>
 800367e:	2b04      	cmp	r3, #4
 8003680:	d00d      	beq.n	800369e <UART_SetConfig+0x12a>
 8003682:	dc15      	bgt.n	80036b0 <UART_SetConfig+0x13c>
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <UART_SetConfig+0x11a>
 8003688:	2b02      	cmp	r3, #2
 800368a:	d005      	beq.n	8003698 <UART_SetConfig+0x124>
 800368c:	e010      	b.n	80036b0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800368e:	f7fe fc3b 	bl	8001f08 <HAL_RCC_GetPCLK1Freq>
 8003692:	0003      	movs	r3, r0
 8003694:	61bb      	str	r3, [r7, #24]
        break;
 8003696:	e012      	b.n	80036be <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003698:	4b55      	ldr	r3, [pc, #340]	; (80037f0 <UART_SetConfig+0x27c>)
 800369a:	61bb      	str	r3, [r7, #24]
        break;
 800369c:	e00f      	b.n	80036be <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800369e:	f7fe fbd3 	bl	8001e48 <HAL_RCC_GetSysClockFreq>
 80036a2:	0003      	movs	r3, r0
 80036a4:	61bb      	str	r3, [r7, #24]
        break;
 80036a6:	e00a      	b.n	80036be <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036a8:	2380      	movs	r3, #128	; 0x80
 80036aa:	021b      	lsls	r3, r3, #8
 80036ac:	61bb      	str	r3, [r7, #24]
        break;
 80036ae:	e006      	b.n	80036be <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036b4:	231e      	movs	r3, #30
 80036b6:	18fb      	adds	r3, r7, r3
 80036b8:	2201      	movs	r2, #1
 80036ba:	701a      	strb	r2, [r3, #0]
        break;
 80036bc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d100      	bne.n	80036c6 <UART_SetConfig+0x152>
 80036c4:	e07a      	b.n	80037bc <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	005a      	lsls	r2, r3, #1
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	085b      	lsrs	r3, r3, #1
 80036d0:	18d2      	adds	r2, r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	0019      	movs	r1, r3
 80036d8:	0010      	movs	r0, r2
 80036da:	f7fc fd15 	bl	8000108 <__udivsi3>
 80036de:	0003      	movs	r3, r0
 80036e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	2b0f      	cmp	r3, #15
 80036e6:	d91c      	bls.n	8003722 <UART_SetConfig+0x1ae>
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	2380      	movs	r3, #128	; 0x80
 80036ec:	025b      	lsls	r3, r3, #9
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d217      	bcs.n	8003722 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	200e      	movs	r0, #14
 80036f8:	183b      	adds	r3, r7, r0
 80036fa:	210f      	movs	r1, #15
 80036fc:	438a      	bics	r2, r1
 80036fe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	085b      	lsrs	r3, r3, #1
 8003704:	b29b      	uxth	r3, r3
 8003706:	2207      	movs	r2, #7
 8003708:	4013      	ands	r3, r2
 800370a:	b299      	uxth	r1, r3
 800370c:	183b      	adds	r3, r7, r0
 800370e:	183a      	adds	r2, r7, r0
 8003710:	8812      	ldrh	r2, [r2, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	183a      	adds	r2, r7, r0
 800371c:	8812      	ldrh	r2, [r2, #0]
 800371e:	60da      	str	r2, [r3, #12]
 8003720:	e04c      	b.n	80037bc <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003722:	231e      	movs	r3, #30
 8003724:	18fb      	adds	r3, r7, r3
 8003726:	2201      	movs	r2, #1
 8003728:	701a      	strb	r2, [r3, #0]
 800372a:	e047      	b.n	80037bc <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 800372c:	231f      	movs	r3, #31
 800372e:	18fb      	adds	r3, r7, r3
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	2b08      	cmp	r3, #8
 8003734:	d015      	beq.n	8003762 <UART_SetConfig+0x1ee>
 8003736:	dc18      	bgt.n	800376a <UART_SetConfig+0x1f6>
 8003738:	2b04      	cmp	r3, #4
 800373a:	d00d      	beq.n	8003758 <UART_SetConfig+0x1e4>
 800373c:	dc15      	bgt.n	800376a <UART_SetConfig+0x1f6>
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <UART_SetConfig+0x1d4>
 8003742:	2b02      	cmp	r3, #2
 8003744:	d005      	beq.n	8003752 <UART_SetConfig+0x1de>
 8003746:	e010      	b.n	800376a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003748:	f7fe fbde 	bl	8001f08 <HAL_RCC_GetPCLK1Freq>
 800374c:	0003      	movs	r3, r0
 800374e:	61bb      	str	r3, [r7, #24]
        break;
 8003750:	e012      	b.n	8003778 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003752:	4b27      	ldr	r3, [pc, #156]	; (80037f0 <UART_SetConfig+0x27c>)
 8003754:	61bb      	str	r3, [r7, #24]
        break;
 8003756:	e00f      	b.n	8003778 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003758:	f7fe fb76 	bl	8001e48 <HAL_RCC_GetSysClockFreq>
 800375c:	0003      	movs	r3, r0
 800375e:	61bb      	str	r3, [r7, #24]
        break;
 8003760:	e00a      	b.n	8003778 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003762:	2380      	movs	r3, #128	; 0x80
 8003764:	021b      	lsls	r3, r3, #8
 8003766:	61bb      	str	r3, [r7, #24]
        break;
 8003768:	e006      	b.n	8003778 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800376a:	2300      	movs	r3, #0
 800376c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800376e:	231e      	movs	r3, #30
 8003770:	18fb      	adds	r3, r7, r3
 8003772:	2201      	movs	r2, #1
 8003774:	701a      	strb	r2, [r3, #0]
        break;
 8003776:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d01e      	beq.n	80037bc <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	085a      	lsrs	r2, r3, #1
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	18d2      	adds	r2, r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	0019      	movs	r1, r3
 800378e:	0010      	movs	r0, r2
 8003790:	f7fc fcba 	bl	8000108 <__udivsi3>
 8003794:	0003      	movs	r3, r0
 8003796:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	2b0f      	cmp	r3, #15
 800379c:	d90a      	bls.n	80037b4 <UART_SetConfig+0x240>
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	2380      	movs	r3, #128	; 0x80
 80037a2:	025b      	lsls	r3, r3, #9
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d205      	bcs.n	80037b4 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	60da      	str	r2, [r3, #12]
 80037b2:	e003      	b.n	80037bc <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80037b4:	231e      	movs	r3, #30
 80037b6:	18fb      	adds	r3, r7, r3
 80037b8:	2201      	movs	r2, #1
 80037ba:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80037c8:	231e      	movs	r3, #30
 80037ca:	18fb      	adds	r3, r7, r3
 80037cc:	781b      	ldrb	r3, [r3, #0]
}
 80037ce:	0018      	movs	r0, r3
 80037d0:	46bd      	mov	sp, r7
 80037d2:	b008      	add	sp, #32
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	ffff69f3 	.word	0xffff69f3
 80037dc:	ffffcfff 	.word	0xffffcfff
 80037e0:	fffff4ff 	.word	0xfffff4ff
 80037e4:	40013800 	.word	0x40013800
 80037e8:	40021000 	.word	0x40021000
 80037ec:	40004400 	.word	0x40004400
 80037f0:	007a1200 	.word	0x007a1200

080037f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	2201      	movs	r2, #1
 8003802:	4013      	ands	r3, r2
 8003804:	d00b      	beq.n	800381e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	4a4a      	ldr	r2, [pc, #296]	; (8003938 <UART_AdvFeatureConfig+0x144>)
 800380e:	4013      	ands	r3, r2
 8003810:	0019      	movs	r1, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	2202      	movs	r2, #2
 8003824:	4013      	ands	r3, r2
 8003826:	d00b      	beq.n	8003840 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	4a43      	ldr	r2, [pc, #268]	; (800393c <UART_AdvFeatureConfig+0x148>)
 8003830:	4013      	ands	r3, r2
 8003832:	0019      	movs	r1, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	2204      	movs	r2, #4
 8003846:	4013      	ands	r3, r2
 8003848:	d00b      	beq.n	8003862 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	4a3b      	ldr	r2, [pc, #236]	; (8003940 <UART_AdvFeatureConfig+0x14c>)
 8003852:	4013      	ands	r3, r2
 8003854:	0019      	movs	r1, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	2208      	movs	r2, #8
 8003868:	4013      	ands	r3, r2
 800386a:	d00b      	beq.n	8003884 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	4a34      	ldr	r2, [pc, #208]	; (8003944 <UART_AdvFeatureConfig+0x150>)
 8003874:	4013      	ands	r3, r2
 8003876:	0019      	movs	r1, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	2210      	movs	r2, #16
 800388a:	4013      	ands	r3, r2
 800388c:	d00b      	beq.n	80038a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	4a2c      	ldr	r2, [pc, #176]	; (8003948 <UART_AdvFeatureConfig+0x154>)
 8003896:	4013      	ands	r3, r2
 8003898:	0019      	movs	r1, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	2220      	movs	r2, #32
 80038ac:	4013      	ands	r3, r2
 80038ae:	d00b      	beq.n	80038c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	4a25      	ldr	r2, [pc, #148]	; (800394c <UART_AdvFeatureConfig+0x158>)
 80038b8:	4013      	ands	r3, r2
 80038ba:	0019      	movs	r1, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	2240      	movs	r2, #64	; 0x40
 80038ce:	4013      	ands	r3, r2
 80038d0:	d01d      	beq.n	800390e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	4a1d      	ldr	r2, [pc, #116]	; (8003950 <UART_AdvFeatureConfig+0x15c>)
 80038da:	4013      	ands	r3, r2
 80038dc:	0019      	movs	r1, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038ee:	2380      	movs	r3, #128	; 0x80
 80038f0:	035b      	lsls	r3, r3, #13
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d10b      	bne.n	800390e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	4a15      	ldr	r2, [pc, #84]	; (8003954 <UART_AdvFeatureConfig+0x160>)
 80038fe:	4013      	ands	r3, r2
 8003900:	0019      	movs	r1, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	2280      	movs	r2, #128	; 0x80
 8003914:	4013      	ands	r3, r2
 8003916:	d00b      	beq.n	8003930 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	4a0e      	ldr	r2, [pc, #56]	; (8003958 <UART_AdvFeatureConfig+0x164>)
 8003920:	4013      	ands	r3, r2
 8003922:	0019      	movs	r1, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	605a      	str	r2, [r3, #4]
  }
}
 8003930:	46c0      	nop			; (mov r8, r8)
 8003932:	46bd      	mov	sp, r7
 8003934:	b002      	add	sp, #8
 8003936:	bd80      	pop	{r7, pc}
 8003938:	fffdffff 	.word	0xfffdffff
 800393c:	fffeffff 	.word	0xfffeffff
 8003940:	fffbffff 	.word	0xfffbffff
 8003944:	ffff7fff 	.word	0xffff7fff
 8003948:	ffffefff 	.word	0xffffefff
 800394c:	ffffdfff 	.word	0xffffdfff
 8003950:	ffefffff 	.word	0xffefffff
 8003954:	ff9fffff 	.word	0xff9fffff
 8003958:	fff7ffff 	.word	0xfff7ffff

0800395c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b092      	sub	sp, #72	; 0x48
 8003960:	af02      	add	r7, sp, #8
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2284      	movs	r2, #132	; 0x84
 8003968:	2100      	movs	r1, #0
 800396a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800396c:	f7fd fa34 	bl	8000dd8 <HAL_GetTick>
 8003970:	0003      	movs	r3, r0
 8003972:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2208      	movs	r2, #8
 800397c:	4013      	ands	r3, r2
 800397e:	2b08      	cmp	r3, #8
 8003980:	d12c      	bne.n	80039dc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003984:	2280      	movs	r2, #128	; 0x80
 8003986:	0391      	lsls	r1, r2, #14
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	4a46      	ldr	r2, [pc, #280]	; (8003aa4 <UART_CheckIdleState+0x148>)
 800398c:	9200      	str	r2, [sp, #0]
 800398e:	2200      	movs	r2, #0
 8003990:	f000 f88c 	bl	8003aac <UART_WaitOnFlagUntilTimeout>
 8003994:	1e03      	subs	r3, r0, #0
 8003996:	d021      	beq.n	80039dc <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003998:	f3ef 8310 	mrs	r3, PRIMASK
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80039a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80039a2:	2301      	movs	r3, #1
 80039a4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a8:	f383 8810 	msr	PRIMASK, r3
}
 80039ac:	46c0      	nop			; (mov r8, r8)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2180      	movs	r1, #128	; 0x80
 80039ba:	438a      	bics	r2, r1
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c4:	f383 8810 	msr	PRIMASK, r3
}
 80039c8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2220      	movs	r2, #32
 80039ce:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2278      	movs	r2, #120	; 0x78
 80039d4:	2100      	movs	r1, #0
 80039d6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e05f      	b.n	8003a9c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2204      	movs	r2, #4
 80039e4:	4013      	ands	r3, r2
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d146      	bne.n	8003a78 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ec:	2280      	movs	r2, #128	; 0x80
 80039ee:	03d1      	lsls	r1, r2, #15
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	4a2c      	ldr	r2, [pc, #176]	; (8003aa4 <UART_CheckIdleState+0x148>)
 80039f4:	9200      	str	r2, [sp, #0]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f000 f858 	bl	8003aac <UART_WaitOnFlagUntilTimeout>
 80039fc:	1e03      	subs	r3, r0, #0
 80039fe:	d03b      	beq.n	8003a78 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a00:	f3ef 8310 	mrs	r3, PRIMASK
 8003a04:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a06:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a08:	637b      	str	r3, [r7, #52]	; 0x34
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f383 8810 	msr	PRIMASK, r3
}
 8003a14:	46c0      	nop			; (mov r8, r8)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4921      	ldr	r1, [pc, #132]	; (8003aa8 <UART_CheckIdleState+0x14c>)
 8003a22:	400a      	ands	r2, r1
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f383 8810 	msr	PRIMASK, r3
}
 8003a30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a32:	f3ef 8310 	mrs	r3, PRIMASK
 8003a36:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a38:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a3a:	633b      	str	r3, [r7, #48]	; 0x30
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f383 8810 	msr	PRIMASK, r3
}
 8003a46:	46c0      	nop			; (mov r8, r8)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2101      	movs	r1, #1
 8003a54:	438a      	bics	r2, r1
 8003a56:	609a      	str	r2, [r3, #8]
 8003a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
 8003a5e:	f383 8810 	msr	PRIMASK, r3
}
 8003a62:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2280      	movs	r2, #128	; 0x80
 8003a68:	2120      	movs	r1, #32
 8003a6a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2278      	movs	r2, #120	; 0x78
 8003a70:	2100      	movs	r1, #0
 8003a72:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e011      	b.n	8003a9c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2280      	movs	r2, #128	; 0x80
 8003a82:	2120      	movs	r1, #32
 8003a84:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2278      	movs	r2, #120	; 0x78
 8003a96:	2100      	movs	r1, #0
 8003a98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	b010      	add	sp, #64	; 0x40
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	01ffffff 	.word	0x01ffffff
 8003aa8:	fffffedf 	.word	0xfffffedf

08003aac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	603b      	str	r3, [r7, #0]
 8003ab8:	1dfb      	adds	r3, r7, #7
 8003aba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003abc:	e04b      	b.n	8003b56 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	d048      	beq.n	8003b56 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ac4:	f7fd f988 	bl	8000dd8 <HAL_GetTick>
 8003ac8:	0002      	movs	r2, r0
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d302      	bcc.n	8003ada <UART_WaitOnFlagUntilTimeout+0x2e>
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e04b      	b.n	8003b76 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2204      	movs	r2, #4
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	d035      	beq.n	8003b56 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	2208      	movs	r2, #8
 8003af2:	4013      	ands	r3, r2
 8003af4:	2b08      	cmp	r3, #8
 8003af6:	d111      	bne.n	8003b1c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2208      	movs	r2, #8
 8003afe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	0018      	movs	r0, r3
 8003b04:	f000 f860 	bl	8003bc8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2284      	movs	r2, #132	; 0x84
 8003b0c:	2108      	movs	r1, #8
 8003b0e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2278      	movs	r2, #120	; 0x78
 8003b14:	2100      	movs	r1, #0
 8003b16:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e02c      	b.n	8003b76 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	69da      	ldr	r2, [r3, #28]
 8003b22:	2380      	movs	r3, #128	; 0x80
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	401a      	ands	r2, r3
 8003b28:	2380      	movs	r3, #128	; 0x80
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d112      	bne.n	8003b56 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2280      	movs	r2, #128	; 0x80
 8003b36:	0112      	lsls	r2, r2, #4
 8003b38:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f000 f843 	bl	8003bc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2284      	movs	r2, #132	; 0x84
 8003b46:	2120      	movs	r1, #32
 8003b48:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2278      	movs	r2, #120	; 0x78
 8003b4e:	2100      	movs	r1, #0
 8003b50:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e00f      	b.n	8003b76 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	425a      	negs	r2, r3
 8003b66:	4153      	adcs	r3, r2
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	001a      	movs	r2, r3
 8003b6c:	1dfb      	adds	r3, r7, #7
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d0a4      	beq.n	8003abe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	0018      	movs	r0, r3
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	b004      	add	sp, #16
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b086      	sub	sp, #24
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b86:	f3ef 8310 	mrs	r3, PRIMASK
 8003b8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b8c:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	2301      	movs	r3, #1
 8003b92:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f383 8810 	msr	PRIMASK, r3
}
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	21c0      	movs	r1, #192	; 0xc0
 8003ba8:	438a      	bics	r2, r1
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f383 8810 	msr	PRIMASK, r3
}
 8003bb6:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8003bbe:	46c0      	nop			; (mov r8, r8)
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b006      	add	sp, #24
 8003bc4:	bd80      	pop	{r7, pc}
	...

08003bc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08e      	sub	sp, #56	; 0x38
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bd0:	f3ef 8310 	mrs	r3, PRIMASK
 8003bd4:	617b      	str	r3, [r7, #20]
  return(result);
 8003bd6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bd8:	637b      	str	r3, [r7, #52]	; 0x34
 8003bda:	2301      	movs	r3, #1
 8003bdc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	f383 8810 	msr	PRIMASK, r3
}
 8003be4:	46c0      	nop			; (mov r8, r8)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4926      	ldr	r1, [pc, #152]	; (8003c8c <UART_EndRxTransfer+0xc4>)
 8003bf2:	400a      	ands	r2, r1
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	f383 8810 	msr	PRIMASK, r3
}
 8003c00:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c02:	f3ef 8310 	mrs	r3, PRIMASK
 8003c06:	623b      	str	r3, [r7, #32]
  return(result);
 8003c08:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c0a:	633b      	str	r3, [r7, #48]	; 0x30
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	f383 8810 	msr	PRIMASK, r3
}
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689a      	ldr	r2, [r3, #8]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2101      	movs	r1, #1
 8003c24:	438a      	bics	r2, r1
 8003c26:	609a      	str	r2, [r3, #8]
 8003c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2e:	f383 8810 	msr	PRIMASK, r3
}
 8003c32:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d118      	bne.n	8003c6e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c3c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c40:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c42:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c46:	2301      	movs	r3, #1
 8003c48:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f383 8810 	msr	PRIMASK, r3
}
 8003c50:	46c0      	nop			; (mov r8, r8)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2110      	movs	r1, #16
 8003c5e:	438a      	bics	r2, r1
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	f383 8810 	msr	PRIMASK, r3
}
 8003c6c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2280      	movs	r2, #128	; 0x80
 8003c72:	2120      	movs	r1, #32
 8003c74:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	46bd      	mov	sp, r7
 8003c86:	b00e      	add	sp, #56	; 0x38
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	fffffedf 	.word	0xfffffedf

08003c90 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08c      	sub	sp, #48	; 0x30
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	2b20      	cmp	r3, #32
 8003ca4:	d035      	beq.n	8003d12 <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 8003ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca8:	2252      	movs	r2, #82	; 0x52
 8003caa:	2100      	movs	r1, #0
 8003cac:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cae:	f3ef 8310 	mrs	r3, PRIMASK
 8003cb2:	60fb      	str	r3, [r7, #12]
  return(result);
 8003cb4:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003cb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cb8:	2301      	movs	r3, #1
 8003cba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	f383 8810 	msr	PRIMASK, r3
}
 8003cc2:	46c0      	nop			; (mov r8, r8)
 8003cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2180      	movs	r1, #128	; 0x80
 8003cd0:	438a      	bics	r2, r1
 8003cd2:	609a      	str	r2, [r3, #8]
 8003cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	f383 8810 	msr	PRIMASK, r3
}
 8003cde:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ce0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ce4:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ce6:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cea:	2301      	movs	r3, #1
 8003cec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	f383 8810 	msr	PRIMASK, r3
}
 8003cf4:	46c0      	nop			; (mov r8, r8)
 8003cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2140      	movs	r1, #64	; 0x40
 8003d02:	430a      	orrs	r2, r1
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	f383 8810 	msr	PRIMASK, r3
}
 8003d10:	e004      	b.n	8003d1c <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8003d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d14:	0018      	movs	r0, r3
 8003d16:	f7fc fe13 	bl	8000940 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	46c0      	nop			; (mov r8, r8)
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	b00c      	add	sp, #48	; 0x30
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	0018      	movs	r0, r3
 8003d36:	f7ff fc0d 	bl	8003554 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	b004      	add	sp, #16
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b086      	sub	sp, #24
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d54:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2280      	movs	r2, #128	; 0x80
 8003d5a:	589b      	ldr	r3, [r3, r2]
 8003d5c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	2280      	movs	r2, #128	; 0x80
 8003d66:	4013      	ands	r3, r2
 8003d68:	2b80      	cmp	r3, #128	; 0x80
 8003d6a:	d10a      	bne.n	8003d82 <UART_DMAError+0x40>
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	2b21      	cmp	r3, #33	; 0x21
 8003d70:	d107      	bne.n	8003d82 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	2252      	movs	r2, #82	; 0x52
 8003d76:	2100      	movs	r1, #0
 8003d78:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	f7ff fefe 	bl	8003b7e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	2240      	movs	r2, #64	; 0x40
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	2b40      	cmp	r3, #64	; 0x40
 8003d8e:	d10a      	bne.n	8003da6 <UART_DMAError+0x64>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2b22      	cmp	r3, #34	; 0x22
 8003d94:	d107      	bne.n	8003da6 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	225a      	movs	r2, #90	; 0x5a
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	0018      	movs	r0, r3
 8003da2:	f7ff ff11 	bl	8003bc8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2284      	movs	r2, #132	; 0x84
 8003daa:	589b      	ldr	r3, [r3, r2]
 8003dac:	2210      	movs	r2, #16
 8003dae:	431a      	orrs	r2, r3
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	2184      	movs	r1, #132	; 0x84
 8003db4:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	0018      	movs	r0, r3
 8003dba:	f7ff fbd3 	bl	8003564 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	b006      	add	sp, #24
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <__libc_init_array>:
 8003dc8:	b570      	push	{r4, r5, r6, lr}
 8003dca:	2600      	movs	r6, #0
 8003dcc:	4d0c      	ldr	r5, [pc, #48]	; (8003e00 <__libc_init_array+0x38>)
 8003dce:	4c0d      	ldr	r4, [pc, #52]	; (8003e04 <__libc_init_array+0x3c>)
 8003dd0:	1b64      	subs	r4, r4, r5
 8003dd2:	10a4      	asrs	r4, r4, #2
 8003dd4:	42a6      	cmp	r6, r4
 8003dd6:	d109      	bne.n	8003dec <__libc_init_array+0x24>
 8003dd8:	2600      	movs	r6, #0
 8003dda:	f000 f82b 	bl	8003e34 <_init>
 8003dde:	4d0a      	ldr	r5, [pc, #40]	; (8003e08 <__libc_init_array+0x40>)
 8003de0:	4c0a      	ldr	r4, [pc, #40]	; (8003e0c <__libc_init_array+0x44>)
 8003de2:	1b64      	subs	r4, r4, r5
 8003de4:	10a4      	asrs	r4, r4, #2
 8003de6:	42a6      	cmp	r6, r4
 8003de8:	d105      	bne.n	8003df6 <__libc_init_array+0x2e>
 8003dea:	bd70      	pop	{r4, r5, r6, pc}
 8003dec:	00b3      	lsls	r3, r6, #2
 8003dee:	58eb      	ldr	r3, [r5, r3]
 8003df0:	4798      	blx	r3
 8003df2:	3601      	adds	r6, #1
 8003df4:	e7ee      	b.n	8003dd4 <__libc_init_array+0xc>
 8003df6:	00b3      	lsls	r3, r6, #2
 8003df8:	58eb      	ldr	r3, [r5, r3]
 8003dfa:	4798      	blx	r3
 8003dfc:	3601      	adds	r6, #1
 8003dfe:	e7f2      	b.n	8003de6 <__libc_init_array+0x1e>
 8003e00:	08003eac 	.word	0x08003eac
 8003e04:	08003eac 	.word	0x08003eac
 8003e08:	08003eac 	.word	0x08003eac
 8003e0c:	08003eb0 	.word	0x08003eb0

08003e10 <memcpy>:
 8003e10:	2300      	movs	r3, #0
 8003e12:	b510      	push	{r4, lr}
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d100      	bne.n	8003e1a <memcpy+0xa>
 8003e18:	bd10      	pop	{r4, pc}
 8003e1a:	5ccc      	ldrb	r4, [r1, r3]
 8003e1c:	54c4      	strb	r4, [r0, r3]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	e7f8      	b.n	8003e14 <memcpy+0x4>

08003e22 <memset>:
 8003e22:	0003      	movs	r3, r0
 8003e24:	1882      	adds	r2, r0, r2
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d100      	bne.n	8003e2c <memset+0xa>
 8003e2a:	4770      	bx	lr
 8003e2c:	7019      	strb	r1, [r3, #0]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	e7f9      	b.n	8003e26 <memset+0x4>
	...

08003e34 <_init>:
 8003e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e3a:	bc08      	pop	{r3}
 8003e3c:	469e      	mov	lr, r3
 8003e3e:	4770      	bx	lr

08003e40 <_fini>:
 8003e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e46:	bc08      	pop	{r3}
 8003e48:	469e      	mov	lr, r3
 8003e4a:	4770      	bx	lr
